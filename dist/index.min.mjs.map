{"version":3,"sources":["node-modules-polyfills-empty:http","node-modules-polyfills-empty:https","node-modules-polyfills-empty:crypto","../src/Typesense/Errors/index.ts","../src/Typesense/Errors/TypesenseError.ts","../src/Typesense/Errors/HTTPError.ts","../src/Typesense/Errors/MissingConfigurationError.ts","../src/Typesense/Errors/ObjectAlreadyExists.ts","../src/Typesense/Errors/ObjectNotFound.ts","../src/Typesense/Errors/ObjectUnprocessable.ts","../src/Typesense/Errors/RequestMalformed.ts","../src/Typesense/Errors/RequestUnauthorized.ts","../src/Typesense/Errors/ServerError.ts","../src/Typesense/Errors/ImportError.ts","../src/Typesense/Configuration.ts","../src/Typesense/ApiCall.ts","../src/Typesense/Types.ts","../src/Typesense/Utils.ts","../src/Typesense/RequestWithCache.ts","../src/Typesense/MultiSearch.ts","../src/Typesense/Collections.ts","../src/Typesense/SearchOnlyDocuments.ts","../src/Typesense/SearchOnlyCollection.ts","../src/Typesense/SearchClient.ts","../src/Typesense/Documents.ts","../src/Typesense/Overrides.ts","../src/Typesense/Override.ts","../src/Typesense/Synonyms.ts","../src/Typesense/Synonym.ts","../src/Typesense/Document.ts","../src/Typesense/Collection.ts","../src/Typesense/Aliases.ts","../src/Typesense/Alias.ts","../src/Typesense/Keys.ts","../src/Typesense/Key.ts","../src/Typesense/Debug.ts","../src/Typesense/Metrics.ts","../src/Typesense/Stats.ts","../src/Typesense/Health.ts","../src/Typesense/Operations.ts","../src/Typesense/Presets.ts","../src/Typesense/Preset.ts","../src/Typesense/AnalyticsRules.ts","../src/Typesense/AnalyticsRule.ts","../src/Typesense/AnalyticsEvents.ts","../src/Typesense/Analytics.ts","../src/Typesense/Stopwords.ts","../src/Typesense/Stopword.ts","../src/Typesense/ConversationModels.ts","../src/Typesense/ConversationModel.ts","../src/Typesense/Conversations.ts","../src/Typesense/Conversation.ts","../src/Typesense/StemmingDictionaries.ts","../src/Typesense/StemmingDictionary.ts","../src/Typesense/Stemming.ts","../src/Typesense/Client.ts"],"names":["require_http","__commonJSMin","exports","module","require_https","require_crypto","Errors_exports","__export","HTTPError","ImportError","MissingConfigurationError","ObjectAlreadyExists","ObjectNotFound","ObjectUnprocessable","RequestMalformed","RequestUnauthorized","ServerError","TypesenseError","message","httpBody","httpStatus","importResults","payload","Configuration","options","node","logger","key","array","i","j","import_http","import_https","arrayableParams","hasNoArrayValues","params","isNonArrayValue","normalizeArrayableParams","result","value","isErrorWithMessage","error","toErrorWithMessage","couldBeError","APIKEYHEADERNAME","HEALTHY","UNHEALTHY","isNodeJSEnvironment","ApiCall","configuration","endpoint","queryParameters","abortSignal","responseType","streamConfig","isStreamingRequest","bodyParameters","additionalHeaders","axios","requestType","skipConnectionTimeout","enableKeepAlive","requestNumber","lastException","wasAborted","numTries","abortListener","requestOptions","status","data","headers","transformedData","HTTPAgent","HTTPSAgent","source","response","line","jsonData","dataContent","resolve","reject","stream","allChunks","buffer","chunk","lines","reader","done","finalResult","processed","chunks","messagesChunks","lastChunk","metadataChunk","candidateNode","isDueForHealthcheck","isHealthy","defaultHeaders","seconds","messageFromServer","errorMessage","errorObj","callbackError","defaultCacheResponseForSeconds","defaultMaxSize","RequestWithCache","requestContext","methodName","requestParams","cacheOptions","cacheResponseForSeconds","maxSize","isCacheDisabled","path","queryParams","body","requestParamsJSON","cacheEntry","now","cachePromiseEntry","responsePromise","oldestEntry","context","method","RESOURCEPATH","MultiSearch","apiCall","useTextContentType","searchRequests","commonParams","cacheSearchResultsForSeconds","normalizedSearchRequests","paramsWithoutStream","normalizedQueryParams","Collections","schema","SearchOnlyDocuments","collectionName","searchParameters","additionalQueryParams","rest","operation","SearchOnlyCollection","name","SearchClient","_","collection","Documents","document","query","documents","documentsInJSONLFormat","isEmptyString","resultsInJSONLFormat","resultsInJSONFormat","r","failedItems","readableStream","str","Overrides","_Overrides","overrideId","Override","Synonyms","_Synonyms","synonymId","Synonym","Document","documentId","partialDocument","Collection","Aliases","_Aliases","mapping","aliasName","Alias","import_crypto","Keys","_Keys","searchKey","parameters","normalizedParams","paramsJSON","digest","keyPrefix","rawScopedKey","Key","id","Debug","Metrics","Health","Operations","operationName","Presets","_Presets","presetId","search","Preset","AnalyticsRules","_AnalyticsRules","AnalyticsRule","AnalyticsEvents","_AnalyticsEvents","Analytics","Stopwords","_Stopwords","stopwordId","Stopword","ConversationModels","_ConversationModels","ConversationModel","Conversations","Conversation","StemmingDictionaries","_StemmingDictionaries","wordRootCombinations","wordRootCombinationsInJSONLFormat","combo","StemmingDictionary","Stemming","Client"],"mappings":"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","file":"index.min.mjs","sourcesContent":["module.exports = {}","module.exports = {}","module.exports = {}","import HTTPError from \"./HTTPError\";\nimport MissingConfigurationError from \"./MissingConfigurationError\";\nimport ObjectAlreadyExists from \"./ObjectAlreadyExists\";\nimport ObjectNotFound from \"./ObjectNotFound\";\nimport ObjectUnprocessable from \"./ObjectUnprocessable\";\nimport RequestMalformed from \"./RequestMalformed\";\nimport RequestUnauthorized from \"./RequestUnauthorized\";\nimport ServerError from \"./ServerError\";\nimport ImportError from \"./ImportError\";\nimport TypesenseError from \"./TypesenseError\";\n\nexport {\n  HTTPError,\n  MissingConfigurationError,\n  ObjectAlreadyExists,\n  ObjectNotFound,\n  ObjectUnprocessable,\n  RequestMalformed,\n  RequestUnauthorized,\n  ServerError,\n  TypesenseError,\n  ImportError,\n};\n","export default class TypesenseError extends Error {\n  httpStatus?: number;\n  httpBody?: string;\n\n  // Source: https://stackoverflow.com/a/58417721/123545\n  constructor(message?: string, httpBody?: string, httpStatus?: number) {\n    super(message);\n    this.name = new.target.name;\n    this.httpBody = httpBody;\n    this.httpStatus = httpStatus;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class HTTPError extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class MissingConfigurationError extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class ObjectAlreadyExists extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class ObjectNotFound extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class ObjectUnprocessable extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class RequestMalformed extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class RequestUnauthorized extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class ServerError extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\nimport type { DocumentImportParameters, ImportResponse } from \"../Documents\";\nimport { ReadStream } from \"node:fs\";\n\ninterface ImportErrorPayload {\n  documentsInJSONLFormat: string | ReadStream;\n  options: DocumentImportParameters;\n  failedItems: ImportResponse[];\n  successCount: number;\n}\n\nexport default class ImportError extends TypesenseError {\n  payload: ImportErrorPayload;\n  importResults: ImportResponse[];\n  constructor(\n    message: string,\n    importResults: ImportResponse[],\n    payload: ImportErrorPayload,\n  ) {\n    super(message);\n    this.importResults = importResults;\n    this.payload = payload;\n  }\n}\n","import logger from \"loglevel\";\nimport { MissingConfigurationError } from \"./Errors\";\nimport type { Agent as HTTPAgent } from \"http\";\nimport type { Agent as HTTPSAgent } from \"https\";\nimport type { AxiosRequestConfig } from \"axios\";\nimport { DocumentSchema, SearchResponse } from \"./Documents\";\n\nexport interface NodeConfiguration {\n  host: string;\n  port: number;\n  protocol: string;\n  path?: string;\n  url?: string;\n}\n\nexport interface NodeConfigurationWithHostname {\n  host: string;\n  port: number;\n  protocol: string;\n  path?: string;\n}\n\nexport interface NodeConfigurationWithUrl {\n  url: string;\n}\n\nexport interface ConfigurationOptions {\n  apiKey: string;\n  nodes:\n    | NodeConfiguration[]\n    | NodeConfigurationWithHostname[]\n    | NodeConfigurationWithUrl[];\n  randomizeNodes?: boolean;\n  /**\n   * @deprecated\n   * masterNode is now consolidated to nodes, starting with Typesense Server v0.12'\n   */\n  masterNode?:\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl;\n  /**\n   * @deprecated\n   * readReplicaNodes is now consolidated to nodes, starting with Typesense Server v0.12'\n   */\n  readReplicaNodes?:\n    | NodeConfiguration[]\n    | NodeConfigurationWithHostname[]\n    | NodeConfigurationWithUrl[];\n  nearestNode?:\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl;\n  connectionTimeoutSeconds?: number;\n  timeoutSeconds?: number;\n  healthcheckIntervalSeconds?: number;\n  numRetries?: number;\n  retryIntervalSeconds?: number;\n  sendApiKeyAsQueryParam?: boolean | undefined;\n  useServerSideSearchCache?: boolean;\n  cacheSearchResultsForSeconds?: number;\n  additionalHeaders?: Record<string, string>;\n\n  logLevel?: logger.LogLevelDesc;\n  logger?: logger.Logger;\n\n  /**\n   * Set a custom HTTP Agent\n   *\n   * This is helpful for eg, to enable keepAlive which helps prevents ECONNRESET socket hang up errors\n   *    Usage:\n   *      const { Agent: HTTPAgent } = require(\"http\");\n   *      ...\n   *      httpAgent: new HTTPAgent({ keepAlive: true }),\n   * @type {HTTPAgent}\n   */\n  httpAgent?: HTTPAgent;\n\n  /**\n   * Set a custom HTTPS Agent\n   *\n   * This is helpful for eg, to enable keepAlive which helps prevents ECONNRESET socket hang up errors\n   *    Usage:\n   *      const { Agent: HTTPSAgent } = require(\"https\");\n   *      ...\n   *      httpsAgent: new HTTPSAgent({ keepAlive: true }),\n   * @type {HTTPSAgent}\n   */\n  httpsAgent?: HTTPSAgent;\n\n  /**\n   * Set a custom paramsSerializer\n   *\n   * See axios documentation for more information on how to use this parameter: https://axios-http.com/docs/req_config\n   *  This is helpful for handling React Native issues like this: https://github.com/axios/axios/issues/6102#issuecomment-2085301397\n   * @type {any}\n   */\n  paramsSerializer?: any;\n\n  /**\n   * Set a custom axios adapter\n   *\n   * Useful for customizing the underlying HTTP client library used by Typesense.\n   *\n   * For example, you can use this to use a custom HTTP client library like `fetch`, in order for the library to work on the edge.\n   * Related GiHub issue: https://github.com/typesense/typesense-js/issues/161\n   *\n   * See axios documentation for more information on how to use this parameter: https://axios-http.com/docs/req_config\n   */\n  axiosAdapter?: AxiosRequestConfig[\"adapter\"];\n}\n\n/**\n * Configuration options for streaming responses\n */\nexport interface BaseStreamConfig {\n  /**\n   * Callback function that will be called for each chunk of data received\n   * during streaming\n   */\n  onChunk?: (data: { conversation_id: string; message: string }) => void;\n  /**\n   * Callback function that will be called if there is an error during streaming\n   */\n  onError?: (error: Error) => void;\n}\n\n/**\n * Stream configuration for standard search responses\n * For specialized responses like MultiSearch, extend BaseStreamConfig with the appropriate onComplete signature\n */\nexport interface StreamConfig<T extends DocumentSchema>\n  extends BaseStreamConfig {\n  /**\n   * Callback function that will be called when the streaming is complete\n   */\n  onComplete?: (data: SearchResponse<T>) => void;\n}\n\nexport default class Configuration {\n  readonly nodes:\n    | NodeConfiguration[]\n    | NodeConfigurationWithHostname[]\n    | NodeConfigurationWithUrl[];\n  readonly nearestNode?:\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl;\n  readonly connectionTimeoutSeconds: number;\n  readonly healthcheckIntervalSeconds: number;\n  readonly numRetries: number;\n  readonly retryIntervalSeconds: number;\n  readonly apiKey: string;\n  readonly sendApiKeyAsQueryParam?: boolean;\n  readonly cacheSearchResultsForSeconds: number;\n  readonly useServerSideSearchCache: boolean;\n  readonly logger: logger.Logger;\n  readonly logLevel: logger.LogLevelDesc;\n  readonly additionalHeaders?: Record<string, string>;\n  readonly httpAgent?: HTTPAgent;\n  readonly httpsAgent?: HTTPSAgent;\n  readonly paramsSerializer?: any;\n  readonly axiosAdapter?: AxiosRequestConfig[\"adapter\"];\n\n  constructor(options: ConfigurationOptions) {\n    this.nodes = options.nodes || [];\n    this.nodes = this.nodes\n      .map((node) => this.setDefaultPathInNode(node))\n      .map((node) => this.setDefaultPortInNode(node))\n      .map((node) => ({ ...node })) as NodeConfiguration[]; // Make a deep copy\n\n    if (options.randomizeNodes == null) {\n      options.randomizeNodes = true;\n    }\n\n    if (options.randomizeNodes === true) {\n      this.shuffleArray(this.nodes);\n    }\n\n    this.nearestNode = options.nearestNode;\n    this.nearestNode = this.setDefaultPathInNode(this.nearestNode);\n    this.nearestNode = this.setDefaultPortInNode(this.nearestNode);\n\n    this.connectionTimeoutSeconds =\n      options.connectionTimeoutSeconds || options.timeoutSeconds || 5;\n    this.healthcheckIntervalSeconds = options.healthcheckIntervalSeconds || 60;\n    this.numRetries =\n      (options.numRetries !== undefined && options.numRetries >= 0\n        ? options.numRetries\n        : this.nodes.length + (this.nearestNode == null ? 0 : 1)) || 3;\n    this.retryIntervalSeconds = options.retryIntervalSeconds || 0.1;\n\n    this.apiKey = options.apiKey;\n    this.sendApiKeyAsQueryParam = options.sendApiKeyAsQueryParam; // We will set a default for this in Client and SearchClient\n\n    this.cacheSearchResultsForSeconds =\n      options.cacheSearchResultsForSeconds || 0; // Disable client-side cache by default\n    this.useServerSideSearchCache = options.useServerSideSearchCache || false;\n\n    this.axiosAdapter = options.axiosAdapter;\n    this.logger = options.logger || logger;\n    this.logLevel = options.logLevel || \"warn\";\n    this.logger.setLevel(this.logLevel);\n\n    this.additionalHeaders = options.additionalHeaders;\n\n    this.httpAgent = options.httpAgent;\n    this.httpsAgent = options.httpsAgent;\n\n    this.paramsSerializer = options.paramsSerializer;\n\n    this.showDeprecationWarnings(options);\n    this.validate();\n  }\n\n  validate(): boolean {\n    if (this.nodes == null || this.nodes.length === 0 || this.validateNodes()) {\n      throw new MissingConfigurationError(\n        \"Ensure that nodes[].protocol, nodes[].host and nodes[].port are set\",\n      );\n    }\n\n    if (\n      this.nearestNode != null &&\n      this.isNodeMissingAnyParameters(this.nearestNode)\n    ) {\n      throw new MissingConfigurationError(\n        \"Ensure that nearestNodes.protocol, nearestNodes.host and nearestNodes.port are set\",\n      );\n    }\n\n    if (this.apiKey == null) {\n      throw new MissingConfigurationError(\"Ensure that apiKey is set\");\n    }\n\n    return true;\n  }\n\n  private validateNodes(): boolean {\n    return this.nodes.some((node) => {\n      return this.isNodeMissingAnyParameters(node);\n    });\n  }\n\n  private isNodeMissingAnyParameters(\n    node:\n      | NodeConfiguration\n      | NodeConfigurationWithHostname\n      | NodeConfigurationWithUrl,\n  ): boolean {\n    return (\n      ![\"protocol\", \"host\", \"port\", \"path\"].every((key) => {\n        return node.hasOwnProperty(key);\n      }) && node[\"url\"] == null\n    );\n  }\n\n  private setDefaultPathInNode(\n    node:\n      | NodeConfiguration\n      | NodeConfigurationWithHostname\n      | NodeConfigurationWithUrl\n      | undefined,\n  ):\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl\n    | undefined {\n    if (node != null && !node.hasOwnProperty(\"path\")) {\n      node[\"path\"] = \"\";\n    }\n    return node;\n  }\n\n  private setDefaultPortInNode(\n    node:\n      | NodeConfiguration\n      | NodeConfigurationWithHostname\n      | NodeConfigurationWithUrl\n      | undefined,\n  ):\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl\n    | undefined {\n    if (\n      node != null &&\n      !node.hasOwnProperty(\"port\") &&\n      node.hasOwnProperty(\"protocol\")\n    ) {\n      switch (node[\"protocol\"]) {\n        case \"https\":\n          node[\"port\"] = 443;\n          break;\n        case \"http\":\n          node[\"port\"] = 80;\n          break;\n      }\n    }\n    return node;\n  }\n\n  private showDeprecationWarnings(options: ConfigurationOptions): void {\n    if (options.timeoutSeconds) {\n      this.logger.warn(\n        \"Deprecation warning: timeoutSeconds is now renamed to connectionTimeoutSeconds\",\n      );\n    }\n    if (options.masterNode) {\n      this.logger.warn(\n        \"Deprecation warning: masterNode is now consolidated to nodes, starting with Typesense Server v0.12\",\n      );\n    }\n    if (options.readReplicaNodes) {\n      this.logger.warn(\n        \"Deprecation warning: readReplicaNodes is now consolidated to nodes, starting with Typesense Server v0.12\",\n      );\n    }\n  }\n\n  private shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n}\n","import type {\n  AxiosAdapter,\n  AxiosRequestConfig,\n  AxiosResponse,\n  Method,\n} from \"axios\";\nimport axios from \"axios\";\nimport { Agent as HTTPAgent } from \"http\";\nimport { Agent as HTTPSAgent } from \"https\";\nimport { Logger } from \"loglevel\";\nimport Configuration from \"./Configuration\";\nimport type { NodeConfiguration, StreamConfig } from \"./Configuration\";\nimport {\n  HTTPError,\n  ObjectAlreadyExists,\n  ObjectNotFound,\n  ObjectUnprocessable,\n  RequestMalformed,\n  RequestUnauthorized,\n  ServerError,\n} from \"./Errors\";\nimport TypesenseError from \"./Errors/TypesenseError\";\nimport type { DocumentSchema, SearchResponse } from \"./Documents\";\nimport { toErrorWithMessage } from \"./Utils\";\nimport { MessageChunk } from \"./Types\";\n\nconst APIKEYHEADERNAME = \"X-TYPESENSE-API-KEY\";\nconst HEALTHY = true;\nconst UNHEALTHY = false;\n\ninterface Node extends NodeConfiguration {\n  isHealthy: boolean;\n  index: string | number;\n}\n\nconst isNodeJSEnvironment =\n  typeof process !== \"undefined\" &&\n  process.versions != null &&\n  process.versions.node != null &&\n  typeof window === \"undefined\";\n\nexport interface HttpClient {\n  get<T>(\n    endpoint: string,\n    queryParameters: Record<string, unknown>,\n    {\n      abortSignal,\n      responseType,\n      streamConfig,\n      isStreamingRequest,\n    }: {\n      abortSignal?: AbortSignal | null;\n      responseType?: AxiosRequestConfig[\"responseType\"] | undefined;\n      streamConfig?:\n        | StreamConfig<T extends DocumentSchema ? T : DocumentSchema>\n        | undefined;\n      isStreamingRequest: boolean | undefined;\n    },\n  ): Promise<T>;\n  delete<T>(\n    endpoint: string,\n    queryParameters: Record<string, unknown>,\n  ): Promise<T>;\n  post<T>(\n    endpoint: string,\n    bodyParameters: unknown,\n    queryParameters: Record<string, unknown>,\n    additionalHeaders: Record<string, string>,\n    {\n      abortSignal,\n      responseType,\n      streamConfig,\n      isStreamingRequest,\n    }: {\n      abortSignal?: AbortSignal | null;\n      responseType?: AxiosRequestConfig[\"responseType\"] | undefined;\n      streamConfig?:\n        | StreamConfig<T extends DocumentSchema ? T : DocumentSchema>\n        | undefined;\n      isStreamingRequest: boolean | undefined;\n    },\n  ): Promise<T>;\n  put<T>(\n    endpoint: string,\n    bodyParameters: unknown,\n    queryParameters: Record<string, unknown>,\n  ): Promise<T>;\n  patch<T>(\n    endpoint: string,\n    bodyParameters: unknown,\n    queryParameters: Record<string, unknown>,\n  ): Promise<T>;\n}\n\nexport default class ApiCall implements HttpClient {\n  private readonly apiKey: string;\n  private readonly nodes: Node[];\n  private readonly nearestNode: Node;\n  private readonly connectionTimeoutSeconds: number;\n  private readonly healthcheckIntervalSeconds: number;\n  private readonly retryIntervalSeconds: number;\n  private readonly sendApiKeyAsQueryParam?: boolean;\n  private readonly numRetriesPerRequest: number;\n  private readonly additionalUserHeaders?: Record<string, string>;\n\n  private readonly logger: Logger;\n  private currentNodeIndex: number;\n\n  constructor(private configuration: Configuration) {\n    this.apiKey = this.configuration.apiKey;\n    this.nodes =\n      this.configuration.nodes == null\n        ? this.configuration.nodes\n        : JSON.parse(JSON.stringify(this.configuration.nodes)); // Make a copy, since we'll be adding additional metadata to the nodes\n    this.nearestNode =\n      this.configuration.nearestNode == null\n        ? this.configuration.nearestNode\n        : JSON.parse(JSON.stringify(this.configuration.nearestNode));\n    this.connectionTimeoutSeconds = this.configuration.connectionTimeoutSeconds;\n    this.healthcheckIntervalSeconds =\n      this.configuration.healthcheckIntervalSeconds;\n    this.numRetriesPerRequest = this.configuration.numRetries;\n    this.retryIntervalSeconds = this.configuration.retryIntervalSeconds;\n    this.sendApiKeyAsQueryParam = this.configuration.sendApiKeyAsQueryParam;\n    this.additionalUserHeaders = this.configuration.additionalHeaders;\n\n    this.logger = this.configuration.logger;\n\n    this.initializeMetadataForNodes();\n    this.currentNodeIndex = -1;\n  }\n\n  async get<T>(\n    endpoint: string,\n    queryParameters: any = {},\n    {\n      abortSignal = null,\n      responseType = undefined,\n      streamConfig = undefined,\n      isStreamingRequest,\n    }: {\n      abortSignal?: any;\n      responseType?: AxiosRequestConfig[\"responseType\"] | undefined;\n      streamConfig?:\n        | StreamConfig<T extends DocumentSchema ? T : DocumentSchema>\n        | undefined;\n      isStreamingRequest?: boolean | undefined;\n    } = {},\n  ): Promise<T> {\n    return this.performRequest<T>(\"get\", endpoint, {\n      queryParameters,\n      abortSignal,\n      responseType,\n      streamConfig,\n      isStreamingRequest,\n    });\n  }\n\n  async delete<T>(endpoint: string, queryParameters: any = {}): Promise<T> {\n    return this.performRequest<T>(\"delete\", endpoint, {\n      queryParameters,\n      isStreamingRequest: false,\n    });\n  }\n\n  async post<T>(\n    endpoint: string,\n    bodyParameters: any = {},\n    queryParameters: any = {},\n    additionalHeaders: any = {},\n    {\n      abortSignal = null,\n      responseType = undefined,\n      streamConfig = undefined,\n      isStreamingRequest,\n    }: {\n      abortSignal?: AbortSignal | null;\n      responseType?: AxiosRequestConfig[\"responseType\"] | undefined;\n      streamConfig?:\n        | StreamConfig<T extends DocumentSchema ? T : DocumentSchema>\n        | undefined;\n      isStreamingRequest?: boolean | undefined;\n    } = {},\n  ): Promise<T> {\n    return this.performRequest<T>(\"post\", endpoint, {\n      queryParameters,\n      bodyParameters,\n      additionalHeaders,\n      abortSignal,\n      responseType,\n      streamConfig,\n      isStreamingRequest,\n    });\n  }\n\n  async put<T>(\n    endpoint: string,\n    bodyParameters: any = {},\n    queryParameters: any = {},\n  ): Promise<T> {\n    return this.performRequest<T>(\"put\", endpoint, {\n      queryParameters,\n      bodyParameters,\n      isStreamingRequest: false,\n    });\n  }\n\n  async patch<T>(\n    endpoint: string,\n    bodyParameters: any = {},\n    queryParameters: any = {},\n  ): Promise<T> {\n    return this.performRequest<T>(\"patch\", endpoint, {\n      queryParameters,\n      bodyParameters,\n      isStreamingRequest: false,\n    });\n  }\n\n  private getAdapter(): AxiosAdapter | undefined {\n    if (!this.configuration.axiosAdapter) return undefined;\n\n    if (typeof this.configuration.axiosAdapter === \"function\")\n      return this.configuration.axiosAdapter;\n\n    const isCloudflareWorkers =\n      typeof navigator !== \"undefined\" &&\n      navigator.userAgent === \"Cloudflare-Workers\";\n\n    return isCloudflareWorkers\n      ? axios.getAdapter(this.configuration.axiosAdapter).bind(globalThis)\n      : axios.getAdapter(this.configuration.axiosAdapter);\n  }\n\n  async performRequest<T>(\n    requestType: Method,\n    endpoint: string,\n    {\n      queryParameters = null,\n      bodyParameters = null,\n      additionalHeaders = {},\n      abortSignal = null,\n      responseType = undefined,\n      skipConnectionTimeout = false,\n      enableKeepAlive = undefined,\n      streamConfig = undefined,\n      isStreamingRequest,\n    }: {\n      queryParameters?: any;\n      bodyParameters?: any;\n      additionalHeaders?: any;\n      abortSignal?: any;\n      responseType?: AxiosRequestConfig[\"responseType\"] | undefined;\n      skipConnectionTimeout?: boolean;\n      enableKeepAlive?: boolean | undefined;\n      streamConfig?:\n        | StreamConfig<T extends DocumentSchema ? T : DocumentSchema>\n        | undefined;\n      isStreamingRequest?: boolean | undefined;\n    },\n  ): Promise<T> {\n    this.configuration.validate();\n\n    if (isStreamingRequest) {\n      this.logger.debug(`Request: Performing streaming request to ${endpoint}`);\n\n      // For browser streaming, always use responseType: \"stream\" and adapter: \"fetch\"\n      if (!isNodeJSEnvironment && typeof fetch !== \"undefined\") {\n        this.logger.debug(\"Using fetch adapter for browser streaming\");\n        responseType = \"stream\";\n      }\n    }\n\n    const requestNumber = Date.now();\n    let lastException;\n    let wasAborted = false;\n    this.logger.debug(\n      `Request #${requestNumber}: Performing ${requestType.toUpperCase()} request: ${endpoint}`,\n    );\n    for (\n      let numTries = 1;\n      numTries <= this.numRetriesPerRequest + 1;\n      numTries++\n    ) {\n      const node = this.getNextNode(requestNumber);\n      this.logger.debug(\n        `Request #${requestNumber}: Attempting ${requestType.toUpperCase()} request Try #${numTries} to Node ${\n          node.index\n        }`,\n      );\n\n      if (abortSignal && abortSignal.aborted) {\n        return Promise.reject(new Error(\"Request aborted by caller.\"));\n      }\n\n      let abortListener: ((event: Event) => void) | undefined;\n\n      try {\n        const requestOptions: AxiosRequestConfig<string> = {\n          method: requestType,\n          url: this.uriFor(endpoint, node),\n          headers: Object.assign(\n            {},\n            this.defaultHeaders(),\n            additionalHeaders,\n            this.additionalUserHeaders,\n          ),\n          maxContentLength: Infinity,\n          maxBodyLength: Infinity,\n          validateStatus: (status) => {\n            /* Override default validateStatus, which only considers 2xx a success.\n                In our case, if the server returns any HTTP code, we will handle it below.\n                We do this to be able to raise custom errors based on response code.\n             */\n            return status > 0;\n          },\n          transformResponse: [\n            (data, headers) => {\n              let transformedData = data;\n              if (\n                headers !== undefined &&\n                typeof data === \"string\" &&\n                headers[\"content-type\"] &&\n                headers[\"content-type\"].startsWith(\"application/json\")\n              ) {\n                transformedData = JSON.parse(data);\n              }\n              return transformedData;\n            },\n          ],\n        };\n\n        // Use fetch adapter only for streaming requests in browser environments\n        requestOptions.adapter =\n          isStreamingRequest && !isNodeJSEnvironment\n            ? \"fetch\"\n            : this.getAdapter();\n\n        if (skipConnectionTimeout !== true) {\n          requestOptions.timeout = this.connectionTimeoutSeconds * 1000;\n        }\n\n        if (queryParameters && Object.keys(queryParameters).length !== 0) {\n          requestOptions.params = queryParameters;\n        }\n\n        if (this.sendApiKeyAsQueryParam) {\n          requestOptions.params = requestOptions.params || {};\n          requestOptions.params[\"x-typesense-api-key\"] = this.apiKey;\n        }\n\n        if (this.configuration.httpAgent) {\n          this.logger.debug(\n            `Request #${requestNumber}: Using custom httpAgent`,\n          );\n          requestOptions.httpAgent = this.configuration.httpAgent;\n        } else if (enableKeepAlive === true) {\n          if (!isNodeJSEnvironment) {\n            this.logger.warn(\n              `Request #${requestNumber}: Cannot use custom httpAgent in a browser environment to enable keepAlive`,\n            );\n          } else {\n            this.logger.debug(`Request #${requestNumber}: Enabling KeepAlive`);\n            requestOptions.httpAgent = new HTTPAgent({ keepAlive: true });\n          }\n        }\n\n        if (this.configuration.httpsAgent) {\n          this.logger.debug(\n            `Request #${requestNumber}: Using custom httpsAgent`,\n          );\n          requestOptions.httpsAgent = this.configuration.httpsAgent;\n        } else if (enableKeepAlive === true) {\n          if (!isNodeJSEnvironment) {\n            this.logger.warn(\n              `Request #${requestNumber}: Cannot use custom httpAgent in a browser environment to enable keepAlive`,\n            );\n          } else {\n            this.logger.debug(`Request #${requestNumber}: Enabling keepAlive`);\n            requestOptions.httpsAgent = new HTTPSAgent({ keepAlive: true });\n          }\n        }\n\n        if (this.configuration.paramsSerializer) {\n          this.logger.debug(\n            `Request #${requestNumber}: Using custom paramsSerializer`,\n          );\n          requestOptions.paramsSerializer = this.configuration.paramsSerializer;\n        }\n\n        if (\n          bodyParameters &&\n          ((typeof bodyParameters === \"string\" &&\n            bodyParameters.length !== 0) ||\n            (typeof bodyParameters === \"object\" &&\n              Object.keys(bodyParameters).length !== 0))\n        ) {\n          requestOptions.data = bodyParameters;\n        }\n\n        // Translate from user-provided AbortController to the Axios request cancel mechanism.\n        if (abortSignal) {\n          const cancelToken = axios.CancelToken;\n          const source = cancelToken.source();\n          abortListener = () => {\n            wasAborted = true;\n            source.cancel();\n          };\n          abortSignal.addEventListener(\"abort\", abortListener);\n          requestOptions.cancelToken = source.token;\n        }\n\n        if (isStreamingRequest) {\n          requestOptions.responseType = \"stream\";\n          if (!isNodeJSEnvironment) {\n            requestOptions.headers = {\n              ...requestOptions.headers,\n              Accept: \"text/event-stream\",\n            };\n          }\n        } else if (responseType) {\n          requestOptions.responseType = responseType;\n        }\n\n        const response = await axios(requestOptions);\n\n        if (response.status >= 1 && response.status <= 499) {\n          // Treat any status code > 0 and < 500 to be an indication that node is healthy\n          // We exclude 0 since some clients return 0 when request fails\n          this.setNodeHealthcheck(node, HEALTHY);\n        }\n\n        this.logger.debug(\n          `Request #${requestNumber}: Request to Node ${node.index} was made. Response Code was ${response.status}.`,\n        );\n\n        if (response.status >= 200 && response.status < 300) {\n          if (isStreamingRequest) {\n            return this.handleStreamingResponse<T>(response, streamConfig);\n          }\n          return Promise.resolve(response.data);\n        } else if (response.status < 500) {\n          // Next, if response is anything but 5xx, don't retry, return a custom error\n          return Promise.reject(\n            this.customErrorForResponse(\n              response,\n              response.data?.message,\n              requestOptions.data,\n            ),\n          );\n        } else {\n          // Retry all other HTTP errors (HTTPStatus > 500)\n          // This will get caught by the catch block below\n          throw this.customErrorForResponse(\n            response,\n            response.data?.message,\n            requestOptions.data,\n          );\n        }\n      } catch (error: any) {\n        // This block handles retries for HTTPStatus > 500 and network layer issues like connection timeouts\n        if (!wasAborted) {\n          this.setNodeHealthcheck(node, UNHEALTHY);\n        }\n        lastException = error;\n        this.logger.warn(\n          `Request #${requestNumber}: Request to Node ${\n            node.index\n          } failed due to \"${error?.code ?? \"\"} ${error.message}${\n            error.response == null\n              ? \"\"\n              : \" - \" + JSON.stringify(error.response?.data)\n          }\"`,\n        );\n\n        if (wasAborted) {\n          return Promise.reject(new Error(\"Request aborted by caller.\"));\n        }\n\n        if (isStreamingRequest) {\n          this.invokeOnErrorCallback(error, streamConfig);\n        }\n\n        if (numTries < this.numRetriesPerRequest + 1) {\n          this.logger.warn(\n            `Request #${requestNumber}: Sleeping for ${this.retryIntervalSeconds}s and then retrying request...`,\n          );\n        } else {\n          this.logger.debug(\n            `Request #${requestNumber}: No retries left. Raising last error`,\n          );\n          return Promise.reject(lastException);\n        }\n        await this.timer(this.retryIntervalSeconds);\n      } finally {\n        if (abortSignal && abortListener) {\n          abortSignal.removeEventListener(\"abort\", abortListener);\n        }\n      }\n    }\n\n    this.logger.debug(\n      `Request #${requestNumber}: No retries left. Raising last error`,\n    );\n    return Promise.reject(lastException);\n  }\n\n  private processStreamingLine(line: string): {\n    conversation_id: string;\n    message: string;\n  } | null {\n    if (!line.trim() || line === \"data: [DONE]\") {\n      return null;\n    }\n\n    // Handle SSE format (data: {...})\n    if (line.startsWith(\"data: \")) {\n      return this.processDataLine(line.slice(6).trim());\n    }\n\n    // Try parsing as JSON if it starts with a brace\n    if (line.trim().startsWith(\"{\")) {\n      try {\n        const jsonData = JSON.parse(line.trim());\n        if (jsonData && typeof jsonData === \"object\") {\n          if (!jsonData.conversation_id) {\n            jsonData.conversation_id = \"unknown\";\n          }\n          if (!jsonData.message && jsonData.message !== \"\") {\n            jsonData.message = \"\";\n          }\n          return jsonData;\n        }\n        return {\n          conversation_id: \"unknown\",\n          message: JSON.stringify(jsonData),\n        };\n      } catch (e) {\n        return {\n          conversation_id: \"unknown\",\n          message: line.trim(),\n        };\n      }\n    }\n\n    return {\n      conversation_id: \"unknown\",\n      message: line.trim(),\n    };\n  }\n\n  private processDataLine(dataContent: string): {\n    conversation_id: string;\n    message: string;\n  } | null {\n    if (!dataContent) {\n      return null;\n    }\n\n    if (dataContent.startsWith(\"{\")) {\n      try {\n        const jsonData = JSON.parse(dataContent);\n        // Ensure the required fields exist\n        if (jsonData && typeof jsonData === \"object\") {\n          if (!jsonData.conversation_id) {\n            jsonData.conversation_id = \"unknown\";\n          }\n          if (!jsonData.message && jsonData.message !== \"\") {\n            jsonData.message = \"\";\n          }\n          return jsonData;\n        }\n        return {\n          conversation_id: \"unknown\",\n          message: JSON.stringify(jsonData),\n        };\n      } catch (e) {\n        // Not valid JSON, use as plain text\n        return {\n          conversation_id: \"unknown\",\n          message: dataContent,\n        };\n      }\n    }\n\n    // For plain text\n    return {\n      conversation_id: \"unknown\",\n      message: dataContent,\n    };\n  }\n\n  private async handleStreamingResponse<T>(\n    response: AxiosResponse,\n    streamConfig:\n      | StreamConfig<T extends DocumentSchema ? T : DocumentSchema>\n      | undefined,\n  ): Promise<T> {\n    this.logger.debug(\n      `Handling streaming response. Environment: ${isNodeJSEnvironment ? \"Node.js\" : \"Browser\"}`,\n    );\n\n    if (isNodeJSEnvironment && response.data) {\n      return this.handleNodeStreaming<T>(response, streamConfig);\n    }\n\n    if (!isNodeJSEnvironment) {\n      return this.handleBrowserStreaming<T>(response, streamConfig);\n    }\n\n    this.logger.debug(\"Processing non-streaming response\");\n    this.invokeOnCompleteCallback(response.data, streamConfig);\n    return Promise.resolve(response.data as T);\n  }\n\n  private handleNodeStreaming<T>(\n    response: AxiosResponse,\n    streamConfig?: StreamConfig<T extends DocumentSchema ? T : DocumentSchema>,\n  ): Promise<T> {\n    this.logger.debug(\"Processing Node.js stream\");\n    return new Promise<T>((resolve, reject) => {\n      const stream = response.data;\n      const allChunks:\n        | [\n            ...MessageChunk[],\n            SearchResponse<T extends DocumentSchema ? T : DocumentSchema>,\n          ]\n        | [] = [];\n      let buffer = \"\";\n\n      stream.on(\"data\", (chunk) => {\n        try {\n          const data = chunk.toString();\n          buffer += data;\n\n          const lines = buffer.split(\"\\n\");\n          buffer = lines.pop() ?? \"\";\n\n          this.processStreamLines(lines, allChunks, streamConfig);\n        } catch (error) {\n          reject(error);\n        }\n      });\n\n      stream.on(\"end\", () => {\n        if (buffer.trim().length > 0) {\n          const lines = buffer.split(\"\\n\");\n          this.processStreamLines(lines, allChunks, streamConfig);\n        }\n\n        this.finalizeStreamResult<T>(\n          allChunks,\n          resolve,\n          response,\n          streamConfig,\n        );\n      });\n\n      stream.on(\"error\", (error: unknown) => {\n        this.logger.error(`Stream error: ${error}`);\n        this.invokeOnErrorCallback(error, streamConfig);\n        reject(error);\n      });\n    });\n  }\n\n  private handleBrowserStreaming<T>(\n    response: AxiosResponse,\n    streamConfig?: StreamConfig<T extends DocumentSchema ? T : DocumentSchema>,\n  ): Promise<T> {\n    this.logger.debug(\"Processing browser stream\");\n\n    return new Promise<T>(async (resolve, reject) => {\n      try {\n        if (response.data && typeof response.data.getReader === \"function\") {\n          return this.handleBrowserReadableStream<T>(\n            response.data,\n            resolve,\n            reject,\n            response,\n            streamConfig,\n          );\n        }\n\n        if (typeof response.data === \"string\") {\n          return this.handleBrowserStringResponse<T>(\n            response.data,\n            resolve,\n            response,\n            streamConfig,\n          );\n        }\n\n        if (typeof response.data === \"object\" && response.data !== null) {\n          this.logger.debug(\"No stream found, but data object is available\");\n          this.invokeOnCompleteCallback(response.data, streamConfig);\n          return resolve(response.data as T);\n        }\n\n        this.logger.error(\"No usable data found in response\");\n        return reject(new Error(\"No usable data found in response\"));\n      } catch (error) {\n        this.logger.error(`Error processing streaming response: ${error}`);\n        this.invokeOnErrorCallback(error, streamConfig);\n        reject(error);\n      }\n    });\n  }\n\n  private async handleBrowserReadableStream<T>(\n    stream: any,\n    resolve: (value: T) => void,\n    reject: (reason?: any) => void,\n    response: AxiosResponse,\n    streamConfig:\n      | StreamConfig<T extends DocumentSchema ? T : DocumentSchema>\n      | undefined,\n  ): Promise<void> {\n    this.logger.debug(\"Found ReadableStream in response.data\");\n    const reader = stream.getReader();\n    const allChunks:\n      | [\n          ...MessageChunk[],\n          SearchResponse<T extends DocumentSchema ? T : DocumentSchema>,\n        ]\n      | [] = [];\n    let buffer = \"\";\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          this.logger.debug(\"Stream reading complete\");\n          if (buffer.trim()) {\n            const lines = buffer.split(\"\\n\");\n            this.processStreamLines(lines, allChunks, streamConfig);\n          }\n          break;\n        }\n\n        const chunk = new TextDecoder().decode(value);\n        this.logger.debug(`Received chunk: ${chunk.length} bytes`);\n\n        buffer += chunk;\n        const lines = buffer.split(\"\\n\");\n        buffer = lines.pop() || \"\";\n\n        this.processStreamLines(lines, allChunks, streamConfig);\n      }\n\n      this.finalizeStreamResult<T>(allChunks, resolve, response, streamConfig);\n    } catch (error) {\n      this.logger.error(`Stream error: ${error}`);\n      this.invokeOnErrorCallback(error, streamConfig);\n      reject(error);\n    }\n  }\n\n  private handleBrowserStringResponse<T>(\n    data: string,\n    resolve: (value: T) => void,\n    response: AxiosResponse,\n    streamConfig:\n      | StreamConfig<T extends DocumentSchema ? T : DocumentSchema>\n      | undefined,\n  ): void {\n    this.logger.debug(\"Processing text response as stream data\");\n    const allChunks:\n      | [\n          ...MessageChunk[],\n          SearchResponse<T extends DocumentSchema ? T : DocumentSchema>,\n        ]\n      | [] = [];\n\n    const lines = data.split(\"\\n\");\n    this.processStreamLines(lines, allChunks, streamConfig);\n\n    if (allChunks.length > 0) {\n      const finalResult =\n        this.combineStreamingChunks<\n          T extends DocumentSchema ? T : DocumentSchema\n        >(allChunks);\n      this.invokeOnCompleteCallback(finalResult, streamConfig);\n      resolve(finalResult as unknown as T);\n    } else {\n      // If no chunks were processed, use the original response\n      this.logger.debug(\"No chunks processed, returning original API response\");\n      this.invokeOnCompleteCallback(response.data, streamConfig);\n      resolve(response.data as T);\n    }\n  }\n\n  private processStreamLines<T extends DocumentSchema>(\n    lines: string[],\n    allChunks: [...MessageChunk[], SearchResponse<T>] | [],\n    streamConfig: StreamConfig<T> | undefined,\n  ): void {\n    for (const line of lines) {\n      if (line.trim() && line !== \"data: [DONE]\") {\n        const processed = this.processStreamingLine(line);\n        if (processed !== null) {\n          this.invokeOnChunkCallback(processed, streamConfig);\n          (allChunks as MessageChunk[]).push(processed);\n        }\n      }\n    }\n  }\n\n  private finalizeStreamResult<T>(\n    allChunks:\n      | [\n          ...MessageChunk[],\n          SearchResponse<T extends DocumentSchema ? T : DocumentSchema>,\n        ]\n      | [],\n    resolve: (value: T) => void,\n    response: AxiosResponse,\n    streamConfig?: StreamConfig<T extends DocumentSchema ? T : DocumentSchema>,\n  ): void {\n    if (allChunks.length > 0) {\n      const finalResult = this.combineStreamingChunks(allChunks);\n      this.logger.debug(\"Stream processing complete\");\n      this.invokeOnCompleteCallback(finalResult, streamConfig);\n      resolve(finalResult as unknown as T);\n    } else {\n      this.logger.debug(\"No chunks processed, returning original API response\");\n      this.invokeOnCompleteCallback(response.data, streamConfig);\n      resolve(response.data as T);\n    }\n  }\n\n  /**\n   * Combines multiple streaming chunks into a single coherent result\n   * This is critical for ensuring we return the complete data rather than just the last chunk\n   */\n  private combineStreamingChunks<T extends DocumentSchema>(\n    chunks: [...MessageChunk[], SearchResponse<T>] | [],\n  ): SearchResponse<T> {\n    if (chunks.length === 0) return {} as SearchResponse<T>;\n    if (chunks.length === 1) return chunks[0] as unknown as SearchResponse<T>;\n\n    // For conversation streams with message chunks\n    const messagesChunks = this.getMessageChunks(\n      chunks as [...MessageChunk[], SearchResponse<T>],\n    );\n    if (messagesChunks.length > 0) {\n      return this.combineMessageChunks(\n        chunks as [...MessageChunk[], SearchResponse<T>],\n        messagesChunks,\n      );\n    }\n\n    // For regular search responses\n    const lastChunk = chunks[chunks.length - 1];\n    if (!this.isCompleteSearchResponse(lastChunk)) {\n      throw new Error(\"Last chunk is not a complete search response\");\n    }\n\n    return lastChunk;\n  }\n\n  private getMessageChunks<T extends DocumentSchema>(\n    chunks: [...MessageChunk[], SearchResponse<T>],\n  ): MessageChunk[] {\n    return chunks.filter(this.isChunkMessage);\n  }\n\n  private isChunkMessage(chunk: unknown): chunk is MessageChunk {\n    return (\n      typeof chunk === \"object\" &&\n      chunk !== null &&\n      \"message\" in chunk &&\n      \"conversation_id\" in chunk\n    );\n  }\n\n  private combineMessageChunks<T extends DocumentSchema>(\n    chunks: [...MessageChunk[], SearchResponse<T>],\n    messagesChunks: MessageChunk[],\n  ): SearchResponse<T> {\n    this.logger.debug(\n      `Found ${messagesChunks.length} message chunks to combine`,\n    );\n\n    const lastChunk = chunks[chunks.length - 1];\n    if (this.isCompleteSearchResponse(lastChunk)) {\n      return lastChunk;\n    }\n\n    const metadataChunk = chunks.find(this.isCompleteSearchResponse);\n\n    if (!metadataChunk) {\n      throw new Error(\"No metadata chunk found\");\n    }\n\n    return metadataChunk;\n  }\n\n  private isCompleteSearchResponse<T extends DocumentSchema>(\n    chunk: MessageChunk | SearchResponse<T>,\n  ): chunk is SearchResponse<T> {\n    if (\n      typeof chunk === \"object\" &&\n      chunk !== null &&\n      Object.keys(chunk as object).length > 0\n    ) {\n      return (\n        \"results\" in (chunk as object) ||\n        \"found\" in (chunk as object) ||\n        \"hits\" in (chunk as object) ||\n        \"page\" in (chunk as object) ||\n        \"search_time_ms\" in (chunk as object)\n      );\n    }\n    return false;\n  }\n\n  // Attempts to find the next healthy node, looping through the list of nodes once.\n  //   But if no healthy nodes are found, it will just return the next node, even if it's unhealthy\n  //     so we can try the request for good measure, in case that node has become healthy since\n  getNextNode(requestNumber = 0): Node {\n    // Check if nearestNode is set and is healthy, if so return it\n    if (this.nearestNode != null) {\n      this.logger.debug(\n        `Request #${requestNumber}: Nodes Health: Node ${\n          this.nearestNode.index\n        } is ${this.nearestNode.isHealthy === true ? \"Healthy\" : \"Unhealthy\"}`,\n      );\n      if (\n        this.nearestNode.isHealthy === true ||\n        this.nodeDueForHealthcheck(this.nearestNode, requestNumber)\n      ) {\n        this.logger.debug(\n          `Request #${requestNumber}: Updated current node to Node ${this.nearestNode.index}`,\n        );\n        return this.nearestNode;\n      }\n      this.logger.debug(\n        `Request #${requestNumber}: Falling back to individual nodes`,\n      );\n    }\n\n    // Fallback to nodes as usual\n    this.logger.debug(\n      `Request #${requestNumber}: Nodes Health: ${this.nodes\n        .map(\n          (node) =>\n            `Node ${node.index} is ${\n              node.isHealthy === true ? \"Healthy\" : \"Unhealthy\"\n            }`,\n        )\n        .join(\" || \")}`,\n    );\n    let candidateNode: Node = this.nodes[0];\n    for (let i = 0; i <= this.nodes.length; i++) {\n      this.currentNodeIndex = (this.currentNodeIndex + 1) % this.nodes.length;\n      candidateNode = this.nodes[this.currentNodeIndex];\n      if (\n        candidateNode.isHealthy === true ||\n        this.nodeDueForHealthcheck(candidateNode, requestNumber)\n      ) {\n        this.logger.debug(\n          `Request #${requestNumber}: Updated current node to Node ${candidateNode.index}`,\n        );\n        return candidateNode;\n      }\n    }\n\n    // None of the nodes are marked healthy, but some of them could have become healthy since last health check.\n    //  So we will just return the next node.\n    this.logger.debug(\n      `Request #${requestNumber}: No healthy nodes were found. Returning the next node, Node ${candidateNode.index}`,\n    );\n    return candidateNode;\n  }\n\n  nodeDueForHealthcheck(node, requestNumber = 0): boolean {\n    const isDueForHealthcheck =\n      Date.now() - node.lastAccessTimestamp >\n      this.healthcheckIntervalSeconds * 1000;\n    if (isDueForHealthcheck) {\n      this.logger.debug(\n        `Request #${requestNumber}: Node ${node.index} has exceeded healtcheckIntervalSeconds of ${this.healthcheckIntervalSeconds}. Adding it back into rotation.`,\n      );\n    }\n    return isDueForHealthcheck;\n  }\n\n  initializeMetadataForNodes(): void {\n    if (this.nearestNode != null) {\n      this.nearestNode.index = \"nearestNode\";\n      this.setNodeHealthcheck(this.nearestNode, HEALTHY);\n    }\n\n    this.nodes.forEach((node, i) => {\n      node.index = i;\n      this.setNodeHealthcheck(node, HEALTHY);\n    });\n  }\n\n  setNodeHealthcheck(node, isHealthy): void {\n    node.isHealthy = isHealthy;\n    node.lastAccessTimestamp = Date.now();\n  }\n\n  uriFor(endpoint: string, node): string {\n    if (node.url != null) {\n      return `${node.url}${endpoint}`;\n    }\n    return `${node.protocol}://${node.host}:${node.port}${node.path}${endpoint}`;\n  }\n\n  defaultHeaders(): any {\n    const defaultHeaders = {};\n    if (!this.sendApiKeyAsQueryParam) {\n      defaultHeaders[APIKEYHEADERNAME] = this.apiKey;\n    }\n    defaultHeaders[\"Content-Type\"] = \"application/json\";\n    return defaultHeaders;\n  }\n\n  async timer(seconds): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n  }\n\n  customErrorForResponse(\n    response: AxiosResponse,\n    messageFromServer: string,\n    httpBody?: string,\n  ): TypesenseError {\n    let errorMessage = `Request failed with HTTP code ${response.status}`;\n    if (\n      typeof messageFromServer === \"string\" &&\n      messageFromServer.trim() !== \"\"\n    ) {\n      errorMessage += ` | Server said: ${messageFromServer}`;\n    }\n\n    let error = new TypesenseError(errorMessage, httpBody, response.status);\n\n    if (response.status === 400) {\n      error = new RequestMalformed(errorMessage, httpBody, response.status);\n    } else if (response.status === 401) {\n      error = new RequestUnauthorized(errorMessage, httpBody, response.status);\n    } else if (response.status === 404) {\n      error = new ObjectNotFound(errorMessage, httpBody, response.status);\n    } else if (response.status === 409) {\n      error = new ObjectAlreadyExists(errorMessage, httpBody, response.status);\n    } else if (response.status === 422) {\n      error = new ObjectUnprocessable(errorMessage, httpBody, response.status);\n    } else if (response.status >= 500 && response.status <= 599) {\n      error = new ServerError(errorMessage, httpBody, response.status);\n    } else {\n      error = new HTTPError(errorMessage, httpBody, response.status);\n    }\n\n    return error;\n  }\n\n  private invokeOnChunkCallback<T extends DocumentSchema>(\n    data: {\n      conversation_id: string;\n      message: string;\n    },\n    streamConfig: StreamConfig<T> | undefined,\n  ): void {\n    if (streamConfig?.onChunk) {\n      try {\n        streamConfig.onChunk(data);\n      } catch (error) {\n        this.logger.warn(`Error in onChunk callback: ${error}`);\n      }\n    }\n  }\n\n  private invokeOnCompleteCallback<T extends DocumentSchema>(\n    data: SearchResponse<T>,\n    streamConfig: StreamConfig<T> | undefined,\n  ): void {\n    if (streamConfig?.onComplete) {\n      try {\n        streamConfig.onComplete(data);\n      } catch (error) {\n        this.logger.warn(`Error in onComplete callback: ${error}`);\n      }\n    }\n  }\n\n  private invokeOnErrorCallback<T extends DocumentSchema>(\n    error: unknown,\n    streamConfig: StreamConfig<T> | undefined,\n  ): void {\n    if (streamConfig?.onError) {\n      const errorObj = toErrorWithMessage(error);\n      try {\n        streamConfig.onError(errorObj);\n      } catch (callbackError) {\n        this.logger.warn(`Error in onError callback: ${callbackError}`);\n      }\n    }\n  }\n}\n","import type { AxiosRequestConfig } from \"axios\";\nimport type { BaseStreamConfig, StreamConfig } from \"./Configuration\";\nimport type {\n  DocumentSchema,\n  SearchParamsWithPreset,\n  SearchOptions,\n  SearchResponse,\n  DocumentWriteParameters,\n  DeleteQuery,\n  DeleteResponse,\n  ImportResponse,\n  DocumentsExportParameters,\n} from \"./Documents\";\n\nexport type DropTokensMode = \"right_to_left\" | \"left_to_right\" | \"both_sides:3\";\n\nexport type OperationMode = \"off\" | \"always\" | \"fallback\";\n\nexport type MessageChunk = {\n  message: string;\n  conversation_id: string;\n};\n\nexport type UnionArrayKeys<T> = {\n  [K in keyof T]: T[K] extends undefined\n    ? never\n    : NonNullable<T[K]> extends infer R\n      ? R extends R[]\n        ? never\n        : R extends (infer U)[] | infer U\n          ? U[] extends R\n            ? K\n            : never\n          : never\n      : never;\n}[keyof T] &\n  keyof T;\n\nexport type UnionArraySearchParams<T extends DocumentSchema = DocumentSchema> =\n  UnionArrayKeys<T>;\n\nexport type ArraybleParams<T extends DocumentSchema = DocumentSchema> = {\n  readonly [K in UnionArraySearchParams<T>]: string;\n};\n\nexport type ExtractBaseTypes<T> = {\n  [K in keyof T]: K extends UnionArrayKeys<T>\n    ? T[K] extends (infer U)[] | infer U\n      ? U\n      : T[K]\n    : T[K];\n};\n\nexport const arrayableParams: ArraybleParams = {\n  query_by: \"query_by\",\n  query_by_weights: \"query_by_weights\",\n  facet_by: \"facet_by\",\n  group_by: \"group_by\",\n  include_fields: \"include_fields\",\n  exclude_fields: \"exclude_fields\",\n  highlight_fields: \"highlight_fields\",\n  highlight_full_fields: \"highlight_full_fields\",\n  pinned_hits: \"pinned_hits\",\n  hidden_hits: \"hidden_hits\",\n  infix: \"infix\",\n  override_tags: \"override_tags\",\n  num_typos: \"num_typos\",\n  prefix: \"prefix\",\n  sort_by: \"sort_by\",\n};\n\nexport interface SearchParams<TDoc extends DocumentSchema = DocumentSchema> {\n  // From https://typesense.org/docs/latest/api/documents.html#arguments\n  // eslint-disable-next-line @typescript-eslint/ban-types -- Can't use `object` here, it needs to intersect with `{}`\n  q?: \"*\" | (string & {});\n  query_by?: string | string[];\n  query_by_weights?: string | number[];\n  prefix?: string | boolean | boolean[]; // default: true\n  filter_by?: string;\n  max_filter_by_candidates?: number; // default: 4\n  enable_synonyms?: boolean; // default: true\n  enable_analytics?: boolean; // default: true\n  filter_curated_hits?: boolean; // default: false\n  enable_lazy_filter?: boolean; // default: false\n  sort_by?: string | string[]; // default: text match desc\n  facet_by?: string | string[];\n  max_facet_values?: number;\n  facet_sample_threshold?: number;\n  facet_sample_percent?: number;\n  facet_query?: string;\n  facet_query_num_typos?: number;\n  facet_return_parent?: string;\n  facet_strategy?: \"exhaustive\" | \"top_values\" | \"automatic\";\n  page?: number; // default: 1\n  per_page?: number; // default: 10, max 250\n  group_by?: string | string[];\n  group_limit?: number; // default:\n  group_missing_values?: boolean;\n  include_fields?: string | string[];\n  exclude_fields?: string | string[];\n  highlight_fields?: string | string[]; // default: all queried fields\n  highlight_full_fields?: string | string[]; // default: all fields\n  highlight_affix_num_tokens?: number; // default: 4\n  highlight_start_tag?: string; // default: <mark>\n  highlight_end_tag?: string; // default: </mark>\n  enable_highlight_v1?: boolean;\n  snippet_threshold?: number; // default: 30\n  num_typos?: string | number | number[]; // default: 2\n  min_len_1typo?: number;\n  min_len_2typo?: number;\n  split_join_tokens?: OperationMode;\n  exhaustive_search?: boolean;\n  drop_tokens_threshold?: number; // default: 10\n  drop_tokens_mode?: DropTokensMode;\n  typo_tokens_threshold?: number; // default: 100\n  pinned_hits?: string | string[];\n  hidden_hits?: string | string[];\n  limit_hits?: number; // default: no limit\n  pre_segmented_query?: boolean;\n  enable_overrides?: boolean;\n  override_tags?: string | string[];\n  prioritize_exact_match?: boolean; // default: true\n  prioritize_token_position?: boolean;\n  prioritize_num_matching_fields?: boolean;\n  search_cutoff_ms?: number;\n  use_cache?: boolean;\n  max_candidates?: number;\n  infix?: OperationMode | OperationMode[];\n  preset?: string;\n  text_match_type?: \"max_score\" | \"max_weight\";\n  vector_query?: string;\n  \"x-typesense-api-key\"?: string;\n  \"x-typesense-user-id\"?: string;\n  offset?: number;\n  limit?: number;\n  stopwords?: string;\n  conversation?: boolean;\n  conversation_stream?: boolean;\n  conversation_model_id?: string;\n  conversation_id?: string;\n  voice_query?: string;\n  streamConfig?: StreamConfig<TDoc>;\n}\n\nexport interface SearchResponseRequestParams {\n  collection_name?: string;\n  q?: string;\n  page?: number;\n  per_page?: number;\n  first_q?: string;\n  voice_query?: {\n    transcribed_query?: string;\n  };\n}\n\nexport interface SearchableDocuments<\n  T extends DocumentSchema = DocumentSchema,\n> {\n  search(\n    searchParameters: SearchParams<T> | SearchParamsWithPreset<T>,\n    options: SearchOptions,\n  ): Promise<SearchResponse<T>>;\n  clearCache(): void;\n}\n\nexport interface WriteableDocuments<T> {\n  create(document: T, options: DocumentWriteParameters): Promise<T>;\n  upsert(document: T, options: DocumentWriteParameters): Promise<T>;\n  update(document: T, options: DocumentWriteParameters): Promise<T>;\n  delete(query: DeleteQuery): Promise<DeleteResponse>;\n  import(\n    documents: T[] | string,\n    options: DocumentWriteParameters,\n  ): Promise<string | ImportResponse[]>;\n  export(options: DocumentsExportParameters): Promise<string>;\n}\n\nexport interface MultiSearchUnionStreamConfig<T extends DocumentSchema>\n  extends BaseStreamConfig {\n  onComplete?: (data: UnionSearchResponse<T>) => void;\n}\n\nexport interface MultiSearchResultsStreamConfig<T extends DocumentSchema[]>\n  extends BaseStreamConfig {\n  onComplete?: (data: {\n    results: { [Index in keyof T]: SearchResponse<T[Index]> } & {\n      length: T[\"length\"];\n    };\n  }) => void;\n}\nexport interface RequestParams<T extends DocumentSchema[]> {\n  path: string;\n  queryParams?: Record<string, unknown>;\n  body?: unknown;\n  headers?: Record<string, string>;\n  streamConfig?:\n    | StreamConfig<T[number]>\n    | MultiSearchResultsStreamConfig<T>\n    | MultiSearchUnionStreamConfig<T[number]>;\n  abortSignal?: AbortSignal | null;\n  responseType?: AxiosRequestConfig[\"responseType\"] | undefined;\n  isStreamingRequest: boolean | undefined;\n}\n\nexport interface MultiSearchRequestsWithUnionSchema<T extends DocumentSchema>\n  extends SearchesMultiSearchesRequestSchema<T> {\n  union: true;\n}\n\nexport interface MultiSearchRequestsWithoutUnionSchema<T extends DocumentSchema>\n  extends SearchesMultiSearchesRequestSchema<T> {\n  union?: false | undefined;\n}\n\nexport type MultiSearchRequestsSchema<T extends DocumentSchema> =\n  | MultiSearchRequestsWithUnionSchema<T>\n  | MultiSearchRequestsWithoutUnionSchema<T>;\n\nexport interface UnionSearchResponse<T extends DocumentSchema>\n  extends Omit<SearchResponse<T>, \"request_params\"> {\n  union_request_params: SearchResponseRequestParams[];\n}\n\nexport type MultiSearchResponse<\n  T extends DocumentSchema[],\n  R extends MultiSearchRequestsSchema<T[number]> = MultiSearchRequestsSchema<\n    T[number]\n  >,\n> =\n  R extends MultiSearchRequestsWithUnionSchema<T[number]>\n    ? UnionSearchResponse<T[number]>\n    : {\n        results: { [Index in keyof T]: SearchResponse<T[Index]> } & {\n          length: T[\"length\"];\n        };\n      };\n\nexport interface MultiSearchUnionStreamConfig<T extends DocumentSchema>\n  extends BaseStreamConfig {\n  onComplete?: (data: UnionSearchResponse<T>) => void;\n}\n\nexport interface MultiSearchResultsStreamConfig<T extends DocumentSchema[]>\n  extends BaseStreamConfig {\n  onComplete?: (data: {\n    results: { [Index in keyof T]: SearchResponse<T[Index]> } & {\n      length: T[\"length\"];\n    };\n  }) => void;\n}\n\ninterface SearchesMultiSearchesRequestSchema<T extends DocumentSchema> {\n  searches: (\n    | MultiSearchRequestSchema<T>\n    | MultiSearchRequestWithPresetSchema<T>\n  )[];\n}\n\ninterface BaseMultiSearchRequestSchema {\n  collection?: string;\n  rerank_hybrid_matches?: boolean;\n  \"x-typesense-api-key\"?: string;\n}\n\ntype CommonMultiSearchParametersBase<T extends DocumentSchema> = Partial<\n  BaseMultiSearchRequestSchema & Omit<SearchParams<T>, \"streamConfig\">\n>;\n\nexport type MultiSearchRequestSchema<T extends DocumentSchema> =\n  BaseMultiSearchRequestSchema & Omit<SearchParams<T>, \"streamConfig\">;\n\nexport type MultiSearchRequestWithPresetSchema<T extends DocumentSchema> =\n  BaseMultiSearchRequestSchema &\n    Omit<SearchParamsWithPreset<T>, \"streamConfig\">;\n\nexport type MultiSearchUnionParameters<T extends DocumentSchema> =\n  CommonMultiSearchParametersBase<T> & {\n    streamConfig?: MultiSearchUnionStreamConfig<T>;\n    use_cache?: boolean;\n  };\n\nexport type MultiSearchResultsParameters<T extends DocumentSchema[]> =\n  CommonMultiSearchParametersBase<T[number]> & {\n    streamConfig?: MultiSearchResultsStreamConfig<T>;\n    use_cache?: boolean;\n  };\n","import { DocumentSchema } from \"./Documents\";\nimport { arrayableParams } from \"./Types\";\nimport type { UnionArrayKeys, ExtractBaseTypes, SearchParams } from \"./Types\";\n\nfunction hasNoArrayValues<\n  TDoc extends DocumentSchema,\n  T extends SearchParams<TDoc>,\n>(params: T | ExtractBaseTypes<T>): params is ExtractBaseTypes<T> {\n  return Object.keys(arrayableParams)\n    .filter((key) => params[key] !== undefined)\n    .every((key) => isNonArrayValue(params[key]));\n}\n\nexport function normalizeArrayableParams<\n  TDoc extends DocumentSchema,\n  T extends SearchParams<TDoc>,\n>(params: T): Prettify<ExtractBaseTypes<T>> {\n  const result = { ...params };\n\n  const transformedValues = Object.keys(arrayableParams)\n    .filter((key) => Array.isArray(result[key]))\n    .map((key) => {\n      result[key] = result[key].join(\",\");\n      return key;\n    });\n\n  if (!transformedValues.length && hasNoArrayValues<TDoc, T>(result)) {\n    return result;\n  }\n\n  if (!hasNoArrayValues<TDoc, T>(result)) {\n    throw new Error(\n      `Failed to normalize arrayable params: ${JSON.stringify(result)}`,\n    );\n  }\n\n  return result;\n}\n\nfunction isNonArrayValue<\n  TDoc extends DocumentSchema,\n  T extends SearchParams<TDoc>,\n  K extends UnionArrayKeys<T>,\n>(value: T[K] | ExtractBaseTypes<T>[K]): value is ExtractBaseTypes<T>[K] {\n  return !Array.isArray(value);\n}\n\ntype Prettify<T> = {\n  [K in keyof T]: T[K];\n  // eslint-disable-next-line @typescript-eslint/ban-types\n} & {};\n\ninterface ErrorWithMessage extends Error {\n  message: string;\n}\n\nfunction isErrorWithMessage(error: unknown): error is ErrorWithMessage {\n  return (\n    typeof error === \"object\" &&\n    error !== null &&\n    \"message\" in error &&\n    typeof (error as Record<string, unknown>).message === \"string\"\n  );\n}\n\nexport function toErrorWithMessage(couldBeError: unknown): ErrorWithMessage {\n  if (isErrorWithMessage(couldBeError)) return couldBeError;\n\n  try {\n    if (typeof couldBeError === \"string\") {\n      return new Error(couldBeError);\n    }\n    return new Error(JSON.stringify(couldBeError));\n  } catch {\n    return new Error(String(couldBeError));\n  }\n}\n","import { AxiosRequestConfig } from \"axios\";\nimport type { DocumentSchema } from \"./Documents\";\nimport { HttpClient } from \"./ApiCall\";\nimport type { RequestParams } from \"./Types\";\n\nconst defaultCacheResponseForSeconds = 2 * 60;\nconst defaultMaxSize = 100;\n\ninterface CacheEntry<T> {\n  requestTimestamp: number;\n  response: T;\n}\n\ninterface PromiseCacheEntry<T> {\n  requestTimestamp: number;\n  responsePromise: Promise<T>;\n}\n\nexport default class RequestWithCache {\n  private responseCache: Map<string, CacheEntry<unknown>> = new Map();\n  private responsePromiseCache: Map<string, PromiseCacheEntry<unknown>> =\n    new Map();\n\n  clearCache() {\n    this.responseCache = new Map();\n    this.responsePromiseCache = new Map();\n  }\n\n  async perform<\n    const TContext extends HttpClient,\n    const TMethod extends keyof HttpClient,\n    const TDoc extends DocumentSchema[],\n    TResult,\n  >(\n    requestContext: TContext,\n    methodName: TMethod,\n    requestParams: RequestParams<TDoc>,\n    cacheOptions: CacheOptions,\n  ): Promise<TResult> {\n    const {\n      cacheResponseForSeconds = defaultCacheResponseForSeconds,\n      maxSize = defaultMaxSize,\n    } = cacheOptions;\n    const isCacheDisabled = cacheResponseForSeconds <= 0 || maxSize <= 0;\n\n    const {\n      path,\n      queryParams,\n      body,\n      headers,\n      streamConfig,\n      abortSignal,\n      responseType,\n      isStreamingRequest,\n    } = requestParams;\n\n    if (isCacheDisabled) {\n      return this.executeRequest<TResult>(\n        requestContext,\n        methodName,\n        path,\n        queryParams,\n        body,\n        headers,\n        { abortSignal, responseType, streamConfig, isStreamingRequest },\n      );\n    }\n\n    const requestParamsJSON = JSON.stringify(requestParams);\n    const cacheEntry = this.responseCache.get(requestParamsJSON);\n    const now = Date.now();\n\n    if (cacheEntry) {\n      const isEntryValid =\n        now - cacheEntry.requestTimestamp < cacheResponseForSeconds * 1000;\n      if (isEntryValid) {\n        this.responseCache.delete(requestParamsJSON);\n        this.responseCache.set(requestParamsJSON, cacheEntry);\n        return cacheEntry.response as TResult;\n      } else {\n        this.responseCache.delete(requestParamsJSON);\n      }\n    }\n\n    const cachePromiseEntry = this.responsePromiseCache.get(requestParamsJSON);\n\n    if (cachePromiseEntry) {\n      const isEntryValid =\n        now - cachePromiseEntry.requestTimestamp <\n        cacheResponseForSeconds * 1000;\n      if (isEntryValid) {\n        this.responsePromiseCache.delete(requestParamsJSON);\n        this.responsePromiseCache.set(requestParamsJSON, cachePromiseEntry);\n        return cachePromiseEntry.responsePromise as Promise<TResult>;\n      } else {\n        this.responsePromiseCache.delete(requestParamsJSON);\n      }\n    }\n\n    const responsePromise = this.executeRequest<TResult>(\n      requestContext,\n      methodName,\n      path,\n      queryParams,\n      body,\n      headers,\n      { abortSignal, responseType, streamConfig, isStreamingRequest },\n    );\n\n    this.responsePromiseCache.set(requestParamsJSON, {\n      requestTimestamp: now,\n      responsePromise,\n    });\n\n    const response = await responsePromise;\n    this.responseCache.set(requestParamsJSON, {\n      requestTimestamp: now,\n      response: response,\n    });\n\n    const isCacheOverMaxSize = this.responseCache.size > maxSize;\n    if (isCacheOverMaxSize) {\n      const oldestEntry = this.responseCache.keys().next().value;\n      if (oldestEntry) {\n        this.responseCache.delete(oldestEntry);\n      }\n    }\n    const isResponsePromiseCacheOverMaxSize =\n      this.responsePromiseCache.size > maxSize;\n    if (isResponsePromiseCacheOverMaxSize) {\n      const oldestEntry = this.responsePromiseCache.keys().next().value;\n      if (oldestEntry) {\n        this.responsePromiseCache.delete(oldestEntry);\n      }\n    }\n    return response;\n  }\n\n  private executeRequest<TResult>(\n    context: HttpClient,\n    methodName: keyof HttpClient,\n    path: string,\n    queryParams: Record<string, unknown> = {},\n    body?: unknown,\n    headers?: Record<string, string>,\n    options?: {\n      abortSignal?: AbortSignal | null;\n      responseType?: AxiosRequestConfig[\"responseType\"];\n      streamConfig?: any;\n      isStreamingRequest: boolean | undefined;\n    },\n  ): Promise<TResult> {\n    const method = context[methodName];\n\n    switch (methodName) {\n      case \"get\":\n        return (method as HttpClient[\"get\"]).call(context, path, queryParams, {\n          abortSignal: options?.abortSignal,\n          responseType: options?.responseType,\n          streamConfig: options?.streamConfig,\n          isStreamingRequest: options?.isStreamingRequest,\n        }) as Promise<TResult>;\n\n      case \"delete\":\n        return (method as HttpClient[\"delete\"]).call(\n          context,\n          path,\n          queryParams,\n        ) as Promise<TResult>;\n\n      case \"post\":\n        return (method as HttpClient[\"post\"]).call(\n          context,\n          path,\n          body,\n          queryParams,\n          headers || {},\n          {\n            abortSignal: options?.abortSignal,\n            responseType: options?.responseType,\n            streamConfig: options?.streamConfig,\n            isStreamingRequest: options?.isStreamingRequest,\n          },\n        ) as Promise<TResult>;\n\n      case \"put\":\n      case \"patch\":\n        return (method as HttpClient[typeof methodName]).call(\n          context,\n          path,\n          body,\n          queryParams,\n        ) as Promise<TResult>;\n\n      default:\n        throw new Error(`Unsupported method: ${String(methodName)}`);\n    }\n  }\n}\n\ninterface CacheOptions {\n  cacheResponseForSeconds?: number;\n  maxSize?: number;\n}\n\nexport type { RequestParams } from \"./Types\";\n","import ApiCall from \"./ApiCall\";\nimport Configuration from \"./Configuration\";\nimport RequestWithCache from \"./RequestWithCache\";\nimport {\n  DocumentSchema,\n  ExtractBaseTypes,\n  SearchParams,\n  SearchResponse,\n} from \"./Documents\";\nimport { normalizeArrayableParams } from \"./Utils\";\nimport type {\n  MultiSearchRequestsSchema,\n  MultiSearchRequestsWithUnionSchema,\n  MultiSearchResponse,\n  MultiSearchUnionParameters,\n  MultiSearchResultsParameters,\n  UnionSearchResponse,\n  MultiSearchRequestsWithoutUnionSchema,\n} from \"./Types\";\n\nconst RESOURCEPATH = \"/multi_search\";\n\nexport default class MultiSearch {\n  private requestWithCache: RequestWithCache;\n\n  constructor(\n    private apiCall: ApiCall,\n    private configuration: Configuration,\n    private useTextContentType: boolean = false,\n  ) {\n    this.requestWithCache = new RequestWithCache();\n  }\n\n  clearCache() {\n    this.requestWithCache.clearCache();\n  }\n\n  async perform<const T extends DocumentSchema[] = []>(\n    searchRequests: MultiSearchRequestsWithUnionSchema<T[number]>,\n    commonParams?: MultiSearchUnionParameters<T[number]>,\n    options?: { cacheSearchResultsForSeconds?: number },\n  ): Promise<UnionSearchResponse<T[number]>>;\n\n  async perform<const T extends DocumentSchema[] = []>(\n    searchRequests: MultiSearchRequestsWithoutUnionSchema<T[number]>,\n    commonParams?: MultiSearchResultsParameters<T>,\n    options?: { cacheSearchResultsForSeconds?: number },\n  ): Promise<{\n    results: { [Index in keyof T]: SearchResponse<T[Index]> } & {\n      length: T[\"length\"];\n    };\n  }>;\n\n  async perform<const T extends DocumentSchema[] = []>(\n    searchRequests: MultiSearchRequestsSchema<T[number]>,\n    commonParams?:\n      | MultiSearchUnionParameters<T[number]>\n      | MultiSearchResultsParameters<T>,\n    {\n      cacheSearchResultsForSeconds = this.configuration\n        .cacheSearchResultsForSeconds,\n    }: { cacheSearchResultsForSeconds?: number } = {},\n  ): Promise<MultiSearchResponse<T>> {\n    const params = commonParams ? { ...commonParams } : {};\n\n    if (this.configuration.useServerSideSearchCache === true) {\n      params.use_cache = true;\n    }\n\n    const normalizedSearchRequests: Omit<typeof searchRequests, \"searches\"> & {\n      searches: ExtractBaseTypes<SearchParams<T[number]>>[];\n    } = {\n      union: searchRequests.union,\n      searches: searchRequests.searches.map(normalizeArrayableParams),\n    };\n\n    const { streamConfig, ...paramsWithoutStream } = params;\n    const normalizedQueryParams = normalizeArrayableParams(\n      paramsWithoutStream as SearchParams<T[number]>,\n    );\n\n    return this.requestWithCache.perform(\n      this.apiCall,\n      \"post\",\n      {\n        path: RESOURCEPATH,\n        body: normalizedSearchRequests,\n        queryParams: normalizedQueryParams,\n        headers: this.useTextContentType\n          ? { \"content-type\": \"text/plain\" }\n          : {},\n        streamConfig,\n        isStreamingRequest: this.isStreamingRequest(params),\n      },\n      { cacheResponseForSeconds: cacheSearchResultsForSeconds },\n    );\n  }\n\n  private isStreamingRequest(commonParams: { streamConfig?: unknown }) {\n    return commonParams.streamConfig !== undefined;\n  }\n}\n\nexport type {\n  MultiSearchRequestsSchema,\n  MultiSearchRequestsWithUnionSchema,\n  MultiSearchResponse,\n  MultiSearchUnionParameters,\n  MultiSearchResultsParameters,\n  UnionSearchResponse,\n  MultiSearchRequestsWithoutUnionSchema,\n} from \"./Types\";\n","import ApiCall from \"./ApiCall\";\nimport type { CollectionFieldSchema, CollectionSchema } from \"./Collection\";\n\nexport interface BaseCollectionCreateSchema {\n  name: string;\n  default_sorting_field?: string;\n  symbols_to_index?: string[];\n  token_separators?: string[];\n  enable_nested_fields?: boolean;\n  metadata?: object;\n  voice_query_model?: {\n    model_name?: string;\n  };\n}\n\ninterface CollectionCreateSchemaWithSrc\n  extends Pick<BaseCollectionCreateSchema, \"name\"> {\n  fields?: CollectionFieldSchema[];\n}\n\ninterface CollectionCreateSchemaWithoutSrc extends BaseCollectionCreateSchema {\n  fields: CollectionFieldSchema[];\n}\n\n/**\n * Defines the schema for creating a collection in Typesense.\n *\n * If the `src_name` property in `Options` is a string, the `fields` prop is optional, and only used for embedding fields.\n * Otherwise, `fields` will be required.\n */\nexport type CollectionCreateSchema<\n  Options extends CollectionCreateOptions = CollectionCreateOptions,\n> = Options[\"src_name\"] extends string\n  ? CollectionCreateSchemaWithSrc\n  : CollectionCreateSchemaWithoutSrc;\n\nexport interface CollectionCreateOptions {\n  src_name?: string;\n}\n\nexport interface CollectionsRetrieveOptions {\n  exclude_fields?: string;\n}\n\nconst RESOURCEPATH = \"/collections\";\n\nexport default class Collections {\n  constructor(private apiCall: ApiCall) {}\n\n  async create<const Options extends CollectionCreateOptions>(\n    schema: CollectionCreateSchema<Options>,\n    options?: Options,\n  ): Promise<CollectionSchema> {\n    return this.apiCall.post<CollectionSchema>(RESOURCEPATH, schema, options);\n  }\n\n  async retrieve(\n    options: CollectionsRetrieveOptions = {},\n  ): Promise<CollectionSchema[]> {\n    return this.apiCall.get<CollectionSchema[]>(RESOURCEPATH, options);\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import RequestWithCache from \"./RequestWithCache\";\nimport ApiCall from \"./ApiCall\";\nimport Configuration from \"./Configuration\";\nimport Collections from \"./Collections\";\nimport type {\n  DocumentSchema,\n  SearchOptions,\n  SearchParamsWithPreset,\n  SearchResponse,\n} from \"./Documents\";\nimport { normalizeArrayableParams } from \"./Utils\";\nimport { SearchableDocuments, SearchParams } from \"./Types\";\n\nconst RESOURCEPATH = \"/documents\";\n\nexport class SearchOnlyDocuments<T extends DocumentSchema>\n  implements SearchableDocuments<T>\n{\n  protected requestWithCache: RequestWithCache = new RequestWithCache();\n\n  constructor(\n    protected collectionName: string,\n    protected apiCall: ApiCall,\n    protected configuration: Configuration,\n  ) {}\n\n  clearCache() {\n    this.requestWithCache.clearCache();\n  }\n\n  async search(\n    searchParameters: SearchParams<T> | SearchParamsWithPreset<T>,\n    {\n      cacheSearchResultsForSeconds = this.configuration\n        .cacheSearchResultsForSeconds,\n      abortSignal = null,\n    }: SearchOptions = {},\n  ): Promise<SearchResponse<T>> {\n    const additionalQueryParams = {};\n    if (this.configuration.useServerSideSearchCache === true) {\n      additionalQueryParams[\"use_cache\"] = true;\n    }\n\n    const { streamConfig, ...rest } = normalizeArrayableParams<\n      T,\n      SearchParams<T>\n    >(searchParameters);\n\n    const queryParams = {\n      ...additionalQueryParams,\n      ...rest,\n    };\n\n    const isStreamingRequest = queryParams.conversation_stream === true;\n\n    return this.requestWithCache.perform<\n      ApiCall,\n      \"get\",\n      [T],\n      SearchResponse<T>\n    >(\n      this.apiCall,\n      \"get\",\n      {\n        path: this.endpointPath(\"search\"),\n        queryParams,\n        streamConfig,\n        abortSignal,\n        isStreamingRequest,\n      },\n      {\n        cacheResponseForSeconds: cacheSearchResultsForSeconds,\n      },\n    );\n  }\n\n  protected endpointPath(operation?: string) {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.collectionName)}${RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + operation\n    }`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import type { DocumentSchema } from \"./Documents\";\nimport ApiCall from \"./ApiCall\";\nimport { SearchOnlyDocuments } from \"./SearchOnlyDocuments\";\nimport type { SearchableDocuments } from \"./Types\";\n\nexport class SearchOnlyCollection<T extends DocumentSchema> {\n  private readonly _documents: SearchableDocuments<T>;\n\n  constructor(\n    private readonly name: string,\n    private readonly apiCall: ApiCall,\n    private readonly configuration: any\n  ) {\n    this._documents = new SearchOnlyDocuments(\n      this.name,\n      this.apiCall,\n      this.configuration\n    );\n  }\n\n  documents(): SearchableDocuments<T> {\n    return this._documents;\n  }\n}\n","import Configuration, { ConfigurationOptions } from \"./Configuration\";\nimport ApiCall from \"./ApiCall\";\nimport MultiSearch from \"./MultiSearch\";\nimport { DocumentSchema } from \"./Documents\";\nimport { SearchOnlyCollection } from \"./SearchOnlyCollection\";\n\nexport default class SearchClient {\n  public readonly multiSearch: MultiSearch;\n  private readonly configuration: Configuration;\n  private readonly apiCall: ApiCall;\n  private readonly individualCollections: Record<\n    string,\n    SearchOnlyCollection<DocumentSchema>\n  >;\n\n  constructor(options: ConfigurationOptions) {\n    options.sendApiKeyAsQueryParam = options.sendApiKeyAsQueryParam ?? true;\n    if (\n      options.sendApiKeyAsQueryParam === true &&\n      (options.apiKey || \"\").length > 2000\n    ) {\n      console.warn(\n        \"[typesense] API Key is longer than 2000 characters which is over the allowed limit, so disabling sending it as a query parameter.\"\n      );\n      options.sendApiKeyAsQueryParam = false;\n    }\n\n    this.configuration = new Configuration(options);\n    this.apiCall = new ApiCall(this.configuration);\n    this.multiSearch = new MultiSearch(this.apiCall, this.configuration, true);\n    this.individualCollections = {};\n  }\n\n  clearCache() {\n    this.multiSearch.clearCache();\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Object.entries(this.individualCollections).forEach(([_, collection]) => {\n      collection.documents().clearCache();\n    });\n  }\n\n  collections<TDocumentSchema extends DocumentSchema>(\n    collectionName: string,\n  ):\n    | SearchOnlyCollection<TDocumentSchema>\n    | SearchOnlyCollection<TDocumentSchema> {\n    if (!collectionName) {\n      throw new Error(\n        \"Typesense.SearchClient only supports search operations, so the collectionName that needs to \" +\n          \"be searched must be specified. Use Typesense.Client if you need to access the collection object.\"\n      );\n    } else {\n      if (this.individualCollections[collectionName] === undefined) {\n        this.individualCollections[collectionName] = new SearchOnlyCollection(\n          collectionName,\n          this.apiCall,\n          this.configuration\n        );\n      }\n      return this.individualCollections[\n        collectionName\n      ] as SearchOnlyCollection<TDocumentSchema>;\n    }\n  }\n}\n","import type { ReadStream } from \"fs\";\nimport ApiCall from \"./ApiCall\";\nimport Configuration from \"./Configuration\";\nimport { ImportError, RequestMalformed } from \"./Errors\";\nimport { SearchOnlyDocuments } from \"./SearchOnlyDocuments\";\nimport {\n  SearchParams,\n  SearchResponseRequestParams,\n  WriteableDocuments,\n} from \"./Types\";\n\n// Todo: use generic to extract filter_by values\nexport type DeleteQuery =\n  | {\n      truncate?: true;\n    }\n  | {\n      truncate?: never;\n      filter_by?: string;\n      batch_size?: number;\n      ignore_not_found?: boolean;\n    };\n\nexport interface DeleteResponse {\n  num_deleted: number;\n}\n\ninterface ImportResponseSuccess {\n  success: true;\n}\n\nexport interface ImportResponseFail {\n  success: false;\n  error: string;\n  document: DocumentSchema;\n  code: number;\n}\n\nexport type ImportResponse = ImportResponseSuccess | ImportResponseFail;\n\nexport type DocumentSchema = Record<string, any>;\n\nexport interface SearchParamsWithPreset<T extends DocumentSchema>\n  extends Partial<SearchParams<T>> {\n  preset: string;\n}\n\ntype SearchResponseHighlightObject = {\n  matched_tokens?: string[];\n  snippet?: string;\n  value?: string;\n};\n\nexport type SearchResponseHighlight<T> = T extends string | number\n  ? SearchResponseHighlightObject\n  : {\n      [TAttribute in keyof T]?: SearchResponseHighlight<T[TAttribute]>;\n    };\n\nexport interface SearchResponseHit<T extends DocumentSchema> {\n  curated?: true;\n  highlights?: [\n    {\n      field: keyof T;\n      snippet?: string;\n      value?: string;\n      snippets?: string[];\n      indices?: number[];\n      matched_tokens: string[][] | string[];\n    },\n  ];\n  highlight: SearchResponseHighlight<T>;\n  document: T;\n  text_match: number;\n  text_match_info?: {\n    best_field_score: `${number}`; // To prevent scores from being truncated by JSON spec\n    best_field_weight: number;\n    fields_matched: number;\n    score: `${number}`; // To prevent scores from being truncated by JSON spec\n    tokens_matched: number;\n  };\n}\n\nexport interface SearchResponseFacetCountSchema<T extends DocumentSchema> {\n  counts: {\n    count: number;\n    highlighted: string;\n    value: string;\n    parent?: Record<string, string | number | boolean>;\n  }[];\n  field_name: keyof T;\n  stats: {\n    avg?: number;\n    max?: number;\n    min?: number;\n    sum?: number;\n  };\n}\n\n// Todo: we could infer whether this is a grouped response by adding the search params as a generic\nexport interface SearchResponse<T extends DocumentSchema> {\n  facet_counts?: SearchResponseFacetCountSchema<T>[];\n  found: number;\n  found_docs?: number;\n  out_of: number;\n  page: number;\n  request_params: SearchResponseRequestParams;\n  search_time_ms: number;\n  search_cutoff?: boolean;\n  hits?: SearchResponseHit<T>[];\n  grouped_hits?: {\n    group_key: string[];\n    hits: SearchResponseHit<T>[];\n    found?: number;\n  }[];\n  conversation?: {\n    answer: string;\n    conversation_history: {\n      conversation: object[];\n      id: string;\n      last_updated: number;\n      ttl: number;\n    };\n    conversation_id: string;\n    query: string;\n  };\n  error?: string;\n  code?: number;\n}\n\nexport interface DocumentWriteParameters {\n  dirty_values?: \"coerce_or_reject\" | \"coerce_or_drop\" | \"drop\" | \"reject\";\n  action?: \"create\" | \"update\" | \"upsert\" | \"emplace\";\n}\n\nexport interface UpdateByFilterParameters {\n  filter_by?: string;\n}\n\nexport interface UpdateByFilterResponse {\n  num_updated: number;\n}\n\nexport interface DocumentImportParameters extends DocumentWriteParameters {\n  batch_size?: number;\n  remote_embedding_batch_size?: number;\n  remote_embedding_timeout_ms?: number;\n  remote_embedding_num_tries?: number;\n  return_doc?: boolean;\n  return_id?: boolean;\n}\n\nexport interface DocumentsExportParameters {\n  filter_by?: string;\n  include_fields?: string;\n  exclude_fields?: string;\n}\n\nexport interface SearchOptions {\n  cacheSearchResultsForSeconds?: number;\n  abortSignal?: AbortSignal | null;\n}\n\nconst isNodeJSEnvironment =\n  typeof process !== \"undefined\" &&\n  process.versions != null &&\n  process.versions.node != null;\n\nexport default class Documents<T extends DocumentSchema = object>\n  extends SearchOnlyDocuments<T>\n  implements WriteableDocuments<T>\n{\n  constructor(\n    collectionName: string,\n    apiCall: ApiCall,\n    configuration: Configuration,\n  ) {\n    super(collectionName, apiCall, configuration);\n  }\n\n  async create(document: T, options: DocumentWriteParameters = {}): Promise<T> {\n    if (!document) throw new Error(\"No document provided\");\n    return this.apiCall.post<T>(this.endpointPath(), document, options);\n  }\n\n  async upsert(document: T, options: DocumentWriteParameters = {}): Promise<T> {\n    if (!document) throw new Error(\"No document provided\");\n    return this.apiCall.post<T>(\n      this.endpointPath(),\n      document,\n      Object.assign({}, options, { action: \"upsert\" }),\n    );\n  }\n\n  async update(\n    document: T,\n    options: UpdateByFilterParameters,\n  ): Promise<UpdateByFilterResponse>;\n  async update(document: T, options: DocumentWriteParameters): Promise<T>;\n  async update(\n    document: T,\n    options: DocumentWriteParameters | UpdateByFilterParameters = {},\n  ): Promise<UpdateByFilterResponse | T> {\n    if (!document) throw new Error(\"No document provided\");\n\n    if (options[\"filter_by\"] != null) {\n      return this.apiCall.patch<T>(\n        this.endpointPath(),\n        document,\n        Object.assign({}, options),\n      );\n    } else {\n      return this.apiCall.post<T>(\n        this.endpointPath(),\n        document,\n        Object.assign({}, options, { action: \"update\" }),\n      );\n    }\n  }\n\n  async delete(\n    query: DeleteQuery = {} as DeleteQuery,\n  ): Promise<DeleteResponse> {\n    return this.apiCall.delete<DeleteResponse>(this.endpointPath(), query);\n  }\n\n  async createMany(documents: T[], options: DocumentImportParameters = {}) {\n    this.configuration.logger.warn(\n      \"createMany is deprecated and will be removed in a future version. Use import instead, which now takes both an array of documents or a JSONL string of documents\",\n    );\n    return this.import(documents, options);\n  }\n\n  /**\n   * Import a set of documents in a batch.\n   * @param {string|Array} documents - Can be a JSONL string of documents or an array of document objects.\n   * @param options\n   * @return {string|Array} Returns a JSONL string if the input was a JSONL string, otherwise it returns an array of results.\n   */\n  async import(\n    documents: string,\n    options?: DocumentImportParameters,\n  ): Promise<string>;\n  async import(\n    documents: T[],\n    options?: DocumentImportParameters,\n  ): Promise<ImportResponse[]>;\n  async import(\n    documents: T[] | string,\n    options: DocumentImportParameters = {},\n  ): Promise<string | ImportResponse[]> {\n    let documentsInJSONLFormat;\n    if (Array.isArray(documents)) {\n      if (documents.length === 0) {\n        throw new RequestMalformed(\"No documents provided\");\n      }\n      try {\n        documentsInJSONLFormat = documents\n          .map((document) => JSON.stringify(document))\n          .join(\"\\n\");\n      } catch (error: any) {\n        // if rangeerror, throw custom error message\n        if (\n          error instanceof RangeError &&\n          error.message.includes(\"Too many properties to enumerate\")\n        ) {\n          throw new Error(`${error}\n          It looks like you have reached a Node.js limit that restricts the number of keys in an Object: https://stackoverflow.com/questions/9282869/are-there-limits-to-the-number-of-properties-in-a-javascript-object\n\n         Please try reducing the number of keys in your document, or using CURL to import your data.\n          `);\n        }\n\n        // else, throw the non-range error anyways\n        throw new Error(error);\n      }\n    } else {\n      documentsInJSONLFormat = documents;\n      if (isEmptyString(documentsInJSONLFormat)) {\n        throw new RequestMalformed(\"No documents provided\");\n      }\n    }\n\n    const resultsInJSONLFormat = await this.apiCall.performRequest<string>(\n      \"post\",\n      this.endpointPath(\"import\"),\n      {\n        queryParameters: options,\n        bodyParameters: documentsInJSONLFormat,\n        additionalHeaders: { \"Content-Type\": \"text/plain\" },\n        skipConnectionTimeout: true, // We never want to client-side-timeout on an import and retry, since imports are syncronous and we want to let them take as long as it takes to complete fully\n        enableKeepAlive: isNodeJSEnvironment ? true : false, // This is to prevent ECONNRESET socket hang up errors. Reference: https://github.com/axios/axios/issues/2936#issuecomment-779439991\n      },\n    );\n\n    if (Array.isArray(documents)) {\n      const resultsInJSONFormat = resultsInJSONLFormat\n        .split(\"\\n\")\n        .map((r) => JSON.parse(r)) as ImportResponse[];\n      const failedItems = resultsInJSONFormat.filter(\n        (r) => r.success === false,\n      );\n      if (failedItems.length > 0) {\n        throw new ImportError(\n          `${\n            resultsInJSONFormat.length - failedItems.length\n          } documents imported successfully, ${\n            failedItems.length\n          } documents failed during import. Use \\`error.importResults\\` from the raised exception to get a detailed error reason for each document.`,\n          resultsInJSONFormat,\n          {\n            documentsInJSONLFormat,\n            options,\n            failedItems,\n            successCount: resultsInJSONFormat.length - failedItems.length,\n          },\n        );\n      } else {\n        return resultsInJSONFormat;\n      }\n    } else {\n      return resultsInJSONLFormat as string;\n    }\n  }\n  /**\n   * Imports documents from a NodeJS readable stream of JSONL.\n   */\n  async importStream(\n    readableStream: ReadStream,\n    options: DocumentImportParameters = {},\n  ): Promise<ImportResponse[]> {\n    const resultsInJSONLFormat = await this.apiCall.performRequest<string>(\n      \"post\",\n      this.endpointPath(\"import\"),\n      {\n        queryParameters: options,\n        bodyParameters: readableStream,\n        additionalHeaders: { \"Content-Type\": \"text/plain\" },\n        skipConnectionTimeout: true, // We never want to client-side-timeout on an import and retry, since imports are syncronous and we want to let them take as long as it takes to complete fully\n        enableKeepAlive: isNodeJSEnvironment ? true : false, // This is to prevent ECONNRESET socket hang up errors. Reference: https://github.com/axios/axios/issues/2936#issuecomment-779439991\n      },\n    );\n\n    const resultsInJSONFormat = resultsInJSONLFormat\n      .split(\"\\n\")\n      .map((r) => JSON.parse(r)) as ImportResponse[];\n    const failedItems = resultsInJSONFormat.filter((r) => r.success === false);\n    if (failedItems.length > 0) {\n      throw new ImportError(\n        `${\n          resultsInJSONFormat.length - failedItems.length\n        } documents imported successfully, ${\n          failedItems.length\n        } documents failed during import. Use \\`error.importResults\\` from the raised exception to get a detailed error reason for each document.`,\n        resultsInJSONFormat,\n        {\n          documentsInJSONLFormat: readableStream,\n          options,\n          failedItems,\n          successCount: resultsInJSONFormat.length - failedItems.length,\n        },\n      );\n    } else {\n      return resultsInJSONFormat;\n    }\n  }\n\n  /**\n   * Returns a JSONL string for all the documents in this collection\n   */\n  async export(options: DocumentsExportParameters = {}): Promise<string> {\n    return this.apiCall.get<string>(this.endpointPath(\"export\"), options);\n  }\n\n  /**\n   * Returns a NodeJS readable stream of JSONL for all the documents in this collection.\n   */\n  async exportStream(\n    options: DocumentsExportParameters = {},\n  ): Promise<ReadStream> {\n    return this.apiCall.get<ReadStream>(this.endpointPath(\"export\"), options, {\n      responseType: \"stream\",\n    });\n  }\n}\n\nfunction isEmptyString(str: string | null | undefined): boolean {\n  return str == null || str === \"\" || str.length === 0;\n}\n\n/**\n * @deprecated Import from './Types' instead\n */\nexport type {\n  SearchParams,\n  WriteableDocuments,\n  SearchableDocuments,\n  DropTokensMode,\n  OperationMode,\n  UnionArrayKeys,\n  UnionArraySearchParams,\n  ArraybleParams,\n  ExtractBaseTypes,\n  SearchResponseRequestParams,\n} from \"./Types\";\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport { OverrideSchema } from \"./Override\";\n\nconst RESOURCEPATH = \"/overrides\";\n\nexport interface OverrideRuleQuerySchema {\n  query?: string;\n  match?: \"exact\" | \"contains\";\n}\n\nexport interface OverrideRuleFilterSchema {\n  filter_by?: string;\n}\n\nexport interface OverrideRuleTagsSchema {\n  tags?: string[];\n}\n\nexport interface OverrideCreateSchema {\n  rule: OverrideRuleQuerySchema &\n    OverrideRuleFilterSchema &\n    OverrideRuleTagsSchema;\n  filter_by?: string;\n  sort_by?: string;\n  remove_matched_tokens?: boolean;\n  replace_query?: string;\n  includes?: Array<{\n    id: string;\n    position: number;\n  }>;\n  excludes?: Array<{ id: string }>;\n  filter_curated_hits?: boolean;\n  effective_from_ts?: number;\n  effective_to_ts?: number;\n  stop_processing?: boolean;\n  metadata?: object;\n}\n\nexport interface OverridesRetrieveSchema {\n  overrides: OverrideSchema[];\n}\n\nexport default class Overrides {\n  constructor(\n    private collectionName: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async upsert(\n    overrideId: string,\n    params: OverrideCreateSchema,\n  ): Promise<OverrideSchema> {\n    return this.apiCall.put<OverrideSchema>(\n      this.endpointPath(overrideId),\n      params,\n    );\n  }\n\n  async retrieve(): Promise<OverridesRetrieveSchema> {\n    return this.apiCall.get<OverridesRetrieveSchema>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${Collections.RESOURCEPATH}/${this.collectionName}${\n      Overrides.RESOURCEPATH\n    }${operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)}`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport Overrides, { OverrideCreateSchema } from \"./Overrides\";\n\nexport interface OverrideSchema extends OverrideCreateSchema {\n  id: string;\n}\n\nexport interface OverrideDeleteSchema {\n  id: string;\n}\n\nexport default class Override {\n  constructor(\n    private collectionName: string,\n    private overrideId: string,\n    private apiCall: ApiCall\n  ) {}\n\n  async retrieve(): Promise<OverrideSchema> {\n    return this.apiCall.get<OverrideSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<OverrideDeleteSchema> {\n    return this.apiCall.delete<OverrideDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.collectionName)}${Overrides.RESOURCEPATH}/${encodeURIComponent(this.overrideId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport { SynonymSchema } from \"./Synonym\";\n\nconst RESOURCEPATH = \"/synonyms\";\n\nexport interface SynonymCreateSchema {\n  synonyms: string[];\n  root?: string;\n  locale?: string;\n  symbols_to_index?: string[];\n}\n\nexport interface SynonymsRetrieveSchema {\n  synonyms: SynonymSchema[];\n}\n\nexport default class Synonyms {\n  constructor(private collectionName: string, private apiCall: ApiCall) {}\n\n  async upsert(\n    synonymId: string,\n    params: SynonymCreateSchema\n  ): Promise<SynonymSchema> {\n    return this.apiCall.put<SynonymSchema>(\n      this.endpointPath(synonymId),\n      params\n    );\n  }\n\n  async retrieve(): Promise<SynonymsRetrieveSchema> {\n    return this.apiCall.get<SynonymsRetrieveSchema>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string) {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.collectionName)}${\n      Synonyms.RESOURCEPATH\n    }${operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)}`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport Synonyms, { SynonymCreateSchema } from \"./Synonyms\";\n\nexport interface SynonymSchema extends SynonymCreateSchema {\n  id: string;\n}\n\nexport interface SynonymDeleteSchema {\n  id: string;\n}\n\nexport default class Synonym {\n  constructor(\n    private collectionName: string,\n    private synonymId: string,\n    private apiCall: ApiCall\n  ) {}\n\n  async retrieve(): Promise<SynonymSchema> {\n    return this.apiCall.get<SynonymSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<SynonymDeleteSchema> {\n    return this.apiCall.delete<SynonymDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.collectionName)}${Synonyms.RESOURCEPATH}/${encodeURIComponent(this.synonymId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport Documents, {\n  DeleteQuery,\n  DocumentSchema,\n  DocumentWriteParameters,\n} from \"./Documents\";\n\nexport class Document<T extends DocumentSchema = object> {\n  constructor(\n    private collectionName: string,\n    private documentId: string,\n    private apiCall: ApiCall\n  ) {}\n\n  async retrieve(): Promise<T> {\n    return this.apiCall.get<T>(this.endpointPath());\n  }\n\n  async delete(options?: DeleteQuery): Promise<T> {\n    return this.apiCall.delete<T>(this.endpointPath(), options);\n  }\n\n  async update(\n    partialDocument: Partial<T>,\n    options: DocumentWriteParameters = {}\n  ): Promise<T> {\n    return this.apiCall.patch<T>(this.endpointPath(), partialDocument, options);\n  }\n\n  private endpointPath(): string {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.collectionName)}${Documents.RESOURCEPATH}/${encodeURIComponent(this.documentId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport type {\n  BaseCollectionCreateSchema,\n  CollectionCreateSchema,\n} from \"./Collections\";\nimport Documents, { DocumentSchema } from \"./Documents\";\nimport { ObjectNotFound } from \"./Errors\";\nimport Overrides from \"./Overrides\";\nimport Override from \"./Override\";\nimport Synonyms from \"./Synonyms\";\nimport Synonym from \"./Synonym\";\nimport { Document } from \"./Document\";\n\nexport type FieldType =\n  | \"string\"\n  | \"int32\"\n  | \"int64\"\n  | \"float\"\n  | \"bool\"\n  | \"geopoint\"\n  | \"geopolygon\"\n  | \"geopoint[]\"\n  | \"string[]\"\n  | \"int32[]\"\n  | \"int64[]\"\n  | \"float[]\"\n  | \"bool[]\"\n  | \"object\"\n  | \"object[]\"\n  | \"auto\"\n  | \"string*\"\n  | \"image\";\n\nexport interface CollectionFieldSchema\n  extends Partial<\n    Pick<BaseCollectionCreateSchema, \"token_separators\" | \"symbols_to_index\">\n  > {\n  name: string;\n  type: FieldType;\n  optional?: boolean;\n  facet?: boolean;\n  index?: boolean;\n  sort?: boolean;\n  locale?: string;\n  infix?: boolean;\n  stem?: boolean;\n  num_dim?: number;\n  store?: boolean;\n  range_index?: boolean;\n  [t: string]: unknown;\n}\n\nexport interface CollectionSchema extends CollectionCreateSchema {\n  created_at: number;\n  num_documents: number;\n  num_memory_shards: number;\n}\n\nexport interface CollectionDropFieldSchema {\n  name: string;\n  drop: true;\n}\n\nexport interface CollectionUpdateSchema\n  extends Partial<Omit<CollectionCreateSchema, \"name\" | \"fields\">> {\n  fields?: (CollectionFieldSchema | CollectionDropFieldSchema)[];\n}\n\nexport interface CollectionDeleteOptions {\n  compact_store?: boolean;\n}\n\nexport default class Collection<T extends DocumentSchema = object> {\n  private readonly _documents: Documents<T>;\n  private individualDocuments: Record<string, Document<T>> = {};\n  private readonly _overrides: Overrides;\n  private individualOverrides: Record<string, Override> = {};\n  private readonly _synonyms: Synonyms;\n  private individualSynonyms: Record<string, Synonym> = {};\n\n  constructor(\n    private readonly name: string,\n    private readonly apiCall: ApiCall,\n    private readonly configuration: any,\n  ) {\n    this.name = name;\n    this.apiCall = apiCall;\n    this.configuration = configuration;\n\n    this._documents = new Documents(\n      this.name,\n      this.apiCall,\n      this.configuration,\n    );\n    this._overrides = new Overrides(this.name, this.apiCall);\n    this._synonyms = new Synonyms(this.name, this.apiCall);\n  }\n\n  async retrieve(): Promise<CollectionSchema> {\n    return this.apiCall.get<CollectionSchema>(this.endpointPath());\n  }\n\n  async update(schema: CollectionUpdateSchema): Promise<CollectionSchema> {\n    return this.apiCall.patch<CollectionSchema>(this.endpointPath(), schema);\n  }\n\n  async delete(\n    options: CollectionDeleteOptions = {},\n  ): Promise<CollectionSchema> {\n    return this.apiCall.delete<CollectionSchema>(this.endpointPath(), options);\n  }\n\n  async exists(): Promise<boolean> {\n    try {\n      await this.retrieve();\n      return true;\n    } catch (e) {\n      if (e instanceof ObjectNotFound) return false;\n      throw e;\n    }\n  }\n\n  documents(): Documents<T>;\n  documents(documentId: string): Document<T>;\n  documents(documentId?: string): Document<T> | Documents<T> {\n    if (!documentId) {\n      return this._documents;\n    } else {\n      if (this.individualDocuments[documentId] === undefined) {\n        this.individualDocuments[documentId] = new Document(\n          this.name,\n          documentId,\n          this.apiCall,\n        );\n      }\n      return this.individualDocuments[documentId];\n    }\n  }\n\n  overrides(): Overrides;\n  overrides(overrideId: string): Override;\n  overrides(overrideId?: string): Overrides | Override {\n    if (overrideId === undefined) {\n      return this._overrides;\n    } else {\n      if (this.individualOverrides[overrideId] === undefined) {\n        this.individualOverrides[overrideId] = new Override(\n          this.name,\n          overrideId,\n          this.apiCall,\n        );\n      }\n      return this.individualOverrides[overrideId];\n    }\n  }\n\n  synonyms(): Synonyms;\n  synonyms(synonymId: string): Synonym;\n  synonyms(synonymId?: string): Synonyms | Synonym {\n    if (synonymId === undefined) {\n      return this._synonyms;\n    } else {\n      if (this.individualSynonyms[synonymId] === undefined) {\n        this.individualSynonyms[synonymId] = new Synonym(\n          this.name,\n          synonymId,\n          this.apiCall,\n        );\n      }\n      return this.individualSynonyms[synonymId];\n    }\n  }\n\n  private endpointPath(): string {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.name)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/aliases\";\n\nexport interface CollectionAliasCreateSchema {\n  collection_name: string;\n}\n\nexport interface CollectionAliasSchema extends CollectionAliasCreateSchema {\n  name: string;\n}\n\nexport interface CollectionAliasesResponseSchema {\n  aliases: CollectionAliasSchema[];\n}\n\nexport default class Aliases {\n  constructor(private apiCall: ApiCall) {}\n\n  async upsert(\n    name: string,\n    mapping: CollectionAliasCreateSchema\n  ): Promise<CollectionAliasSchema> {\n    return this.apiCall.put<CollectionAliasSchema>(\n      this.endpointPath(name),\n      mapping\n    );\n  }\n\n  async retrieve(): Promise<CollectionAliasesResponseSchema> {\n    return this.apiCall.get<CollectionAliasesResponseSchema>(RESOURCEPATH);\n  }\n\n  private endpointPath(aliasName): string {\n    return `${Aliases.RESOURCEPATH}/${encodeURIComponent(aliasName)}`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import Aliases, { CollectionAliasSchema } from \"./Aliases\";\nimport ApiCall from \"./ApiCall\";\n\nexport default class Alias {\n  constructor(private name: string, private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<CollectionAliasSchema> {\n    return this.apiCall.get<CollectionAliasSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<CollectionAliasSchema> {\n    return this.apiCall.delete<CollectionAliasSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Aliases.RESOURCEPATH}/${encodeURIComponent(this.name)}`;\n  }\n}\n","import { createHmac } from \"crypto\";\nimport ApiCall from \"./ApiCall\";\nimport { KeyCreateSchema, KeySchema } from \"./Key\";\nimport type { DocumentSchema, SearchParams } from \"./Documents\";\nimport { normalizeArrayableParams } from \"./Utils\";\n\nconst RESOURCEPATH = \"/keys\";\n\nexport interface KeysRetrieveSchema {\n  keys: KeySchema[];\n}\n\nexport interface GenerateScopedSearchKeyParams<T extends DocumentSchema>\n  extends Partial<SearchParams<T>> {\n  expires_at?: number;\n  cache_ttl?: number;\n  limit_multi_searches?: number;\n}\n\nexport default class Keys {\n  constructor(private apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async create(params: KeyCreateSchema): Promise<KeySchema> {\n    return this.apiCall.post<KeySchema>(Keys.RESOURCEPATH, params);\n  }\n\n  async retrieve(): Promise<KeysRetrieveSchema> {\n    return this.apiCall.get<KeysRetrieveSchema>(RESOURCEPATH);\n  }\n\n  generateScopedSearchKey<T extends DocumentSchema>(\n    searchKey: string,\n    parameters: GenerateScopedSearchKeyParams<T>,\n  ): string {\n    // Note: only a key generated with the `documents:search` action will be\n    // accepted by the server, when usined with the search endpoint.\n    const normalizedParams = normalizeArrayableParams<T, SearchParams<T>>(\n      parameters,\n    );\n    const paramsJSON = JSON.stringify(normalizedParams);\n    const digest = Buffer.from(\n      createHmac(\"sha256\", searchKey).update(paramsJSON).digest(\"base64\"),\n    );\n    const keyPrefix = searchKey.substr(0, 4);\n    const rawScopedKey = `${digest}${keyPrefix}${paramsJSON}`;\n\n    return Buffer.from(rawScopedKey).toString(\"base64\");\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Keys from \"./Keys\";\n\nexport interface KeyCreateSchema {\n  actions: string[];\n  collections: string[];\n  description?: string;\n  value?: string;\n  value_prefix?: string;\n  expires_at?: number;\n  autodelete?: boolean;\n}\n\nexport interface KeyDeleteSchema {\n  id: number;\n}\n\nexport interface KeySchema extends KeyCreateSchema {\n  id: number;\n}\n\nexport default class Key {\n  constructor(\n    private id: number,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<KeySchema> {\n    return this.apiCall.get<KeySchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<KeyDeleteSchema> {\n    return this.apiCall.delete<KeyDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Keys.RESOURCEPATH}/${encodeURIComponent(this.id)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/debug\";\n\nexport interface DebugResponseSchema {\n  state: number;\n  version: string;\n}\n\nexport default class Debug {\n  constructor(private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<DebugResponseSchema> {\n    return this.apiCall.get<DebugResponseSchema>(RESOURCEPATH);\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/metrics.json\";\n\nexport interface MetricsResponse {\n  [key: `system_cpu${number}_active_percentage`]: string;\n  system_cpu_active_percentage: string;\n  system_disk_total_bytes: string;\n  system_disk_used_bytes: string;\n  system_memory_total_bytes: string;\n  system_memory_total_swap_bytes?: string;\n  system_memory_used_bytes: string;\n  system_memory_used_swap_bytes?: string;\n  system_network_received_bytes: string;\n  system_network_sent_bytes: string;\n  typesense_memory_active_bytes: string;\n  typesense_memory_allocated_bytes: string;\n  typesense_memory_fragmentation_ratio: string;\n  typesense_memory_mapped_bytes: string;\n  typesense_memory_metadata_bytes: string;\n  typesense_memory_resident_bytes: string;\n  typesense_memory_retained_bytes: string;\n}\n\nexport default class Metrics {\n  constructor(private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<MetricsResponse> {\n    return this.apiCall.get(RESOURCEPATH);\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/stats.json\";\n\nexport interface EndpointStats {\n  [endpoint: string]: number;\n}\n\nexport interface StatsResponse {\n  delete_latency_ms?: number;\n  delete_requests_per_second?: number;\n  import_latency_ms?: number;\n  import_requests_per_second?: number;\n  latency_ms?: EndpointStats;\n  overloaded_requests_per_second?: number;\n  pending_write_batches?: number;\n  requests_per_second?: EndpointStats;\n  search_latency_ms?: number;\n  search_requests_per_second?: number;\n  total_requests_per_second?: number;\n  write_latency_ms?: number;\n  write_requests_per_second?: number;\n}\n\nexport default class Metrics {\n  constructor(private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<StatsResponse> {\n    return this.apiCall.get(RESOURCEPATH);\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/health\";\n\nexport interface HealthResponse {\n  ok: boolean;\n}\n\nexport default class Health {\n  constructor(private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<HealthResponse> {\n    return this.apiCall.get<HealthResponse>(RESOURCEPATH);\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/operations\";\n\nexport default class Operations {\n  constructor(private apiCall: ApiCall) {}\n\n  async perform(\n    operationName:\n      | \"vote\"\n      | \"snapshot\"\n      | \"cache/clear\"\n      | \"schema_changes\"\n      // eslint-disable-next-line @typescript-eslint/ban-types -- Can't use `object` here, it needs to intersect with `{}`\n      | (string & {}),\n    queryParameters: Record<string, any> = {},\n  ): Promise<any> {\n    return this.apiCall.post(\n      `${RESOURCEPATH}/${operationName}`,\n      {},\n      queryParameters,\n    );\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport { PresetSchema } from \"./Preset\";\nimport type { DocumentSchema, SearchParams } from \"./Documents\";\nimport { MultiSearchRequestsSchema } from \"./MultiSearch\";\nimport { normalizeArrayableParams } from \"./Utils\";\n\nconst RESOURCEPATH = \"/presets\";\n\nexport interface PresetCreateSchema<T extends DocumentSchema> {\n  value: SearchParams<T> | MultiSearchRequestsSchema<T>;\n}\n\nexport interface PresetsRetrieveSchema<T extends DocumentSchema> {\n  presets: PresetSchema<T>[];\n}\n\nexport default class Presets {\n  constructor(private apiCall: ApiCall) {}\n\n  async upsert<T extends DocumentSchema>(\n    presetId: string,\n    params: PresetCreateSchema<T>,\n  ): Promise<PresetSchema<T>> {\n    if (typeof params.value === \"object\" && \"searches\" in params.value) {\n      const normalizedParams = params.value.searches.map((search) =>\n        normalizeArrayableParams<T, SearchParams<T>>(search),\n      );\n\n      return this.apiCall.put<PresetSchema<T>>(this.endpointPath(presetId), {\n        value: { searches: normalizedParams },\n      });\n    }\n    const normalizedParams = normalizeArrayableParams<T, SearchParams<T>>(\n      params.value,\n    );\n\n    return this.apiCall.put<PresetSchema<T>>(this.endpointPath(presetId), {\n      value: normalizedParams,\n    });\n  }\n\n  async retrieve<T extends DocumentSchema>(): Promise<\n    PresetsRetrieveSchema<T>\n  > {\n    return this.apiCall.get<PresetsRetrieveSchema<T>>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${Presets.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport { DocumentSchema } from \"./Documents\";\nimport Presets, { PresetCreateSchema } from \"./Presets\";\n\nexport interface PresetSchema<T extends DocumentSchema>\n  extends PresetCreateSchema<T> {\n  name: string;\n}\n\nexport interface PresetDeleteSchema {\n  name: string;\n}\n\nexport default class Preset {\n  constructor(\n    private presetId: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve<T extends DocumentSchema>(): Promise<PresetSchema<T>> {\n    return this.apiCall.get<PresetSchema<T>>(this.endpointPath());\n  }\n\n  async delete(): Promise<PresetDeleteSchema> {\n    return this.apiCall.delete<PresetDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Presets.RESOURCEPATH}/${encodeURIComponent(this.presetId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport {\n  AnalyticsRuleCreateSchema,\n  AnalyticsRuleSchema,\n} from \"./AnalyticsRule\";\n\nexport interface AnalyticsRulesRetrieveSchema {\n  rules: AnalyticsRuleSchema[];\n}\n\nconst RESOURCEPATH = \"/analytics/rules\";\n\nexport default class AnalyticsRules {\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async upsert(\n    name: string,\n    params: AnalyticsRuleCreateSchema\n  ): Promise<AnalyticsRuleCreateSchema> {\n    return this.apiCall.put<AnalyticsRuleCreateSchema>(\n      this.endpointPath(name),\n      params\n    );\n  }\n\n  async retrieve(): Promise<AnalyticsRulesRetrieveSchema> {\n    return this.apiCall.get<AnalyticsRulesRetrieveSchema>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${AnalyticsRules.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport AnalyticsRules from \"./AnalyticsRules\";\n\nexport interface AnalyticsRuleCreateSchema {\n  type: \"popular_queries\" | \"nohits_queries\" | \"counter\" | \"log\";\n  params: {\n    enable_auto_aggregation?: boolean;\n    source: {\n      collections: string[];\n      events?: Array<{\n        type: string;\n        weight?: number;\n        name: string;\n      }>;\n    };\n    expand_query?: boolean;\n    destination?: {\n      collection: string;\n      counter_field?: string;\n    };\n    limit?: number;\n  };\n}\n\nexport interface AnalyticsRuleDeleteSchema {\n  name: string;\n}\n\nexport interface AnalyticsRuleSchema extends AnalyticsRuleCreateSchema {\n  name: string;\n}\n\nexport default class AnalyticsRule {\n  constructor(\n    private name: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<AnalyticsRuleSchema> {\n    return this.apiCall.get<AnalyticsRuleSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<AnalyticsRuleDeleteSchema> {\n    return this.apiCall.delete<AnalyticsRuleDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${AnalyticsRules.RESOURCEPATH}/${encodeURIComponent(this.name)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport { AnalyticsEventCreateSchema } from \"./AnalyticsEvent\";\n\nconst RESOURCEPATH = \"/analytics/events\";\n\nexport default class AnalyticsEvents {\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async create(\n    params: AnalyticsEventCreateSchema,\n  ): Promise<AnalyticsEventCreateSchema> {\n    return this.apiCall.post<AnalyticsEventCreateSchema>(\n      this.endpointPath(),\n      params,\n    );\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${AnalyticsEvents.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport AnalyticsRules from \"./AnalyticsRules\";\nimport AnalyticsRule from \"./AnalyticsRule\";\nimport AnalyticsEvents from \"./AnalyticsEvents\";\n\nconst RESOURCEPATH = \"/analytics\";\n\nexport default class Analytics {\n  private readonly _analyticsRules: AnalyticsRules;\n  private readonly individualAnalyticsRules: Record<string, AnalyticsRule> = {};\n  private readonly _analyticsEvents: AnalyticsEvents;\n\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n    this._analyticsRules = new AnalyticsRules(this.apiCall);\n    this._analyticsEvents = new AnalyticsEvents(this.apiCall);\n  }\n\n  rules(): AnalyticsRules;\n  rules(id: string): AnalyticsRule;\n  rules(id?: string): AnalyticsRules | AnalyticsRule {\n    if (id === undefined) {\n      return this._analyticsRules;\n    } else {\n      if (this.individualAnalyticsRules[id] === undefined) {\n        this.individualAnalyticsRules[id] = new AnalyticsRule(id, this.apiCall);\n      }\n      return this.individualAnalyticsRules[id];\n    }\n  }\n\n  events(): AnalyticsEvents {\n    return this._analyticsEvents;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport { StopwordSchema } from \"./Stopword\";\n\nconst RESOURCEPATH = \"/stopwords\";\n\nexport interface StopwordCreateSchema {\n  stopwords: string[];\n  locale?: string;\n}\n\nexport interface StopwordsRetrieveSchema {\n  stopwords: StopwordSchema[];\n}\n\nexport default class Stopwords {\n  constructor(private apiCall: ApiCall) {}\n\n  async upsert(\n    stopwordId: string,\n    params: StopwordCreateSchema,\n  ): Promise<StopwordSchema> {\n    return this.apiCall.put<StopwordSchema>(\n      this.endpointPath(stopwordId),\n      params,\n    );\n  }\n\n  async retrieve(): Promise<StopwordsRetrieveSchema> {\n    return this.apiCall.get<StopwordsRetrieveSchema>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${Stopwords.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Stopwords, { StopwordCreateSchema } from \"./Stopwords\";\n\nexport interface StopwordSchema extends StopwordCreateSchema {\n  id: string;\n  stopwords: string[];\n  locale?: string;\n}\n\nexport interface StopwordDeleteSchema {\n  id: string;\n}\n\nexport default class Stopword {\n  constructor(\n    private stopwordId: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<StopwordSchema> {\n    return this.apiCall.get<StopwordSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<StopwordDeleteSchema> {\n    return this.apiCall.delete<StopwordDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Stopwords.RESOURCEPATH}/${encodeURIComponent(this.stopwordId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport {\n  ConversationModelCreateSchema,\n  ConversationModelSchema,\n} from \"./ConversationModel\";\n\nconst RESOURCEPATH = \"/conversations/models\";\n\nexport default class ConversationModels {\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async create(\n    params: ConversationModelCreateSchema,\n  ): Promise<ConversationModelCreateSchema> {\n    return this.apiCall.post<ConversationModelCreateSchema>(\n      this.endpointPath(),\n      params,\n    );\n  }\n\n  async retrieve(): Promise<ConversationModelSchema[]> {\n    return this.apiCall.get<ConversationModelSchema[]>(\n      this.endpointPath(),\n    );\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${ConversationModels.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport ConversationModels from \"./ConversationModels\";\n\nexport interface ConversationModelCreateSchema {\n  id?: string;\n  model_name: string;\n  api_key?: string;\n  system_prompt?: string;\n  max_bytes: number;\n  history_collection?: string;\n}\n\nexport interface ConversationModelDeleteSchema {\n  id: string;\n}\n\nexport interface ConversationModelSchema extends ConversationModelCreateSchema {\n  id: string;\n}\n\nexport default class ConversationModel {\n  constructor(\n    private id: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async update(\n    params: ConversationModelCreateSchema,\n  ): Promise<ConversationModelCreateSchema> {\n    return this.apiCall.put<ConversationModelCreateSchema>(\n      this.endpointPath(),\n      params,\n    );\n  }\n\n  async retrieve(): Promise<ConversationModelSchema> {\n    return this.apiCall.get<ConversationModelSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<ConversationModelDeleteSchema> {\n    return this.apiCall.delete<ConversationModelDeleteSchema>(\n      this.endpointPath(),\n    );\n  }\n\n  private endpointPath(): string {\n    return `${ConversationModels.RESOURCEPATH}/${encodeURIComponent(this.id)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport ConversationModels from \"./ConversationModels\";\nimport ConversationModel from \"./ConversationModel\";\nimport { ConversationSchema } from \"./Conversation\";\n\nconst RESOURCEPATH = \"/conversations\";\n\nexport interface ConversationsRetrieveSchema {\n  conversations: ConversationSchema[];\n}\n\nexport default class Conversations {\n  private readonly _conversationsModels: ConversationModels;\n  private readonly individualConversationModels: Record<\n    string,\n    ConversationModel\n  > = {};\n\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n    this._conversationsModels = new ConversationModels(this.apiCall);\n  }\n\n  async retrieve(): Promise<ConversationsRetrieveSchema> {\n    return this.apiCall.get<ConversationsRetrieveSchema>(RESOURCEPATH);\n  }\n\n  models(): ConversationModels;\n  models(id: string): ConversationModel;\n  models(id?: string): ConversationModels | ConversationModel {\n    if (id === undefined) {\n      return this._conversationsModels;\n    } else {\n      if (this.individualConversationModels[id] === undefined) {\n        this.individualConversationModels[id] = new ConversationModel(\n          id,\n          this.apiCall,\n        );\n      }\n      return this.individualConversationModels[id];\n    }\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Conversations from \"./Conversations\";\n\nexport interface ConversationDeleteSchema {\n  id: number;\n}\n\nexport interface ConversationUpdateSchema {\n  ttl: number;\n}\n\nexport interface ConversationSchema {\n  id: number;\n  conversation: object[];\n  last_updated: number;\n  ttl: number;\n}\n\nexport default class Conversation {\n  constructor(\n    private id: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<ConversationSchema[]> {\n    return this.apiCall.get<ConversationSchema[]>(this.endpointPath());\n  }\n\n  async update(\n    params: ConversationUpdateSchema,\n  ): Promise<ConversationUpdateSchema> {\n    return this.apiCall.put<ConversationUpdateSchema>(\n      this.endpointPath(),\n      params,\n    );\n  }\n\n  async delete(): Promise<ConversationDeleteSchema> {\n    return this.apiCall.delete<ConversationDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Conversations.RESOURCEPATH}/${encodeURIComponent(this.id)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport type { StemmingDictionaryCreateSchema } from \"./StemmingDictionary\";\n\nconst RESOURCEPATH = \"/stemming/dictionaries\";\n\nexport interface StemmingDictionariesRetrieveSchema {\n  dictionaries: string[];\n}\n\nexport default class StemmingDictionaries {\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async upsert(\n    id: string,\n    wordRootCombinations: StemmingDictionaryCreateSchema[] | string,\n  ): Promise<StemmingDictionaryCreateSchema[] | string> {\n    const wordRootCombinationsInJSONLFormat = Array.isArray(\n      wordRootCombinations,\n    )\n      ? wordRootCombinations.map((combo) => JSON.stringify(combo)).join(\"\\n\")\n      : wordRootCombinations;\n\n    const resultsInJSONLFormat = await this.apiCall.performRequest<string>(\n\n      \"post\",\n      this.endpointPath(\"import\"),\n      {\n        queryParameters: {id},\n        bodyParameters: wordRootCombinationsInJSONLFormat,\n        additionalHeaders: {\"Content-Type\": \"text/plain\"},\n        skipConnectionTimeout: true,\n      }\n    );\n\n    return Array.isArray(wordRootCombinations)\n      ? resultsInJSONLFormat\n          .split(\"\\n\")\n          .map((line) => JSON.parse(line) as StemmingDictionaryCreateSchema)\n      : resultsInJSONLFormat;\n  }\n\n  async retrieve(): Promise<StemmingDictionariesRetrieveSchema> {\n    return this.apiCall.get<StemmingDictionariesRetrieveSchema>(\n      this.endpointPath(),\n    );\n  }\n\n  private endpointPath(operation?: string): string {\n    return operation === undefined\n      ? `${StemmingDictionaries.RESOURCEPATH}`\n      : `${StemmingDictionaries.RESOURCEPATH}/${encodeURIComponent(operation)}`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport StemmingDictionaries from \"./StemmingDictionaries\";\n\nexport interface StemmingDictionaryCreateSchema {\n  root: string;\n  word: string;\n}\n\nexport interface StemmingDictionarySchema {\n  id: string;\n  words: StemmingDictionaryCreateSchema[];\n}\n\nexport default class StemmingDictionary {\n  constructor(\n    private id: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<StemmingDictionarySchema> {\n    return this.apiCall.get<StemmingDictionarySchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${StemmingDictionaries.RESOURCEPATH}/${encodeURIComponent(this.id)}`;\n  }\n}\n","import type ApiCall from \"./ApiCall\";\nimport StemmingDictionaries from \"./StemmingDictionaries\";\nimport StemmingDictionary from \"./StemmingDictionary\";\n\nconst RESOURCEPATH = \"/stemming\";\n\nexport default class Stemming {\n  private readonly _stemmingDictionaries: StemmingDictionaries;\n  private readonly individualStemmingDictionaries: Record<\n    string,\n    StemmingDictionary\n  > = {};\n\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n    this._stemmingDictionaries = new StemmingDictionaries(this.apiCall);\n  }\n\n  dictionaries(): StemmingDictionaries;\n  dictionaries(id: string): StemmingDictionary;\n  dictionaries(id?: string): StemmingDictionaries | StemmingDictionary {\n    if (id === undefined) {\n      return this._stemmingDictionaries;\n    } else {\n      if (this.individualStemmingDictionaries[id] === undefined) {\n        this.individualStemmingDictionaries[id] = new StemmingDictionary(\n          id,\n          this.apiCall,\n        );\n      }\n      return this.individualStemmingDictionaries[id];\n    }\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","/* eslint-disable no-dupe-class-members */\n\nimport Configuration, { ConfigurationOptions } from \"./Configuration\";\nimport ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport Collection from \"./Collection\";\nimport Aliases from \"./Aliases\";\nimport Alias from \"./Alias\";\nimport Keys from \"./Keys\";\nimport Key from \"./Key\";\nimport Debug from \"./Debug\";\nimport Metrics from \"./Metrics\";\nimport Stats from \"./Stats\";\nimport Health from \"./Health\";\nimport Operations from \"./Operations\";\nimport MultiSearch from \"./MultiSearch\";\nimport Presets from \"./Presets\";\nimport Preset from \"./Preset\";\nimport Analytics from \"./Analytics\";\nimport Stopwords from \"./Stopwords\";\nimport Stopword from \"./Stopword\";\nimport Conversations from \"./Conversations\";\nimport Conversation from \"./Conversation\";\nimport Stemming from \"./Stemming\";\n\nexport default class Client {\n  configuration: Configuration;\n  apiCall: ApiCall;\n  debug: Debug;\n  metrics: Metrics;\n  stats: Stats;\n  health: Health;\n  operations: Operations;\n  multiSearch: MultiSearch;\n  analytics: Analytics;\n  stemming: Stemming;\n  private readonly _collections: Collections;\n  private readonly individualCollections: Record<string, Collection>;\n  private readonly _aliases: Aliases;\n  private readonly individualAliases: Record<string, Alias>;\n  private readonly _keys: Keys;\n  private readonly individualKeys: Record<number, Key>;\n  private readonly _presets: Presets;\n  private readonly individualPresets: Record<string, Preset>;\n  private readonly _stopwords: Stopwords;\n  private readonly individualStopwords: Record<string, Stopword>;\n  private readonly _conversations: Conversations;\n  private readonly individualConversations: Record<string, Conversation>;\n\n  constructor(options: ConfigurationOptions) {\n    options.sendApiKeyAsQueryParam = options.sendApiKeyAsQueryParam ?? false;\n\n    this.configuration = new Configuration(options);\n    this.apiCall = new ApiCall(this.configuration);\n    this.debug = new Debug(this.apiCall);\n    this.metrics = new Metrics(this.apiCall);\n    this.stats = new Stats(this.apiCall);\n    this.health = new Health(this.apiCall);\n    this.operations = new Operations(this.apiCall);\n    this.multiSearch = new MultiSearch(this.apiCall, this.configuration);\n    this._collections = new Collections(this.apiCall);\n    this.individualCollections = {};\n    this._aliases = new Aliases(this.apiCall);\n    this.individualAliases = {};\n    this._keys = new Keys(this.apiCall);\n    this.individualKeys = {};\n    this._presets = new Presets(this.apiCall);\n    this.individualPresets = {};\n    this._stopwords = new Stopwords(this.apiCall);\n    this.individualStopwords = {};\n    this.analytics = new Analytics(this.apiCall);\n    this.stemming = new Stemming(this.apiCall);\n    this._conversations = new Conversations(this.apiCall);\n    this.individualConversations = {};\n  }\n\n  collections(): Collections;\n  collections<T extends Record<string, any> = object>(\n    collectionName: string,\n  ): Collection<T>;\n  collections(collectionName?: string): Collections | Collection {\n    if (collectionName === undefined) {\n      return this._collections;\n    } else {\n      if (this.individualCollections[collectionName] === undefined) {\n        this.individualCollections[collectionName] = new Collection(\n          collectionName,\n          this.apiCall,\n          this.configuration,\n        );\n      }\n      return this.individualCollections[collectionName];\n    }\n  }\n\n  aliases(): Aliases;\n  aliases(aliasName: string): Alias;\n  aliases(aliasName?: string): Aliases | Alias {\n    if (aliasName === undefined) {\n      return this._aliases;\n    } else {\n      if (this.individualAliases[aliasName] === undefined) {\n        this.individualAliases[aliasName] = new Alias(aliasName, this.apiCall);\n      }\n      return this.individualAliases[aliasName];\n    }\n  }\n\n  keys(): Keys;\n  keys(id: number): Key;\n  keys(id?: number): Keys | Key {\n    if (id === undefined) {\n      return this._keys;\n    } else {\n      if (this.individualKeys[id] === undefined) {\n        this.individualKeys[id] = new Key(id, this.apiCall);\n      }\n      return this.individualKeys[id];\n    }\n  }\n\n  presets(): Presets;\n  presets(id: string): Preset;\n  presets(id?: string): Presets | Preset {\n    if (id === undefined) {\n      return this._presets;\n    } else {\n      if (this.individualPresets[id] === undefined) {\n        this.individualPresets[id] = new Preset(id, this.apiCall);\n      }\n      return this.individualPresets[id];\n    }\n  }\n\n  stopwords(): Stopwords;\n  stopwords(id: string): Stopword;\n  stopwords(id?: string): Stopwords | Stopword {\n    if (id === undefined) {\n      return this._stopwords;\n    } else {\n      if (this.individualStopwords[id] === undefined) {\n        this.individualStopwords[id] = new Stopword(id, this.apiCall);\n      }\n      return this.individualStopwords[id];\n    }\n  }\n\n  conversations(): Conversations;\n  conversations(id: string): Conversation;\n  conversations(id?: string): Conversations | Conversation {\n    if (id === undefined) {\n      return this._conversations;\n    } else {\n      if (this.individualConversations[id] === undefined) {\n        this.individualConversations[id] = new Conversation(id, this.apiCall);\n      }\n      return this.individualConversations[id];\n    }\n  }\n}\n"]}