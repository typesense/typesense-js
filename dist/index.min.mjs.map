{"version":3,"sources":["node-modules-polyfills-empty:http","node-modules-polyfills-empty:https","node-modules-polyfills-empty:crypto","../src/Typesense/Errors/index.ts","../src/Typesense/Errors/TypesenseError.ts","../src/Typesense/Errors/HTTPError.ts","../src/Typesense/Errors/MissingConfigurationError.ts","../src/Typesense/Errors/ObjectAlreadyExists.ts","../src/Typesense/Errors/ObjectNotFound.ts","../src/Typesense/Errors/ObjectUnprocessable.ts","../src/Typesense/Errors/RequestMalformed.ts","../src/Typesense/Errors/RequestUnauthorized.ts","../src/Typesense/Errors/ServerError.ts","../src/Typesense/Errors/ImportError.ts","../src/Typesense/Configuration.ts","../src/Typesense/ApiCall.ts","../src/Typesense/RequestWithCache.ts","../src/Typesense/Collections.ts","../src/Typesense/SearchOnlyDocuments.ts","../src/Typesense/Documents.ts","../src/Typesense/Utils.ts","../src/Typesense/MultiSearch.ts","../src/Typesense/SearchOnlyCollection.ts","../src/Typesense/SearchClient.ts","../src/Typesense/Overrides.ts","../src/Typesense/Override.ts","../src/Typesense/Synonyms.ts","../src/Typesense/Synonym.ts","../src/Typesense/Document.ts","../src/Typesense/Collection.ts","../src/Typesense/Aliases.ts","../src/Typesense/Alias.ts","../src/Typesense/Keys.ts","../src/Typesense/Key.ts","../src/Typesense/Debug.ts","../src/Typesense/Metrics.ts","../src/Typesense/Stats.ts","../src/Typesense/Health.ts","../src/Typesense/Operations.ts","../src/Typesense/Presets.ts","../src/Typesense/Preset.ts","../src/Typesense/AnalyticsRules.ts","../src/Typesense/AnalyticsRule.ts","../src/Typesense/AnalyticsEvents.ts","../src/Typesense/Analytics.ts","../src/Typesense/Stopwords.ts","../src/Typesense/Stopword.ts","../src/Typesense/ConversationModels.ts","../src/Typesense/ConversationModel.ts","../src/Typesense/Conversations.ts","../src/Typesense/Conversation.ts","../src/Typesense/StemmingDictionaries.ts","../src/Typesense/StemmingDictionary.ts","../src/Typesense/Stemming.ts","../src/Typesense/Client.ts"],"names":["require_http","__commonJSMin","exports","module","require_https","require_crypto","Errors_exports","__export","HTTPError","ImportError","MissingConfigurationError","ObjectAlreadyExists","ObjectNotFound","ObjectUnprocessable","RequestMalformed","RequestUnauthorized","ServerError","TypesenseError","message","httpBody","httpStatus","importResults","payload","Configuration","options","node","logger","key","array","i","j","import_http","import_https","APIKEYHEADERNAME","HEALTHY","UNHEALTHY","isNodeJSEnvironment","ApiCall","configuration","endpoint","queryParameters","abortSignal","responseType","bodyParameters","additionalHeaders","axios","requestType","skipConnectionTimeout","enableKeepAlive","requestNumber","lastException","wasAborted","numTries","abortListener","requestOptions","status","data","headers","transformedData","HTTPAgent","HTTPSAgent","source","response","error","candidateNode","isDueForHealthcheck","isHealthy","defaultHeaders","seconds","resolve","messageFromServer","errorMessage","RequestWithCache","requestContext","requestFunction","requestFunctionArguments","cacheOptions","cacheResponseForSeconds","maxSize","requestFunctionArgumentsJSON","cacheEntry","now","cachePromiseEntry","responsePromise","oldestEntry","RESOURCEPATH","Collections","apiCall","schema","SearchOnlyDocuments","collectionName","searchParameters","cacheSearchResultsForSeconds","additionalQueryParams","normalizedParams","normalizeArrayableParams","queryParams","operation","arrayableParams","Documents","document","query","documents","documentsInJSONLFormat","resultsInJSONLFormat","resultsInJSONFormat","r","failedItems","readableStream","hasNoArrayValues","params","isNonArrayValue","result","value","MultiSearch","useTextContentType","searchRequests","commonParams","normalizedSearchRequests","normalizedQueryParams","SearchOnlyCollection","name","SearchClient","_","collection","Overrides","_Overrides","overrideId","Override","Synonyms","_Synonyms","synonymId","Synonym","Document","documentId","partialDocument","Collection","Aliases","_Aliases","mapping","aliasName","Alias","import_crypto","Keys","_Keys","searchKey","parameters","paramsJSON","digest","keyPrefix","rawScopedKey","Key","id","Debug","Metrics","Health","Operations","operationName","Presets","_Presets","presetId","search","Preset","AnalyticsRules","_AnalyticsRules","AnalyticsRule","AnalyticsEvents","_AnalyticsEvents","Analytics","Stopwords","_Stopwords","stopwordId","Stopword","ConversationModels","_ConversationModels","ConversationModel","Conversations","Conversation","StemmingDictionaries","_StemmingDictionaries","wordRootCombinations","wordRootCombinationsInJSONLFormat","combo","line","StemmingDictionary","Stemming","Client"],"mappings":"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","file":"index.min.mjs","sourcesContent":["module.exports = {}","module.exports = {}","module.exports = {}","import HTTPError from \"./HTTPError\";\nimport MissingConfigurationError from \"./MissingConfigurationError\";\nimport ObjectAlreadyExists from \"./ObjectAlreadyExists\";\nimport ObjectNotFound from \"./ObjectNotFound\";\nimport ObjectUnprocessable from \"./ObjectUnprocessable\";\nimport RequestMalformed from \"./RequestMalformed\";\nimport RequestUnauthorized from \"./RequestUnauthorized\";\nimport ServerError from \"./ServerError\";\nimport ImportError from \"./ImportError\";\nimport TypesenseError from \"./TypesenseError\";\n\nexport {\n  HTTPError,\n  MissingConfigurationError,\n  ObjectAlreadyExists,\n  ObjectNotFound,\n  ObjectUnprocessable,\n  RequestMalformed,\n  RequestUnauthorized,\n  ServerError,\n  TypesenseError,\n  ImportError,\n};\n","export default class TypesenseError extends Error {\n  httpStatus?: number;\n  httpBody?: string;\n\n  // Source: https://stackoverflow.com/a/58417721/123545\n  constructor(message?: string, httpBody?: string, httpStatus?: number) {\n    super(message);\n    this.name = new.target.name;\n    this.httpBody = httpBody;\n    this.httpStatus = httpStatus;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class HTTPError extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class MissingConfigurationError extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class ObjectAlreadyExists extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class ObjectNotFound extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class ObjectUnprocessable extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class RequestMalformed extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class RequestUnauthorized extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class ServerError extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\nimport type { DocumentImportParameters, ImportResponse } from \"../Documents\";\nimport { ReadStream } from \"node:fs\";\n\ninterface ImportErrorPayload {\n  documentsInJSONLFormat: string | ReadStream;\n  options: DocumentImportParameters;\n  failedItems: ImportResponse[];\n  successCount: number;\n}\n\nexport default class ImportError extends TypesenseError {\n  payload: ImportErrorPayload;\n  importResults: ImportResponse[];\n  constructor(\n    message: string,\n    importResults: ImportResponse[],\n    payload: ImportErrorPayload,\n  ) {\n    super(message);\n    this.importResults = importResults;\n    this.payload = payload;\n  }\n}\n","import logger from \"loglevel\";\nimport { MissingConfigurationError } from \"./Errors\";\nimport type { Agent as HTTPAgent } from \"http\";\nimport type { Agent as HTTPSAgent } from \"https\";\nimport type { AxiosRequestConfig } from \"axios\";\n\nexport interface NodeConfiguration {\n  host: string;\n  port: number;\n  protocol: string;\n  path?: string;\n  url?: string;\n}\n\nexport interface NodeConfigurationWithHostname {\n  host: string;\n  port: number;\n  protocol: string;\n  path?: string;\n}\n\nexport interface NodeConfigurationWithUrl {\n  url: string;\n}\n\nexport interface ConfigurationOptions {\n  apiKey: string;\n  nodes:\n    | NodeConfiguration[]\n    | NodeConfigurationWithHostname[]\n    | NodeConfigurationWithUrl[];\n  randomizeNodes?: boolean;\n  /**\n   * @deprecated\n   * masterNode is now consolidated to nodes, starting with Typesense Server v0.12'\n   */\n  masterNode?:\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl;\n  /**\n   * @deprecated\n   * readReplicaNodes is now consolidated to nodes, starting with Typesense Server v0.12'\n   */\n  readReplicaNodes?:\n    | NodeConfiguration[]\n    | NodeConfigurationWithHostname[]\n    | NodeConfigurationWithUrl[];\n  nearestNode?:\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl;\n  connectionTimeoutSeconds?: number;\n  timeoutSeconds?: number;\n  healthcheckIntervalSeconds?: number;\n  numRetries?: number;\n  retryIntervalSeconds?: number;\n  sendApiKeyAsQueryParam?: boolean | undefined;\n  useServerSideSearchCache?: boolean;\n  cacheSearchResultsForSeconds?: number;\n  additionalHeaders?: Record<string, string>;\n\n  logLevel?: logger.LogLevelDesc;\n  logger?: logger.Logger;\n\n  /**\n   * Set a custom HTTP Agent\n   *\n   * This is helpful for eg, to enable keepAlive which helps prevents ECONNRESET socket hang up errors\n   *    Usage:\n   *      const { Agent: HTTPAgent } = require(\"http\");\n   *      ...\n   *      httpAgent: new HTTPAgent({ keepAlive: true }),\n   * @type {HTTPAgent}\n   */\n  httpAgent?: HTTPAgent;\n\n  /**\n   * Set a custom HTTPS Agent\n   *\n   * This is helpful for eg, to enable keepAlive which helps prevents ECONNRESET socket hang up errors\n   *    Usage:\n   *      const { Agent: HTTPSAgent } = require(\"https\");\n   *      ...\n   *      httpsAgent: new HTTPSAgent({ keepAlive: true }),\n   * @type {HTTPSAgent}\n   */\n  httpsAgent?: HTTPSAgent;\n\n  /**\n   * Set a custom paramsSerializer\n   *\n   * See axios documentation for more information on how to use this parameter: https://axios-http.com/docs/req_config\n   *  This is helpful for handling React Native issues like this: https://github.com/axios/axios/issues/6102#issuecomment-2085301397\n   * @type {any}\n   */\n  paramsSerializer?: any;\n\n  /**\n   * Set a custom axios adapter\n   *\n   * Useful for customizing the underlying HTTP client library used by Typesense.\n   *\n   * For example, you can use this to use a custom HTTP client library like `fetch`, in order for the library to work on the edge.\n   * Related GiHub issue: https://github.com/typesense/typesense-js/issues/161\n   *\n   * See axios documentation for more information on how to use this parameter: https://axios-http.com/docs/req_config\n   */\n  axiosAdapter?: AxiosRequestConfig[\"adapter\"];\n}\n\nexport default class Configuration {\n  readonly nodes:\n    | NodeConfiguration[]\n    | NodeConfigurationWithHostname[]\n    | NodeConfigurationWithUrl[];\n  readonly nearestNode?:\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl;\n  readonly connectionTimeoutSeconds: number;\n  readonly healthcheckIntervalSeconds: number;\n  readonly numRetries: number;\n  readonly retryIntervalSeconds: number;\n  readonly apiKey: string;\n  readonly sendApiKeyAsQueryParam?: boolean;\n  readonly cacheSearchResultsForSeconds: number;\n  readonly useServerSideSearchCache: boolean;\n  readonly logger: logger.Logger;\n  readonly logLevel: logger.LogLevelDesc;\n  readonly additionalHeaders?: Record<string, string>;\n  readonly httpAgent?: HTTPAgent;\n  readonly httpsAgent?: HTTPSAgent;\n  readonly paramsSerializer?: any;\n  readonly axiosAdapter?: AxiosRequestConfig[\"adapter\"];\n\n  constructor(options: ConfigurationOptions) {\n    this.nodes = options.nodes || [];\n    this.nodes = this.nodes\n      .map((node) => this.setDefaultPathInNode(node))\n      .map((node) => this.setDefaultPortInNode(node))\n      .map((node) => ({ ...node })) as NodeConfiguration[]; // Make a deep copy\n\n    if (options.randomizeNodes == null) {\n      options.randomizeNodes = true;\n    }\n\n    if (options.randomizeNodes === true) {\n      this.shuffleArray(this.nodes);\n    }\n\n    this.nearestNode = options.nearestNode;\n    this.nearestNode = this.setDefaultPathInNode(this.nearestNode);\n    this.nearestNode = this.setDefaultPortInNode(this.nearestNode);\n\n    this.connectionTimeoutSeconds =\n      options.connectionTimeoutSeconds || options.timeoutSeconds || 5;\n    this.healthcheckIntervalSeconds = options.healthcheckIntervalSeconds || 60;\n    this.numRetries =\n      (options.numRetries !== undefined && options.numRetries >= 0\n        ? options.numRetries\n        : this.nodes.length + (this.nearestNode == null ? 0 : 1)) || 3;\n    this.retryIntervalSeconds = options.retryIntervalSeconds || 0.1;\n\n    this.apiKey = options.apiKey;\n    this.sendApiKeyAsQueryParam = options.sendApiKeyAsQueryParam; // We will set a default for this in Client and SearchClient\n\n    this.cacheSearchResultsForSeconds =\n      options.cacheSearchResultsForSeconds || 0; // Disable client-side cache by default\n    this.useServerSideSearchCache = options.useServerSideSearchCache || false;\n\n    this.axiosAdapter = options.axiosAdapter;\n    this.logger = options.logger || logger;\n    this.logLevel = options.logLevel || \"warn\";\n    this.logger.setLevel(this.logLevel);\n\n    this.additionalHeaders = options.additionalHeaders;\n\n    this.httpAgent = options.httpAgent;\n    this.httpsAgent = options.httpsAgent;\n\n    this.paramsSerializer = options.paramsSerializer;\n\n    this.showDeprecationWarnings(options);\n    this.validate();\n  }\n\n  validate(): boolean {\n    if (this.nodes == null || this.nodes.length === 0 || this.validateNodes()) {\n      throw new MissingConfigurationError(\n        \"Ensure that nodes[].protocol, nodes[].host and nodes[].port are set\",\n      );\n    }\n\n    if (\n      this.nearestNode != null &&\n      this.isNodeMissingAnyParameters(this.nearestNode)\n    ) {\n      throw new MissingConfigurationError(\n        \"Ensure that nearestNodes.protocol, nearestNodes.host and nearestNodes.port are set\",\n      );\n    }\n\n    if (this.apiKey == null) {\n      throw new MissingConfigurationError(\"Ensure that apiKey is set\");\n    }\n\n    return true;\n  }\n\n  private validateNodes(): boolean {\n    return this.nodes.some((node) => {\n      return this.isNodeMissingAnyParameters(node);\n    });\n  }\n\n  private isNodeMissingAnyParameters(\n    node:\n      | NodeConfiguration\n      | NodeConfigurationWithHostname\n      | NodeConfigurationWithUrl,\n  ): boolean {\n    return (\n      ![\"protocol\", \"host\", \"port\", \"path\"].every((key) => {\n        return node.hasOwnProperty(key);\n      }) && node[\"url\"] == null\n    );\n  }\n\n  private setDefaultPathInNode(\n    node:\n      | NodeConfiguration\n      | NodeConfigurationWithHostname\n      | NodeConfigurationWithUrl\n      | undefined,\n  ):\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl\n    | undefined {\n    if (node != null && !node.hasOwnProperty(\"path\")) {\n      node[\"path\"] = \"\";\n    }\n    return node;\n  }\n\n  private setDefaultPortInNode(\n    node:\n      | NodeConfiguration\n      | NodeConfigurationWithHostname\n      | NodeConfigurationWithUrl\n      | undefined,\n  ):\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl\n    | undefined {\n    if (\n      node != null &&\n      !node.hasOwnProperty(\"port\") &&\n      node.hasOwnProperty(\"protocol\")\n    ) {\n      switch (node[\"protocol\"]) {\n        case \"https\":\n          node[\"port\"] = 443;\n          break;\n        case \"http\":\n          node[\"port\"] = 80;\n          break;\n      }\n    }\n    return node;\n  }\n\n  private showDeprecationWarnings(options: ConfigurationOptions): void {\n    if (options.timeoutSeconds) {\n      this.logger.warn(\n        \"Deprecation warning: timeoutSeconds is now renamed to connectionTimeoutSeconds\",\n      );\n    }\n    if (options.masterNode) {\n      this.logger.warn(\n        \"Deprecation warning: masterNode is now consolidated to nodes, starting with Typesense Server v0.12\",\n      );\n    }\n    if (options.readReplicaNodes) {\n      this.logger.warn(\n        \"Deprecation warning: readReplicaNodes is now consolidated to nodes, starting with Typesense Server v0.12\",\n      );\n    }\n  }\n\n  private shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n}\n","import type {\n  AxiosAdapter,\n  AxiosRequestConfig,\n  AxiosResponse,\n  Method,\n} from \"axios\";\nimport axios from \"axios\";\nimport { Agent as HTTPAgent } from \"http\";\nimport { Agent as HTTPSAgent } from \"https\";\nimport { Logger } from \"loglevel\";\nimport Configuration, { NodeConfiguration } from \"./Configuration\";\nimport {\n  HTTPError,\n  ObjectAlreadyExists,\n  ObjectNotFound,\n  ObjectUnprocessable,\n  RequestMalformed,\n  RequestUnauthorized,\n  ServerError,\n} from \"./Errors\";\nimport TypesenseError from \"./Errors/TypesenseError\";\n\nconst APIKEYHEADERNAME = \"X-TYPESENSE-API-KEY\";\nconst HEALTHY = true;\nconst UNHEALTHY = false;\n\ninterface Node extends NodeConfiguration {\n  isHealthy: boolean;\n  index: string | number;\n}\n\nconst isNodeJSEnvironment =\n  typeof process !== \"undefined\" &&\n  process.versions != null &&\n  process.versions.node != null;\n\nexport default class ApiCall {\n  private readonly apiKey: string;\n  private readonly nodes: Node[];\n  private readonly nearestNode: Node;\n  private readonly connectionTimeoutSeconds: number;\n  private readonly healthcheckIntervalSeconds: number;\n  private readonly retryIntervalSeconds: number;\n  private readonly sendApiKeyAsQueryParam?: boolean;\n  private readonly numRetriesPerRequest: number;\n  private readonly additionalUserHeaders?: Record<string, string>;\n\n  private readonly logger: Logger;\n  private currentNodeIndex: number;\n\n  constructor(private configuration: Configuration) {\n    this.apiKey = this.configuration.apiKey;\n    this.nodes =\n      this.configuration.nodes == null\n        ? this.configuration.nodes\n        : JSON.parse(JSON.stringify(this.configuration.nodes)); // Make a copy, since we'll be adding additional metadata to the nodes\n    this.nearestNode =\n      this.configuration.nearestNode == null\n        ? this.configuration.nearestNode\n        : JSON.parse(JSON.stringify(this.configuration.nearestNode));\n    this.connectionTimeoutSeconds = this.configuration.connectionTimeoutSeconds;\n    this.healthcheckIntervalSeconds =\n      this.configuration.healthcheckIntervalSeconds;\n    this.numRetriesPerRequest = this.configuration.numRetries;\n    this.retryIntervalSeconds = this.configuration.retryIntervalSeconds;\n    this.sendApiKeyAsQueryParam = this.configuration.sendApiKeyAsQueryParam;\n    this.additionalUserHeaders = this.configuration.additionalHeaders;\n\n    this.logger = this.configuration.logger;\n\n    this.initializeMetadataForNodes();\n    this.currentNodeIndex = -1;\n  }\n\n  async get<T>(\n    endpoint: string,\n    queryParameters: any = {},\n    {\n      abortSignal = null,\n      responseType = undefined,\n    }: {\n      abortSignal?: any;\n      responseType?: AxiosRequestConfig[\"responseType\"] | undefined;\n    } = {},\n  ): Promise<T> {\n    return this.performRequest<T>(\"get\", endpoint, {\n      queryParameters,\n      abortSignal,\n      responseType,\n    });\n  }\n\n  async delete<T>(endpoint: string, queryParameters: any = {}): Promise<T> {\n    return this.performRequest<T>(\"delete\", endpoint, { queryParameters });\n  }\n\n  async post<T>(\n    endpoint: string,\n    bodyParameters: any = {},\n    queryParameters: any = {},\n    additionalHeaders: any = {},\n  ): Promise<T> {\n    return this.performRequest<T>(\"post\", endpoint, {\n      queryParameters,\n      bodyParameters,\n      additionalHeaders,\n    });\n  }\n\n  async put<T>(\n    endpoint: string,\n    bodyParameters: any = {},\n    queryParameters: any = {},\n  ): Promise<T> {\n    return this.performRequest<T>(\"put\", endpoint, {\n      queryParameters,\n      bodyParameters,\n    });\n  }\n\n  async patch<T>(\n    endpoint: string,\n    bodyParameters: any = {},\n    queryParameters: any = {},\n  ): Promise<T> {\n    return this.performRequest<T>(\"patch\", endpoint, {\n      queryParameters,\n      bodyParameters,\n    });\n  }\n\n  private getAdapter(): AxiosAdapter | undefined {\n    if (!this.configuration.axiosAdapter) return undefined;\n\n    if (typeof this.configuration.axiosAdapter === \"function\")\n      return this.configuration.axiosAdapter;\n\n    const isCloudflareWorkers =\n      typeof navigator !== \"undefined\" &&\n      navigator.userAgent === \"Cloudflare-Workers\";\n\n    return isCloudflareWorkers\n      ? axios.getAdapter(this.configuration.axiosAdapter).bind(globalThis)\n      : axios.getAdapter(this.configuration.axiosAdapter);\n  }\n\n  async performRequest<T>(\n    requestType: Method,\n    endpoint: string,\n    {\n      queryParameters = null,\n      bodyParameters = null,\n      additionalHeaders = {},\n      abortSignal = null,\n      responseType = undefined,\n      skipConnectionTimeout = false,\n      enableKeepAlive = undefined,\n    }: {\n      queryParameters?: any;\n      bodyParameters?: any;\n      additionalHeaders?: any;\n      abortSignal?: any;\n      responseType?: AxiosRequestConfig[\"responseType\"] | undefined;\n      skipConnectionTimeout?: boolean;\n      enableKeepAlive?: boolean | undefined;\n    },\n  ): Promise<T> {\n    this.configuration.validate();\n\n    const requestNumber = Date.now();\n    let lastException;\n    let wasAborted = false;\n    this.logger.debug(\n      `Request #${requestNumber}: Performing ${requestType.toUpperCase()} request: ${endpoint}`,\n    );\n    for (\n      let numTries = 1;\n      numTries <= this.numRetriesPerRequest + 1;\n      numTries++\n    ) {\n      const node = this.getNextNode(requestNumber);\n      this.logger.debug(\n        `Request #${requestNumber}: Attempting ${requestType.toUpperCase()} request Try #${numTries} to Node ${\n          node.index\n        }`,\n      );\n\n      if (abortSignal && abortSignal.aborted) {\n        return Promise.reject(new Error(\"Request aborted by caller.\"));\n      }\n\n      let abortListener: ((event: Event) => void) | undefined;\n\n      try {\n        const requestOptions: AxiosRequestConfig<string> = {\n          adapter: this.getAdapter(),\n          method: requestType,\n          url: this.uriFor(endpoint, node),\n          headers: Object.assign(\n            {},\n            this.defaultHeaders(),\n            additionalHeaders,\n            this.additionalUserHeaders,\n          ),\n          maxContentLength: Infinity,\n          maxBodyLength: Infinity,\n          responseType,\n          validateStatus: (status) => {\n            /* Override default validateStatus, which only considers 2xx a success.\n                In our case, if the server returns any HTTP code, we will handle it below.\n                We do this to be able to raise custom errors based on response code.\n             */\n            return status > 0;\n          },\n          transformResponse: [\n            (data, headers) => {\n              let transformedData = data;\n              if (\n                headers !== undefined &&\n                typeof data === \"string\" &&\n                headers[\"content-type\"] &&\n                headers[\"content-type\"].startsWith(\"application/json\")\n              ) {\n                transformedData = JSON.parse(data);\n              }\n              return transformedData;\n            },\n          ],\n        };\n\n        if (skipConnectionTimeout !== true) {\n          requestOptions.timeout = this.connectionTimeoutSeconds * 1000;\n        }\n\n        if (queryParameters && Object.keys(queryParameters).length !== 0) {\n          requestOptions.params = queryParameters;\n        }\n\n        if (this.sendApiKeyAsQueryParam) {\n          requestOptions.params = requestOptions.params || {};\n          requestOptions.params[\"x-typesense-api-key\"] = this.apiKey;\n        }\n\n        if (this.configuration.httpAgent) {\n          this.logger.debug(\n            `Request #${requestNumber}: Using custom httpAgent`,\n          );\n          requestOptions.httpAgent = this.configuration.httpAgent;\n        } else if (enableKeepAlive === true) {\n          if (!isNodeJSEnvironment) {\n            this.logger.warn(\n              `Request #${requestNumber}: Cannot use custom httpAgent in a browser environment to enable keepAlive`,\n            );\n          } else {\n            this.logger.debug(`Request #${requestNumber}: Enabling KeepAlive`);\n            requestOptions.httpAgent = new HTTPAgent({ keepAlive: true });\n          }\n        }\n\n        if (this.configuration.httpsAgent) {\n          this.logger.debug(\n            `Request #${requestNumber}: Using custom httpsAgent`,\n          );\n          requestOptions.httpsAgent = this.configuration.httpsAgent;\n        } else if (enableKeepAlive === true) {\n          if (!isNodeJSEnvironment) {\n            this.logger.warn(\n              `Request #${requestNumber}: Cannot use custom httpAgent in a browser environment to enable keepAlive`,\n            );\n          } else {\n            this.logger.debug(`Request #${requestNumber}: Enabling keepAlive`);\n            requestOptions.httpsAgent = new HTTPSAgent({ keepAlive: true });\n          }\n        }\n\n        if (this.configuration.paramsSerializer) {\n          this.logger.debug(\n            `Request #${requestNumber}: Using custom paramsSerializer`,\n          );\n          requestOptions.paramsSerializer = this.configuration.paramsSerializer;\n        }\n\n        if (\n          bodyParameters &&\n          ((typeof bodyParameters === \"string\" &&\n            bodyParameters.length !== 0) ||\n            (typeof bodyParameters === \"object\" &&\n              Object.keys(bodyParameters).length !== 0))\n        ) {\n          requestOptions.data = bodyParameters;\n        }\n\n        // Translate from user-provided AbortController to the Axios request cancel mechanism.\n        if (abortSignal) {\n          const cancelToken = axios.CancelToken;\n          const source = cancelToken.source();\n          abortListener = () => {\n            wasAborted = true;\n            source.cancel();\n          };\n          abortSignal.addEventListener(\"abort\", abortListener);\n          requestOptions.cancelToken = source.token;\n        }\n\n        const response = await axios(requestOptions);\n        if (response.status >= 1 && response.status <= 499) {\n          // Treat any status code > 0 and < 500 to be an indication that node is healthy\n          // We exclude 0 since some clients return 0 when request fails\n          this.setNodeHealthcheck(node, HEALTHY);\n        }\n        this.logger.debug(\n          `Request #${requestNumber}: Request to Node ${node.index} was made. Response Code was ${response.status}.`,\n        );\n\n        if (response.status >= 200 && response.status < 300) {\n          // If response is 2xx return a resolved promise\n          return Promise.resolve(response.data);\n        } else if (response.status < 500) {\n          // Next, if response is anything but 5xx, don't retry, return a custom error\n          return Promise.reject(\n            this.customErrorForResponse(\n              response,\n              response.data?.message,\n              requestOptions.data,\n            ),\n          );\n        } else {\n          // Retry all other HTTP errors (HTTPStatus > 500)\n          // This will get caught by the catch block below\n          throw this.customErrorForResponse(\n            response,\n            response.data?.message,\n            requestOptions.data,\n          );\n        }\n      } catch (error: any) {\n        // This block handles retries for HTTPStatus > 500 and network layer issues like connection timeouts\n        if (!wasAborted) {\n          this.setNodeHealthcheck(node, UNHEALTHY);\n        }\n        lastException = error;\n        this.logger.warn(\n          `Request #${requestNumber}: Request to Node ${\n            node.index\n          } failed due to \"${error?.code ?? \"\"} ${error.message}${\n            error.response == null\n              ? \"\"\n              : \" - \" + JSON.stringify(error.response?.data)\n          }\"`,\n        );\n        // this.logger.debug(error.stack)\n        if (wasAborted) {\n          return Promise.reject(new Error(\"Request aborted by caller.\"));\n        }\n        if (numTries < this.numRetriesPerRequest + 1) {\n          this.logger.warn(\n            `Request #${requestNumber}: Sleeping for ${this.retryIntervalSeconds}s and then retrying request...`,\n          );\n        }\n        await this.timer(this.retryIntervalSeconds);\n      } finally {\n        if (abortSignal && abortListener) {\n          abortSignal.removeEventListener(\"abort\", abortListener);\n        }\n      }\n    }\n    this.logger.debug(\n      `Request #${requestNumber}: No retries left. Raising last error`,\n    );\n    return Promise.reject(lastException);\n  }\n\n  // Attempts to find the next healthy node, looping through the list of nodes once.\n  //   But if no healthy nodes are found, it will just return the next node, even if it's unhealthy\n  //     so we can try the request for good measure, in case that node has become healthy since\n  getNextNode(requestNumber = 0): Node {\n    // Check if nearestNode is set and is healthy, if so return it\n    if (this.nearestNode != null) {\n      this.logger.debug(\n        `Request #${requestNumber}: Nodes Health: Node ${\n          this.nearestNode.index\n        } is ${this.nearestNode.isHealthy === true ? \"Healthy\" : \"Unhealthy\"}`,\n      );\n      if (\n        this.nearestNode.isHealthy === true ||\n        this.nodeDueForHealthcheck(this.nearestNode, requestNumber)\n      ) {\n        this.logger.debug(\n          `Request #${requestNumber}: Updated current node to Node ${this.nearestNode.index}`,\n        );\n        return this.nearestNode;\n      }\n      this.logger.debug(\n        `Request #${requestNumber}: Falling back to individual nodes`,\n      );\n    }\n\n    // Fallback to nodes as usual\n    this.logger.debug(\n      `Request #${requestNumber}: Nodes Health: ${this.nodes\n        .map(\n          (node) =>\n            `Node ${node.index} is ${\n              node.isHealthy === true ? \"Healthy\" : \"Unhealthy\"\n            }`,\n        )\n        .join(\" || \")}`,\n    );\n    let candidateNode: Node = this.nodes[0];\n    for (let i = 0; i <= this.nodes.length; i++) {\n      this.currentNodeIndex = (this.currentNodeIndex + 1) % this.nodes.length;\n      candidateNode = this.nodes[this.currentNodeIndex];\n      if (\n        candidateNode.isHealthy === true ||\n        this.nodeDueForHealthcheck(candidateNode, requestNumber)\n      ) {\n        this.logger.debug(\n          `Request #${requestNumber}: Updated current node to Node ${candidateNode.index}`,\n        );\n        return candidateNode;\n      }\n    }\n\n    // None of the nodes are marked healthy, but some of them could have become healthy since last health check.\n    //  So we will just return the next node.\n    this.logger.debug(\n      `Request #${requestNumber}: No healthy nodes were found. Returning the next node, Node ${candidateNode.index}`,\n    );\n    return candidateNode;\n  }\n\n  nodeDueForHealthcheck(node, requestNumber = 0): boolean {\n    const isDueForHealthcheck =\n      Date.now() - node.lastAccessTimestamp >\n      this.healthcheckIntervalSeconds * 1000;\n    if (isDueForHealthcheck) {\n      this.logger.debug(\n        `Request #${requestNumber}: Node ${node.index} has exceeded healtcheckIntervalSeconds of ${this.healthcheckIntervalSeconds}. Adding it back into rotation.`,\n      );\n    }\n    return isDueForHealthcheck;\n  }\n\n  initializeMetadataForNodes(): void {\n    if (this.nearestNode != null) {\n      this.nearestNode.index = \"nearestNode\";\n      this.setNodeHealthcheck(this.nearestNode, HEALTHY);\n    }\n\n    this.nodes.forEach((node, i) => {\n      node.index = i;\n      this.setNodeHealthcheck(node, HEALTHY);\n    });\n  }\n\n  setNodeHealthcheck(node, isHealthy): void {\n    node.isHealthy = isHealthy;\n    node.lastAccessTimestamp = Date.now();\n  }\n\n  uriFor(endpoint: string, node): string {\n    if (node.url != null) {\n      return `${node.url}${endpoint}`;\n    }\n    return `${node.protocol}://${node.host}:${node.port}${node.path}${endpoint}`;\n  }\n\n  defaultHeaders(): any {\n    const defaultHeaders = {};\n    if (!this.sendApiKeyAsQueryParam) {\n      defaultHeaders[APIKEYHEADERNAME] = this.apiKey;\n    }\n    defaultHeaders[\"Content-Type\"] = \"application/json\";\n    return defaultHeaders;\n  }\n\n  async timer(seconds): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n  }\n\n  customErrorForResponse(\n    response: AxiosResponse,\n    messageFromServer: string,\n    httpBody?: string,\n  ): TypesenseError {\n    let errorMessage = `Request failed with HTTP code ${response.status}`;\n    if (\n      typeof messageFromServer === \"string\" &&\n      messageFromServer.trim() !== \"\"\n    ) {\n      errorMessage += ` | Server said: ${messageFromServer}`;\n    }\n\n    let error = new TypesenseError(errorMessage, httpBody, response.status);\n\n    if (response.status === 400) {\n      error = new RequestMalformed(errorMessage);\n    } else if (response.status === 401) {\n      error = new RequestUnauthorized(errorMessage);\n    } else if (response.status === 404) {\n      error = new ObjectNotFound(errorMessage);\n    } else if (response.status === 409) {\n      error = new ObjectAlreadyExists(errorMessage);\n    } else if (response.status === 422) {\n      error = new ObjectUnprocessable(errorMessage);\n    } else if (response.status >= 500 && response.status <= 599) {\n      error = new ServerError(errorMessage);\n    } else {\n      error = new HTTPError(errorMessage);\n    }\n\n    return error;\n  }\n}\n","const defaultCacheResponseForSeconds = 2 * 60;\nconst defaultMaxSize = 100;\n\nexport default class RequestWithCache {\n  private responseCache: Map<string, any> = new Map<string, any>();\n  private responsePromiseCache: Map<string, any> = new Map<string, any>();\n\n  clearCache() {\n    this.responseCache = new Map<string, any>();\n    this.responsePromiseCache = new Map<string, any>();\n  }\n\n  // Todo: should probably be passed a callback instead, or an apiCall instance. Types are messy this way\n  async perform<T>(\n    requestContext: any,\n    requestFunction: (...params: any) => unknown,\n    requestFunctionArguments: any[],\n    cacheOptions: CacheOptions\n  ): Promise<T | unknown> {\n    const {\n      cacheResponseForSeconds = defaultCacheResponseForSeconds,\n      maxSize = defaultMaxSize,\n    } = cacheOptions;\n    const isCacheDisabled = cacheResponseForSeconds <= 0 || maxSize <= 0;\n\n    if (isCacheDisabled) {\n      return requestFunction.call(requestContext, ...requestFunctionArguments);\n    }\n\n    const requestFunctionArgumentsJSON = JSON.stringify(\n      requestFunctionArguments\n    );\n    const cacheEntry = this.responseCache.get(requestFunctionArgumentsJSON);\n    const now = Date.now();\n\n    if (cacheEntry) {\n      const isEntryValid =\n        now - cacheEntry.requestTimestamp < cacheResponseForSeconds * 1000;\n      if (isEntryValid) {\n        this.responseCache.delete(requestFunctionArgumentsJSON);\n        this.responseCache.set(requestFunctionArgumentsJSON, cacheEntry);\n        return Promise.resolve(cacheEntry.response);\n      } else {\n        this.responseCache.delete(requestFunctionArgumentsJSON);\n      }\n    }\n\n    const cachePromiseEntry = this.responsePromiseCache.get(\n      requestFunctionArgumentsJSON\n    );\n\n    if (cachePromiseEntry) {\n      const isEntryValid =\n        now - cachePromiseEntry.requestTimestamp <\n        cacheResponseForSeconds * 1000;\n      if (isEntryValid) {\n        this.responsePromiseCache.delete(requestFunctionArgumentsJSON);\n        this.responsePromiseCache.set(\n          requestFunctionArgumentsJSON,\n          cachePromiseEntry\n        );\n        return cachePromiseEntry.responsePromise;\n      } else {\n        this.responsePromiseCache.delete(requestFunctionArgumentsJSON);\n      }\n    }\n\n    const responsePromise = requestFunction.call(\n      requestContext,\n      ...requestFunctionArguments\n    );\n    this.responsePromiseCache.set(requestFunctionArgumentsJSON, {\n      requestTimestamp: now,\n      responsePromise,\n    });\n\n    const response = await responsePromise;\n    this.responseCache.set(requestFunctionArgumentsJSON, {\n      requestTimestamp: now,\n      response,\n    });\n\n    const isCacheOverMaxSize = this.responseCache.size > maxSize;\n    if (isCacheOverMaxSize) {\n      const oldestEntry = this.responseCache.keys().next().value;\n      if (oldestEntry) {\n        this.responseCache.delete(oldestEntry);\n      }\n    }\n    const isResponsePromiseCacheOverMaxSize =\n      this.responsePromiseCache.size > maxSize;\n    if (isResponsePromiseCacheOverMaxSize) {\n      const oldestEntry = this.responsePromiseCache.keys().next().value;\n      if (oldestEntry) {\n        this.responsePromiseCache.delete(oldestEntry);\n      }\n    }\n    return response as T;\n  }\n}\n\ninterface CacheOptions {\n  cacheResponseForSeconds?: number;\n  maxSize?: number;\n}\n","import ApiCall from \"./ApiCall\";\nimport { CollectionFieldSchema, CollectionSchema } from \"./Collection\";\n\nexport interface CollectionCreateSchema {\n  name: string;\n  default_sorting_field?: string;\n  fields?: CollectionFieldSchema[];\n  symbols_to_index?: string[];\n  token_separators?: string[];\n  enable_nested_fields?: boolean;\n  metadata?: object;\n  voice_query_model?: {\n    model_name?: string;\n  };\n}\n\nexport interface CollectionCreateOptions {\n  src_name?: string;\n}\n\nexport interface CollectionsRetrieveOptions {\n  exclude_fields?: string;\n}\n\nconst RESOURCEPATH = \"/collections\";\n\nexport default class Collections {\n  constructor(private apiCall: ApiCall) {}\n\n  async create(\n    schema: CollectionCreateSchema,\n    options: CollectionCreateOptions = {},\n  ): Promise<CollectionSchema> {\n    return this.apiCall.post<CollectionSchema>(RESOURCEPATH, schema, options);\n  }\n\n  async retrieve(\n    options: CollectionsRetrieveOptions = {},\n  ): Promise<CollectionSchema[]> {\n    return this.apiCall.get<CollectionSchema[]>(RESOURCEPATH, options);\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import RequestWithCache from \"./RequestWithCache\";\nimport ApiCall from \"./ApiCall\";\nimport Configuration from \"./Configuration\";\nimport Collections from \"./Collections\";\nimport type {\n  DocumentSchema,\n  SearchableDocuments,\n  SearchOptions,\n  SearchParams,\n  SearchParamsWithPreset,\n  SearchResponse,\n} from \"./Documents\";\nimport { normalizeArrayableParams } from \"./Utils\";\n\nconst RESOURCEPATH = \"/documents\";\n\nexport class SearchOnlyDocuments<T extends DocumentSchema>\n  implements SearchableDocuments<T>\n{\n  protected requestWithCache: RequestWithCache = new RequestWithCache();\n\n  constructor(\n    protected collectionName: string,\n    protected apiCall: ApiCall,\n    protected configuration: Configuration\n  ) {}\n\n  clearCache() {\n    this.requestWithCache.clearCache();\n  }\n\n  async search(\n    searchParameters: SearchParams | SearchParamsWithPreset,\n    {\n      cacheSearchResultsForSeconds = this.configuration\n        .cacheSearchResultsForSeconds,\n      abortSignal = null,\n    }: SearchOptions = {}\n  ): Promise<SearchResponse<T>> {\n    const additionalQueryParams = {};\n    if (this.configuration.useServerSideSearchCache === true) {\n      additionalQueryParams[\"use_cache\"] = true;\n    }\n    const normalizedParams = normalizeArrayableParams(searchParameters);\n    const queryParams = Object.assign(\n      {},\n      additionalQueryParams,\n      normalizedParams,\n    );\n\n    return this.requestWithCache.perform(\n      this.apiCall,\n      this.apiCall.get,\n      [this.endpointPath(\"search\"), queryParams, { abortSignal }],\n      {\n        cacheResponseForSeconds: cacheSearchResultsForSeconds,\n      }\n    ) as Promise<SearchResponse<T>>;\n  }\n\n  protected endpointPath(operation?: string) {\n    return `${Collections.RESOURCEPATH}/${this.collectionName}${RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + operation\n    }`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import type { ReadStream } from \"fs\";\nimport ApiCall from \"./ApiCall\";\nimport Configuration from \"./Configuration\";\nimport { ImportError } from \"./Errors\";\nimport { SearchOnlyDocuments } from \"./SearchOnlyDocuments\";\n\n// Todo: use generic to extract filter_by values\nexport type DeleteQuery =\n  | {\n      truncate?: true;\n    }\n  | {\n      truncate?: never;\n      filter_by?: string;\n      batch_size?: number;\n      ignore_not_found?: boolean;\n    };\n\nexport interface DeleteResponse {\n  num_deleted: number;\n}\n\ninterface ImportResponseSuccess {\n  success: true;\n}\n\nexport interface ImportResponseFail {\n  success: false;\n  error: string;\n  document: DocumentSchema;\n  code: number;\n}\n\nexport type ImportResponse = ImportResponseSuccess | ImportResponseFail;\n\nexport type DocumentSchema = Record<string, any>;\n\nexport interface SearchParamsWithPreset extends Partial<SearchParams> {\n  preset: string;\n}\n\nexport type DropTokensMode = \"right_to_left\" | \"left_to_right\" | \"both_sides:3\";\n\nexport type OperationMode = \"off\" | \"always\" | \"fallback\";\n\nexport type UnionArrayKeys<T> = {\n  [K in keyof T]: T[K] extends undefined\n    ? never\n    : NonNullable<T[K]> extends infer R\n      ? R extends R[]\n        ? never\n        : R extends (infer U)[] | infer U\n          ? U[] extends R\n            ? K\n            : never\n          : never\n      : never;\n}[keyof T] &\n  keyof T;\n\nexport type UnionArraySearchParams = UnionArrayKeys<SearchParams>;\n\nexport type ArraybleParams = {\n  readonly [K in UnionArraySearchParams]: string;\n};\n\nexport type ExtractBaseTypes<T> = {\n  [K in keyof T]: K extends UnionArrayKeys<T>\n    ? T[K] extends (infer U)[] | infer U\n      ? U\n      : T[K]\n    : T[K];\n};\n\nexport const arrayableParams: ArraybleParams = {\n  query_by: \"query_by\",\n  query_by_weights: \"query_by_weights\",\n  facet_by: \"facet_by\",\n  group_by: \"group_by\",\n  include_fields: \"include_fields\",\n  exclude_fields: \"exclude_fields\",\n  highlight_fields: \"highlight_fields\",\n  highlight_full_fields: \"highlight_full_fields\",\n  pinned_hits: \"pinned_hits\",\n  hidden_hits: \"hidden_hits\",\n  infix: \"infix\",\n  override_tags: \"override_tags\",\n  num_typos: \"num_typos\",\n  prefix: \"prefix\",\n  sort_by: \"sort_by\",\n};\n\nexport interface SearchParams {\n  // From https://typesense.org/docs/latest/api/documents.html#arguments\n  // eslint-disable-next-line @typescript-eslint/ban-types -- Can't use `object` here, it needs to intersect with `{}`\n  q?: \"*\" | (string & {});\n  query_by?: string | string[];\n  query_by_weights?: string | number[];\n  prefix?: string | boolean | boolean[]; // default: true\n  filter_by?: string;\n  max_filter_by_candidates?: number; // default: 4\n  enable_synonyms?: boolean; // default: true\n  enable_analytics?: boolean; // default: true\n  filter_curated_hits?: boolean; // default: false\n  enable_lazy_filter?: boolean; // default: false\n  sort_by?: string | string[]; // default: text match desc\n  facet_by?: string | string[];\n  max_facet_values?: number;\n  facet_sample_threshold?: number;\n  facet_sample_percent?: number;\n  facet_query?: string;\n  facet_query_num_typos?: number;\n  facet_return_parent?: string;\n  facet_strategy?: \"exhaustive\" | \"top_values\" | \"automatic\";\n  page?: number; // default: 1\n  per_page?: number; // default: 10, max 250\n  group_by?: string | string[];\n  group_limit?: number; // default:\n  group_missing_values?: boolean;\n  include_fields?: string | string[];\n  exclude_fields?: string | string[];\n  highlight_fields?: string | string[]; // default: all queried fields\n  highlight_full_fields?: string | string[]; // default: all fields\n  highlight_affix_num_tokens?: number; // default: 4\n  highlight_start_tag?: string; // default: <mark>\n  highlight_end_tag?: string; // default: </mark>\n  enable_highlight_v1?: boolean;\n  snippet_threshold?: number; // default: 30\n  num_typos?: string | number | number[]; // default: 2\n  min_len_1typo?: number;\n  min_len_2typo?: number;\n  split_join_tokens?: OperationMode;\n  exhaustive_search?: boolean;\n  drop_tokens_threshold?: number; // default: 10\n  drop_tokens_mode?: DropTokensMode;\n  typo_tokens_threshold?: number; // default: 100\n  pinned_hits?: string | string[];\n  hidden_hits?: string | string[];\n  limit_hits?: number; // default: no limit\n  pre_segmented_query?: boolean;\n  enable_overrides?: boolean;\n  override_tags?: string | string[];\n  prioritize_exact_match?: boolean; // default: true\n  prioritize_token_position?: boolean;\n  prioritize_num_matching_fields?: boolean;\n  search_cutoff_ms?: number;\n  use_cache?: boolean;\n  max_candidates?: number;\n  infix?: OperationMode | OperationMode[];\n  preset?: string;\n  text_match_type?: \"max_score\" | \"max_weight\";\n  vector_query?: string;\n  \"x-typesense-api-key\"?: string;\n  \"x-typesense-user-id\"?: string;\n  offset?: number;\n  limit?: number;\n  stopwords?: string;\n  conversation?: boolean;\n  conversation_model_id?: string;\n  conversation_id?: string;\n  voice_query?: string;\n}\n\ntype SearchResponseHighlightObject = {\n  matched_tokens?: string[];\n  snippet?: string;\n  value?: string;\n};\n\nexport type SearchResponseHighlight<T> = T extends string | number\n  ? SearchResponseHighlightObject\n  : {\n      [TAttribute in keyof T]?: SearchResponseHighlight<T[TAttribute]>;\n    };\n\nexport interface SearchResponseHit<T extends DocumentSchema> {\n  curated?: true;\n  highlights?: [\n    {\n      field: keyof T;\n      snippet?: string;\n      value?: string;\n      snippets?: string[];\n      indices?: number[];\n      matched_tokens: string[][] | string[];\n    },\n  ];\n  highlight: SearchResponseHighlight<T>;\n  document: T;\n  text_match: number;\n  text_match_info?: {\n    best_field_score: `${number}`; // To prevent scores from being truncated by JSON spec\n    best_field_weight: number;\n    fields_matched: number;\n    score: `${number}`; // To prevent scores from being truncated by JSON spec\n    tokens_matched: number;\n  };\n}\n\nexport interface SearchResponseFacetCountSchema<T extends DocumentSchema> {\n  counts: {\n    count: number;\n    highlighted: string;\n    value: string;\n  }[];\n  field_name: keyof T;\n  stats: {\n    avg?: number;\n    max?: number;\n    min?: number;\n    sum?: number;\n  };\n}\n\nexport interface SearchResponseRequestParams {\n  collection_name?: string;\n  q?: string;\n  page?: number;\n  per_page?: number;\n  first_q?: string;\n  voice_query?: {\n    transcribed_query?: string;\n  };\n}\n\n// Todo: we could infer whether this is a grouped response by adding the search params as a generic\nexport interface SearchResponse<T extends DocumentSchema> {\n  facet_counts?: SearchResponseFacetCountSchema<T>[];\n  found: number;\n  found_docs?: number;\n  out_of: number;\n  page: number;\n  request_params: SearchResponseRequestParams;\n  search_time_ms: number;\n  search_cutoff?: boolean;\n  hits?: SearchResponseHit<T>[];\n  grouped_hits?: {\n    group_key: string[];\n    hits: SearchResponseHit<T>[];\n    found?: number;\n  }[];\n  conversation?: {\n    answer: string;\n    conversation_history: {\n      conversation: object[];\n      id: string;\n      last_updated: number;\n      ttl: number;\n    };\n    conversation_id: string;\n    query: string;\n  };\n  error?: string;\n  code?: number;\n}\n\nexport interface DocumentWriteParameters {\n  dirty_values?: \"coerce_or_reject\" | \"coerce_or_drop\" | \"drop\" | \"reject\";\n  action?: \"create\" | \"update\" | \"upsert\" | \"emplace\";\n}\n\nexport interface UpdateByFilterParameters {\n  filter_by?: string;\n}\n\nexport interface UpdateByFilterResponse {\n  num_updated: number;\n}\n\nexport interface DocumentImportParameters extends DocumentWriteParameters {\n  batch_size?: number;\n  return_doc?: boolean;\n  return_id?: boolean;\n}\n\nexport interface DocumentsExportParameters {\n  filter_by?: string;\n  include_fields?: string;\n  exclude_fields?: string;\n}\n\nexport interface SearchableDocuments<T extends DocumentSchema> {\n  search(\n    searchParameters: SearchParams | SearchParamsWithPreset,\n    options: SearchOptions,\n  ): Promise<SearchResponse<T>>;\n  clearCache(): void;\n}\n\nexport interface WriteableDocuments<T> {\n  create(document: T, options: DocumentWriteParameters): Promise<T>;\n  upsert(document: T, options: DocumentWriteParameters): Promise<T>;\n  update(document: T, options: DocumentWriteParameters): Promise<T>;\n  delete(query: DeleteQuery): Promise<DeleteResponse>;\n  import(\n    documents: T[] | string,\n    options: DocumentWriteParameters,\n  ): Promise<string | ImportResponse[]>;\n  export(options: DocumentsExportParameters): Promise<string>;\n}\n\nexport interface SearchOptions {\n  cacheSearchResultsForSeconds?: number;\n  abortSignal?: AbortSignal | null;\n}\n\nconst isNodeJSEnvironment =\n  typeof process !== \"undefined\" &&\n  process.versions != null &&\n  process.versions.node != null;\n\nexport default class Documents<T extends DocumentSchema = object>\n  extends SearchOnlyDocuments<T>\n  implements WriteableDocuments<T>\n{\n  constructor(\n    collectionName: string,\n    apiCall: ApiCall,\n    configuration: Configuration,\n  ) {\n    super(collectionName, apiCall, configuration);\n  }\n\n  async create(document: T, options: DocumentWriteParameters = {}): Promise<T> {\n    if (!document) throw new Error(\"No document provided\");\n    return this.apiCall.post<T>(this.endpointPath(), document, options);\n  }\n\n  async upsert(document: T, options: DocumentWriteParameters = {}): Promise<T> {\n    if (!document) throw new Error(\"No document provided\");\n    return this.apiCall.post<T>(\n      this.endpointPath(),\n      document,\n      Object.assign({}, options, { action: \"upsert\" }),\n    );\n  }\n\n  async update(\n    document: T,\n    options: UpdateByFilterParameters,\n  ): Promise<UpdateByFilterResponse>;\n  async update(document: T, options: DocumentWriteParameters): Promise<T>;\n  async update(\n    document: T,\n    options: DocumentWriteParameters | UpdateByFilterParameters = {},\n  ): Promise<UpdateByFilterResponse | T> {\n    if (!document) throw new Error(\"No document provided\");\n\n    if (options[\"filter_by\"] != null) {\n      return this.apiCall.patch<T>(\n        this.endpointPath(),\n        document,\n        Object.assign({}, options),\n      );\n    } else {\n      return this.apiCall.post<T>(\n        this.endpointPath(),\n        document,\n        Object.assign({}, options, { action: \"update\" }),\n      );\n    }\n  }\n\n  async delete(\n    query: DeleteQuery = {} as DeleteQuery,\n  ): Promise<DeleteResponse> {\n    return this.apiCall.delete<DeleteResponse>(this.endpointPath(), query);\n  }\n\n  async createMany(documents: T[], options: DocumentImportParameters = {}) {\n    this.configuration.logger.warn(\n      \"createMany is deprecated and will be removed in a future version. Use import instead, which now takes both an array of documents or a JSONL string of documents\",\n    );\n    return this.import(documents, options);\n  }\n\n  /**\n   * Import a set of documents in a batch.\n   * @param {string|Array} documents - Can be a JSONL string of documents or an array of document objects.\n   * @param options\n   * @return {string|Array} Returns a JSONL string if the input was a JSONL string, otherwise it returns an array of results.\n   */\n  async import(\n    documents: string,\n    options?: DocumentImportParameters,\n  ): Promise<string>;\n  async import(\n    documents: T[],\n    options?: DocumentImportParameters,\n  ): Promise<ImportResponse[]>;\n  async import(\n    documents: T[] | string,\n    options: DocumentImportParameters = {},\n  ): Promise<string | ImportResponse[]> {\n    let documentsInJSONLFormat;\n    if (Array.isArray(documents)) {\n      try {\n        documentsInJSONLFormat = documents\n          .map((document) => JSON.stringify(document))\n          .join(\"\\n\");\n      } catch (error: any) {\n        // if rangeerror, throw custom error message\n        if (\n          error instanceof RangeError &&\n          error.message.includes(\"Too many properties to enumerate\")\n        ) {\n          throw new Error(`${error}\n          It looks like you have reached a Node.js limit that restricts the number of keys in an Object: https://stackoverflow.com/questions/9282869/are-there-limits-to-the-number-of-properties-in-a-javascript-object\n\n         Please try reducing the number of keys in your document, or using CURL to import your data.\n          `);\n        }\n\n        // else, throw the non-range error anyways\n        throw new Error(error);\n      }\n    } else {\n      documentsInJSONLFormat = documents;\n    }\n\n    const resultsInJSONLFormat = await this.apiCall.performRequest<string>(\n      \"post\",\n      this.endpointPath(\"import\"),\n      {\n        queryParameters: options,\n        bodyParameters: documentsInJSONLFormat,\n        additionalHeaders: { \"Content-Type\": \"text/plain\" },\n        skipConnectionTimeout: true, // We never want to client-side-timeout on an import and retry, since imports are syncronous and we want to let them take as long as it takes to complete fully\n        enableKeepAlive: isNodeJSEnvironment ? true : false, // This is to prevent ECONNRESET socket hang up errors. Reference: https://github.com/axios/axios/issues/2936#issuecomment-779439991\n      },\n    );\n\n    if (Array.isArray(documents)) {\n      const resultsInJSONFormat = resultsInJSONLFormat\n        .split(\"\\n\")\n        .map((r) => JSON.parse(r)) as ImportResponse[];\n      const failedItems = resultsInJSONFormat.filter(\n        (r) => r.success === false,\n      );\n      if (failedItems.length > 0) {\n        throw new ImportError(\n          `${\n            resultsInJSONFormat.length - failedItems.length\n          } documents imported successfully, ${\n            failedItems.length\n          } documents failed during import. Use \\`error.importResults\\` from the raised exception to get a detailed error reason for each document.`,\n          resultsInJSONFormat,\n          {\n            documentsInJSONLFormat,\n            options,\n            failedItems,\n            successCount: resultsInJSONFormat.length - failedItems.length,\n          },\n        );\n      } else {\n        return resultsInJSONFormat;\n      }\n    } else {\n      return resultsInJSONLFormat as string;\n    }\n  }\n  /**\n   * Imports documents from a NodeJS readable stream of JSONL.\n   */\n  async importStream(\n    readableStream: ReadStream,\n    options: DocumentImportParameters = {},\n  ): Promise<ImportResponse[]> {\n    const resultsInJSONLFormat = await this.apiCall.performRequest<string>(\n      \"post\",\n      this.endpointPath(\"import\"),\n      {\n        queryParameters: options,\n        bodyParameters: readableStream,\n        additionalHeaders: { \"Content-Type\": \"text/plain\" },\n        skipConnectionTimeout: true, // We never want to client-side-timeout on an import and retry, since imports are syncronous and we want to let them take as long as it takes to complete fully\n        enableKeepAlive: isNodeJSEnvironment ? true : false, // This is to prevent ECONNRESET socket hang up errors. Reference: https://github.com/axios/axios/issues/2936#issuecomment-779439991\n      },\n    );\n\n    const resultsInJSONFormat = resultsInJSONLFormat\n      .split(\"\\n\")\n      .map((r) => JSON.parse(r)) as ImportResponse[];\n    const failedItems = resultsInJSONFormat.filter((r) => r.success === false);\n    if (failedItems.length > 0) {\n      throw new ImportError(\n        `${\n          resultsInJSONFormat.length - failedItems.length\n        } documents imported successfully, ${\n          failedItems.length\n        } documents failed during import. Use \\`error.importResults\\` from the raised exception to get a detailed error reason for each document.`,\n        resultsInJSONFormat,\n        {\n          documentsInJSONLFormat: readableStream,\n          options,\n          failedItems,\n          successCount: resultsInJSONFormat.length - failedItems.length,\n        },\n      );\n    } else {\n      return resultsInJSONFormat;\n    }\n  }\n\n  /**\n   * Returns a JSONL string for all the documents in this collection\n   */\n  async export(options: DocumentsExportParameters = {}): Promise<string> {\n    return this.apiCall.get<string>(this.endpointPath(\"export\"), options);\n  }\n\n  /**\n   * Returns a NodeJS readable stream of JSONL for all the documents in this collection.\n   */\n  async exportStream(\n    options: DocumentsExportParameters = {},\n  ): Promise<ReadStream> {\n    return this.apiCall.get<ReadStream>(this.endpointPath(\"export\"), options, {\n      responseType: \"stream\",\n    });\n  }\n}\n","import { arrayableParams } from \"./Documents\";\nimport type {\n  UnionArrayKeys,\n  ExtractBaseTypes,\n  SearchParams,\n} from \"./Documents\";\n\nfunction hasNoArrayValues<T extends SearchParams>(\n  params: T | ExtractBaseTypes<T>,\n): params is ExtractBaseTypes<T> {\n  return Object.keys(arrayableParams)\n    .filter((key) => params[key] !== undefined)\n    .every((key) => isNonArrayValue(params[key]));\n}\n\nexport function normalizeArrayableParams<T extends SearchParams>(\n  params: T,\n): Prettify<ExtractBaseTypes<T>> {\n  const result = { ...params };\n\n  const transformedValues = Object.keys(arrayableParams)\n    .filter((key) => Array.isArray(result[key]))\n    .map((key) => {\n      result[key] = result[key].join(\",\");\n      return key;\n    });\n\n  if (!transformedValues.length && hasNoArrayValues(result)) {\n    return result;\n  }\n\n  if (!hasNoArrayValues(result)) {\n    throw new Error(\n      `Failed to normalize arrayable params: ${JSON.stringify(result)}`,\n    );\n  }\n\n  return result;\n}\n\nfunction isNonArrayValue<T extends SearchParams, K extends UnionArrayKeys<T>>(\n  value: T[K] | ExtractBaseTypes<T>[K],\n): value is ExtractBaseTypes<T>[K] {\n  return !Array.isArray(value);\n}\n\ntype Prettify<T> = {\n  [K in keyof T]: T[K];\n  // eslint-disable-next-line @typescript-eslint/ban-types\n} & {};\n","import ApiCall from \"./ApiCall\";\nimport Configuration from \"./Configuration\";\nimport RequestWithCache from \"./RequestWithCache\";\nimport {\n  DocumentSchema,\n  SearchParams,\n  SearchParamsWithPreset,\n  SearchResponse,\n} from \"./Documents\";\nimport { normalizeArrayableParams } from \"./Utils\";\n\nconst RESOURCEPATH = \"/multi_search\";\n\nexport interface MultiSearchRequestSchema extends SearchParams {\n  collection?: string;\n  rerank_hybrid_matches?: boolean;\n  \"x-typesense-api-key\"?: string;\n}\n\nexport interface MultiSearchRequestWithPresetSchema\n  extends SearchParamsWithPreset {\n  collection?: string;\n  \"x-typesense-api-key\"?: string;\n}\n\nexport interface MultiSearchRequestsSchema {\n  union?: true;\n  searches: (MultiSearchRequestSchema | MultiSearchRequestWithPresetSchema)[];\n}\n\nexport interface MultiSearchResponse<T extends DocumentSchema[] = []> {\n  results: { [Index in keyof T]: SearchResponse<T[Index]> } & {\n    length: T[\"length\"];\n  };\n}\n\nexport default class MultiSearch {\n  private requestWithCache: RequestWithCache;\n\n  constructor(\n    private apiCall: ApiCall,\n    private configuration: Configuration,\n    private useTextContentType: boolean = false\n  ) {\n    this.requestWithCache = new RequestWithCache();\n  }\n\n  clearCache() {\n    this.requestWithCache.clearCache();\n  }\n\n  async perform<T extends DocumentSchema[] = []>(\n    searchRequests: MultiSearchRequestsSchema,\n    commonParams: Partial<MultiSearchRequestSchema> = {},\n    {\n      cacheSearchResultsForSeconds = this.configuration\n        .cacheSearchResultsForSeconds,\n    }: { cacheSearchResultsForSeconds?: number } = {}\n  ): Promise<MultiSearchResponse<T>> {\n    const additionalHeaders = {};\n    if (this.useTextContentType) {\n      additionalHeaders[\"content-type\"] = \"text/plain\";\n    }\n\n    const additionalQueryParams = {};\n    if (this.configuration.useServerSideSearchCache === true) {\n      additionalQueryParams[\"use_cache\"] = true;\n    }\n\n    const queryParams = { ...commonParams, ...additionalQueryParams };\n\n    const normalizedSearchRequests = {\n      searches: searchRequests.searches.map(normalizeArrayableParams),\n    };\n\n    const normalizedQueryParams = normalizeArrayableParams(queryParams);\n\n    return this.requestWithCache.perform(\n      this.apiCall,\n      this.apiCall.post,\n      [\n        RESOURCEPATH,\n        normalizedSearchRequests,\n        normalizedQueryParams,\n        additionalHeaders,\n      ],\n      { cacheResponseForSeconds: cacheSearchResultsForSeconds },\n    ) as Promise<MultiSearchResponse<T>>;\n  }\n}\n","import { DocumentSchema, SearchableDocuments } from \"./Documents\";\nimport ApiCall from \"./ApiCall\";\nimport { SearchOnlyDocuments } from \"./SearchOnlyDocuments\";\n\nexport class SearchOnlyCollection<T extends DocumentSchema = object> {\n  private readonly _documents: SearchableDocuments<T>;\n\n  constructor(\n    private readonly name: string,\n    private readonly apiCall: ApiCall,\n    private readonly configuration: any\n  ) {\n    this._documents = new SearchOnlyDocuments(\n      this.name,\n      this.apiCall,\n      this.configuration\n    );\n  }\n\n  documents(): SearchableDocuments<T> {\n    return this._documents;\n  }\n}\n","import Configuration, { ConfigurationOptions } from \"./Configuration\";\nimport ApiCall from \"./ApiCall\";\nimport MultiSearch from \"./MultiSearch\";\nimport { DocumentSchema } from \"./Documents\";\nimport { SearchOnlyCollection } from \"./SearchOnlyCollection\";\n\nexport default class SearchClient {\n  public readonly multiSearch: MultiSearch;\n  private readonly configuration: Configuration;\n  private readonly apiCall: ApiCall;\n  private readonly individualCollections: Record<string, SearchOnlyCollection>;\n\n  constructor(options: ConfigurationOptions) {\n    options.sendApiKeyAsQueryParam = options.sendApiKeyAsQueryParam ?? true;\n    if (\n      options.sendApiKeyAsQueryParam === true &&\n      (options.apiKey || \"\").length > 2000\n    ) {\n      console.warn(\n        \"[typesense] API Key is longer than 2000 characters which is over the allowed limit, so disabling sending it as a query parameter.\"\n      );\n      options.sendApiKeyAsQueryParam = false;\n    }\n\n    this.configuration = new Configuration(options);\n    this.apiCall = new ApiCall(this.configuration);\n    this.multiSearch = new MultiSearch(this.apiCall, this.configuration, true);\n    this.individualCollections = {};\n  }\n\n  clearCache() {\n    this.multiSearch.clearCache();\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Object.entries(this.individualCollections).forEach(([_, collection]) => {\n      collection.documents().clearCache();\n    });\n  }\n\n  collections<TDocumentSchema extends DocumentSchema = object>(\n    collectionName: string\n  ): SearchOnlyCollection<TDocumentSchema> | SearchOnlyCollection {\n    if (!collectionName) {\n      throw new Error(\n        \"Typesense.SearchClient only supports search operations, so the collectionName that needs to \" +\n          \"be searched must be specified. Use Typesense.Client if you need to access the collection object.\"\n      );\n    } else {\n      if (this.individualCollections[collectionName] === undefined) {\n        this.individualCollections[collectionName] = new SearchOnlyCollection(\n          collectionName,\n          this.apiCall,\n          this.configuration\n        );\n      }\n      return this.individualCollections[collectionName];\n    }\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport { OverrideSchema } from \"./Override\";\n\nconst RESOURCEPATH = \"/overrides\";\n\nexport interface OverrideRuleQuerySchema {\n  query?: string;\n  match?: \"exact\" | \"contains\";\n}\n\nexport interface OverrideRuleFilterSchema {\n  filter_by?: string;\n}\n\nexport interface OverrideRuleTagsSchema {\n  tags?: string[];\n}\n\nexport interface OverrideCreateSchema {\n  rule: OverrideRuleQuerySchema &\n    OverrideRuleFilterSchema &\n    OverrideRuleTagsSchema;\n  filter_by?: string;\n  sort_by?: string;\n  remove_matched_tokens?: boolean;\n  replace_query?: string;\n  includes?: Array<{\n    id: string;\n    position: number;\n  }>;\n  excludes?: Array<{ id: string }>;\n  filter_curated_hits?: boolean;\n  effective_from_ts?: number;\n  effective_to_ts?: number;\n  stop_processing?: boolean;\n  metadata?: object;\n}\n\nexport interface OverridesRetrieveSchema {\n  overrides: OverrideSchema[];\n}\n\nexport default class Overrides {\n  constructor(\n    private collectionName: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async upsert(\n    overrideId: string,\n    params: OverrideCreateSchema,\n  ): Promise<OverrideSchema> {\n    return this.apiCall.put<OverrideSchema>(\n      this.endpointPath(overrideId),\n      params,\n    );\n  }\n\n  async retrieve(): Promise<OverridesRetrieveSchema> {\n    return this.apiCall.get<OverridesRetrieveSchema>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${Collections.RESOURCEPATH}/${this.collectionName}${\n      Overrides.RESOURCEPATH\n    }${operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)}`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport Overrides, { OverrideCreateSchema } from \"./Overrides\";\n\nexport interface OverrideSchema extends OverrideCreateSchema {\n  id: string;\n}\n\nexport interface OverrideDeleteSchema {\n  id: string;\n}\n\nexport default class Override {\n  constructor(\n    private collectionName: string,\n    private overrideId: string,\n    private apiCall: ApiCall\n  ) {}\n\n  async retrieve(): Promise<OverrideSchema> {\n    return this.apiCall.get<OverrideSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<OverrideDeleteSchema> {\n    return this.apiCall.delete<OverrideDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.collectionName)}${Overrides.RESOURCEPATH}/${encodeURIComponent(this.overrideId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport { SynonymSchema } from \"./Synonym\";\n\nconst RESOURCEPATH = \"/synonyms\";\n\nexport interface SynonymCreateSchema {\n  synonyms: string[];\n  root?: string;\n  locale?: string;\n  symbols_to_index?: string[];\n}\n\nexport interface SynonymsRetrieveSchema {\n  synonyms: SynonymSchema[];\n}\n\nexport default class Synonyms {\n  constructor(private collectionName: string, private apiCall: ApiCall) {}\n\n  async upsert(\n    synonymId: string,\n    params: SynonymCreateSchema\n  ): Promise<SynonymSchema> {\n    return this.apiCall.put<SynonymSchema>(\n      this.endpointPath(synonymId),\n      params\n    );\n  }\n\n  async retrieve(): Promise<SynonymsRetrieveSchema> {\n    return this.apiCall.get<SynonymsRetrieveSchema>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string) {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.collectionName)}${\n      Synonyms.RESOURCEPATH\n    }${operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)}`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport Synonyms, { SynonymCreateSchema } from \"./Synonyms\";\n\nexport interface SynonymSchema extends SynonymCreateSchema {\n  id: string;\n}\n\nexport interface SynonymDeleteSchema {\n  id: string;\n}\n\nexport default class Synonym {\n  constructor(\n    private collectionName: string,\n    private synonymId: string,\n    private apiCall: ApiCall\n  ) {}\n\n  async retrieve(): Promise<SynonymSchema> {\n    return this.apiCall.get<SynonymSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<SynonymDeleteSchema> {\n    return this.apiCall.delete<SynonymDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.collectionName)}${Synonyms.RESOURCEPATH}/${encodeURIComponent(this.synonymId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport Documents, {\n  DeleteQuery,\n  DocumentSchema,\n  DocumentWriteParameters,\n} from \"./Documents\";\n\nexport class Document<T extends DocumentSchema = object> {\n  constructor(\n    private collectionName: string,\n    private documentId: string,\n    private apiCall: ApiCall\n  ) {}\n\n  async retrieve(): Promise<T> {\n    return this.apiCall.get<T>(this.endpointPath());\n  }\n\n  async delete(options?: DeleteQuery): Promise<T> {\n    return this.apiCall.delete<T>(this.endpointPath(), options);\n  }\n\n  async update(\n    partialDocument: Partial<T>,\n    options: DocumentWriteParameters = {}\n  ): Promise<T> {\n    return this.apiCall.patch<T>(this.endpointPath(), partialDocument, options);\n  }\n\n  private endpointPath(): string {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.collectionName)}${Documents.RESOURCEPATH}/${encodeURIComponent(this.documentId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections, { CollectionCreateSchema } from \"./Collections\";\nimport Documents, { DocumentSchema } from \"./Documents\";\nimport { ObjectNotFound } from \"./Errors\";\nimport Overrides from \"./Overrides\";\nimport Override from \"./Override\";\nimport Synonyms from \"./Synonyms\";\nimport Synonym from \"./Synonym\";\nimport { Document } from \"./Document\";\n\nexport type FieldType =\n  | \"string\"\n  | \"int32\"\n  | \"int64\"\n  | \"float\"\n  | \"bool\"\n  | \"geopoint\"\n  | \"geopolygon\"\n  | \"geopoint[]\"\n  | \"string[]\"\n  | \"int32[]\"\n  | \"int64[]\"\n  | \"float[]\"\n  | \"bool[]\"\n  | \"object\"\n  | \"object[]\"\n  | \"auto\"\n  | \"string*\"\n  | \"image\";\n\nexport interface CollectionFieldSchema\n  extends Pick<\n    CollectionCreateSchema,\n    \"token_separators\" | \"symbols_to_index\"\n  > {\n  name: string;\n  type: FieldType;\n  optional?: boolean;\n  facet?: boolean;\n  index?: boolean;\n  sort?: boolean;\n  locale?: string;\n  infix?: boolean;\n  stem?: boolean;\n  num_dim?: number;\n  store?: boolean;\n  range_index?: boolean;\n  [t: string]: unknown;\n}\n\nexport interface CollectionSchema extends CollectionCreateSchema {\n  created_at: number;\n  num_documents: number;\n  num_memory_shards: number;\n}\n\nexport interface CollectionDropFieldSchema {\n  name: string;\n  drop: true;\n}\n\nexport interface CollectionUpdateSchema\n  extends Partial<Omit<CollectionCreateSchema, \"name\" | \"fields\">> {\n  fields?: (CollectionFieldSchema | CollectionDropFieldSchema)[];\n}\n\nexport interface CollectionDeleteOptions {\n  compact_store?: boolean;\n}\n\nexport default class Collection<T extends DocumentSchema = object> {\n  private readonly _documents: Documents<T>;\n  private individualDocuments: Record<string, Document<T>> = {};\n  private readonly _overrides: Overrides;\n  private individualOverrides: Record<string, Override> = {};\n  private readonly _synonyms: Synonyms;\n  private individualSynonyms: Record<string, Synonym> = {};\n\n  constructor(\n    private readonly name: string,\n    private readonly apiCall: ApiCall,\n    private readonly configuration: any,\n  ) {\n    this.name = name;\n    this.apiCall = apiCall;\n    this.configuration = configuration;\n\n    this._documents = new Documents(\n      this.name,\n      this.apiCall,\n      this.configuration,\n    );\n    this._overrides = new Overrides(this.name, this.apiCall);\n    this._synonyms = new Synonyms(this.name, this.apiCall);\n  }\n\n  async retrieve(): Promise<CollectionSchema> {\n    return this.apiCall.get<CollectionSchema>(this.endpointPath());\n  }\n\n  async update(schema: CollectionUpdateSchema): Promise<CollectionSchema> {\n    return this.apiCall.patch<CollectionSchema>(this.endpointPath(), schema);\n  }\n\n  async delete(\n    options: CollectionDeleteOptions = {},\n  ): Promise<CollectionSchema> {\n    return this.apiCall.delete<CollectionSchema>(this.endpointPath(), options);\n  }\n\n  async exists(): Promise<boolean> {\n    try {\n      await this.retrieve();\n      return true;\n    } catch (e) {\n      if (e instanceof ObjectNotFound) return false;\n      throw e;\n    }\n  }\n\n  documents(): Documents<T>;\n  documents(documentId: string): Document<T>;\n  documents(documentId?: string): Document<T> | Documents<T> {\n    if (!documentId) {\n      return this._documents;\n    } else {\n      if (this.individualDocuments[documentId] === undefined) {\n        this.individualDocuments[documentId] = new Document(\n          this.name,\n          documentId,\n          this.apiCall,\n        );\n      }\n      return this.individualDocuments[documentId];\n    }\n  }\n\n  overrides(): Overrides;\n  overrides(overrideId: string): Override;\n  overrides(overrideId?: string): Overrides | Override {\n    if (overrideId === undefined) {\n      return this._overrides;\n    } else {\n      if (this.individualOverrides[overrideId] === undefined) {\n        this.individualOverrides[overrideId] = new Override(\n          this.name,\n          overrideId,\n          this.apiCall,\n        );\n      }\n      return this.individualOverrides[overrideId];\n    }\n  }\n\n  synonyms(): Synonyms;\n  synonyms(synonymId: string): Synonym;\n  synonyms(synonymId?: string): Synonyms | Synonym {\n    if (synonymId === undefined) {\n      return this._synonyms;\n    } else {\n      if (this.individualSynonyms[synonymId] === undefined) {\n        this.individualSynonyms[synonymId] = new Synonym(\n          this.name,\n          synonymId,\n          this.apiCall,\n        );\n      }\n      return this.individualSynonyms[synonymId];\n    }\n  }\n\n  private endpointPath(): string {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.name)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/aliases\";\n\nexport interface CollectionAliasCreateSchema {\n  collection_name: string;\n}\n\nexport interface CollectionAliasSchema extends CollectionAliasCreateSchema {\n  name: string;\n}\n\nexport interface CollectionAliasesResponseSchema {\n  aliases: CollectionAliasSchema[];\n}\n\nexport default class Aliases {\n  constructor(private apiCall: ApiCall) {}\n\n  async upsert(\n    name: string,\n    mapping: CollectionAliasCreateSchema\n  ): Promise<CollectionAliasSchema> {\n    return this.apiCall.put<CollectionAliasSchema>(\n      this.endpointPath(name),\n      mapping\n    );\n  }\n\n  async retrieve(): Promise<CollectionAliasesResponseSchema> {\n    return this.apiCall.get<CollectionAliasesResponseSchema>(RESOURCEPATH);\n  }\n\n  private endpointPath(aliasName): string {\n    return `${Aliases.RESOURCEPATH}/${encodeURIComponent(aliasName)}`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import Aliases, { CollectionAliasSchema } from \"./Aliases\";\nimport ApiCall from \"./ApiCall\";\n\nexport default class Alias {\n  constructor(private name: string, private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<CollectionAliasSchema> {\n    return this.apiCall.get<CollectionAliasSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<CollectionAliasSchema> {\n    return this.apiCall.delete<CollectionAliasSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Aliases.RESOURCEPATH}/${encodeURIComponent(this.name)}`;\n  }\n}\n","import { createHmac } from \"crypto\";\nimport ApiCall from \"./ApiCall\";\nimport { KeyCreateSchema, KeySchema } from \"./Key\";\nimport { SearchParams } from \"./Documents\";\nimport { normalizeArrayableParams } from \"./Utils\";\n\nconst RESOURCEPATH = \"/keys\";\n\nexport interface KeysRetrieveSchema {\n  keys: KeySchema[];\n}\n\nexport interface GenerateScopedSearchKeyParams extends Partial<SearchParams> {\n  expires_at?: number;\n  cache_ttl?: number;\n  limit_multi_searches?: number;\n}\n\nexport default class Keys {\n  constructor(private apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async create(params: KeyCreateSchema): Promise<KeySchema> {\n    return this.apiCall.post<KeySchema>(Keys.RESOURCEPATH, params);\n  }\n\n  async retrieve(): Promise<KeysRetrieveSchema> {\n    return this.apiCall.get<KeysRetrieveSchema>(RESOURCEPATH);\n  }\n\n  generateScopedSearchKey(\n    searchKey: string,\n    parameters: GenerateScopedSearchKeyParams\n  ): string {\n    // Note: only a key generated with the `documents:search` action will be\n    // accepted by the server, when usined with the search endpoint.\n    const normalizedParams = normalizeArrayableParams(parameters);\n    const paramsJSON = JSON.stringify(normalizedParams);\n    const digest = Buffer.from(\n      createHmac(\"sha256\", searchKey).update(paramsJSON).digest(\"base64\")\n    );\n    const keyPrefix = searchKey.substr(0, 4);\n    const rawScopedKey = `${digest}${keyPrefix}${paramsJSON}`;\n\n    return Buffer.from(rawScopedKey).toString(\"base64\");\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Keys from \"./Keys\";\n\nexport interface KeyCreateSchema {\n  actions: string[];\n  collections: string[];\n  description?: string;\n  value?: string;\n  value_prefix?: string;\n  expires_at?: number;\n  autodelete?: boolean;\n}\n\nexport interface KeyDeleteSchema {\n  id: number;\n}\n\nexport interface KeySchema extends KeyCreateSchema {\n  id: number;\n}\n\nexport default class Key {\n  constructor(\n    private id: number,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<KeySchema> {\n    return this.apiCall.get<KeySchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<KeyDeleteSchema> {\n    return this.apiCall.delete<KeyDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Keys.RESOURCEPATH}/${encodeURIComponent(this.id)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/debug\";\n\nexport interface DebugResponseSchema {\n  state: number;\n  version: string;\n}\n\nexport default class Debug {\n  constructor(private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<DebugResponseSchema> {\n    return this.apiCall.get<DebugResponseSchema>(RESOURCEPATH);\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/metrics.json\";\n\nexport interface MetricsResponse {\n  [key: `system_cpu${number}_active_percentage`]: string;\n  system_cpu_active_percentage: string;\n  system_disk_total_bytes: string;\n  system_disk_used_bytes: string;\n  system_memory_total_bytes: string;\n  system_memory_total_swap_bytes?: string;\n  system_memory_used_bytes: string;\n  system_memory_used_swap_bytes?: string;\n  system_network_received_bytes: string;\n  system_network_sent_bytes: string;\n  typesense_memory_active_bytes: string;\n  typesense_memory_allocated_bytes: string;\n  typesense_memory_fragmentation_ratio: string;\n  typesense_memory_mapped_bytes: string;\n  typesense_memory_metadata_bytes: string;\n  typesense_memory_resident_bytes: string;\n  typesense_memory_retained_bytes: string;\n}\n\nexport default class Metrics {\n  constructor(private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<MetricsResponse> {\n    return this.apiCall.get(RESOURCEPATH);\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/stats.json\";\n\nexport interface EndpointStats {\n  [endpoint: string]: number;\n}\n\nexport interface StatsResponse {\n  delete_latency_ms?: number;\n  delete_requests_per_second?: number;\n  import_latency_ms?: number;\n  import_requests_per_second?: number;\n  latency_ms?: EndpointStats;\n  overloaded_requests_per_second?: number;\n  pending_write_batches?: number;\n  requests_per_second?: EndpointStats;\n  search_latency_ms?: number;\n  search_requests_per_second?: number;\n  total_requests_per_second?: number;\n  write_latency_ms?: number;\n  write_requests_per_second?: number;\n}\n\nexport default class Metrics {\n  constructor(private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<StatsResponse> {\n    return this.apiCall.get(RESOURCEPATH);\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/health\";\n\nexport interface HealthResponse {\n  ok: boolean;\n}\n\nexport default class Health {\n  constructor(private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<HealthResponse> {\n    return this.apiCall.get<HealthResponse>(RESOURCEPATH);\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/operations\";\n\nexport default class Operations {\n  constructor(private apiCall: ApiCall) {}\n\n  async perform(\n    operationName:\n      | \"vote\"\n      | \"snapshot\"\n      | \"cache/clear\"\n      | \"schema_changes\"\n      // eslint-disable-next-line @typescript-eslint/ban-types -- Can't use `object` here, it needs to intersect with `{}`\n      | (string & {}),\n    queryParameters: Record<string, any> = {},\n  ): Promise<any> {\n    return this.apiCall.post(\n      `${RESOURCEPATH}/${operationName}`,\n      {},\n      queryParameters,\n    );\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport { PresetSchema } from \"./Preset\";\nimport { SearchParams } from \"./Documents\";\nimport { MultiSearchRequestsSchema } from \"./MultiSearch\";\nimport { normalizeArrayableParams } from \"./Utils\";\n\nconst RESOURCEPATH = \"/presets\";\n\nexport interface PresetCreateSchema {\n  value: SearchParams | MultiSearchRequestsSchema;\n}\n\nexport interface PresetsRetrieveSchema {\n  presets: PresetSchema[];\n}\n\nexport default class Presets {\n  constructor(private apiCall: ApiCall) {}\n\n  async upsert(\n    presetId: string,\n    params: PresetCreateSchema,\n  ): Promise<PresetSchema> {\n    if (typeof params.value === \"object\" && \"searches\" in params.value) {\n      const normalizedParams = params.value.searches.map((search) =>\n        normalizeArrayableParams(search),\n      );\n\n      return this.apiCall.put<PresetSchema>(this.endpointPath(presetId), {\n        value: { searches: normalizedParams },\n      });\n    }\n    const normalizedParams = normalizeArrayableParams(params.value);\n\n    return this.apiCall.put<PresetSchema>(this.endpointPath(presetId), {\n      value: normalizedParams,\n    });\n  }\n\n  async retrieve(): Promise<PresetsRetrieveSchema> {\n    return this.apiCall.get<PresetsRetrieveSchema>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${Presets.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Presets, { PresetCreateSchema } from \"./Presets\";\n\nexport interface PresetSchema extends PresetCreateSchema {\n  name: string;\n}\n\nexport interface PresetDeleteSchema {\n  name: string;\n}\n\nexport default class Preset {\n  constructor(private presetId: string, private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<PresetSchema> {\n    return this.apiCall.get<PresetSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<PresetDeleteSchema> {\n    return this.apiCall.delete<PresetDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Presets.RESOURCEPATH}/${encodeURIComponent(this.presetId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport {\n  AnalyticsRuleCreateSchema,\n  AnalyticsRuleSchema,\n} from \"./AnalyticsRule\";\n\nexport interface AnalyticsRulesRetrieveSchema {\n  rules: AnalyticsRuleSchema[];\n}\n\nconst RESOURCEPATH = \"/analytics/rules\";\n\nexport default class AnalyticsRules {\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async upsert(\n    name: string,\n    params: AnalyticsRuleCreateSchema\n  ): Promise<AnalyticsRuleCreateSchema> {\n    return this.apiCall.put<AnalyticsRuleCreateSchema>(\n      this.endpointPath(name),\n      params\n    );\n  }\n\n  async retrieve(): Promise<AnalyticsRulesRetrieveSchema> {\n    return this.apiCall.get<AnalyticsRulesRetrieveSchema>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${AnalyticsRules.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport AnalyticsRules from \"./AnalyticsRules\";\n\nexport interface AnalyticsRuleCreateSchema {\n  type: \"popular_queries\" | \"nohits_queries\" | \"counter\";\n  params: {\n    enable_auto_aggregation?: boolean;\n    source: {\n      collections: string[];\n      events?: Array<{\n        type: string;\n        weight: number;\n        name: string;\n      }>;\n    };\n    expand_query?: boolean;\n    destination: {\n      collection: string;\n      counter_field?: string;\n    };\n    limit?: number;\n  };\n}\n\nexport interface AnalyticsRuleDeleteSchema {\n  name: string;\n}\n\nexport interface AnalyticsRuleSchema extends AnalyticsRuleCreateSchema {\n  name: string;\n}\n\nexport default class AnalyticsRule {\n  constructor(\n    private name: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<AnalyticsRuleSchema> {\n    return this.apiCall.get<AnalyticsRuleSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<AnalyticsRuleDeleteSchema> {\n    return this.apiCall.delete<AnalyticsRuleDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${AnalyticsRules.RESOURCEPATH}/${encodeURIComponent(this.name)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport { AnalyticsEventCreateSchema } from \"./AnalyticsEvent\";\n\nconst RESOURCEPATH = \"/analytics/events\";\n\nexport default class AnalyticsEvents {\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async create(\n    params: AnalyticsEventCreateSchema,\n  ): Promise<AnalyticsEventCreateSchema> {\n    return this.apiCall.post<AnalyticsEventCreateSchema>(\n      this.endpointPath(),\n      params,\n    );\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${AnalyticsEvents.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport AnalyticsRules from \"./AnalyticsRules\";\nimport AnalyticsRule from \"./AnalyticsRule\";\nimport AnalyticsEvents from \"./AnalyticsEvents\";\n\nconst RESOURCEPATH = \"/analytics\";\n\nexport default class Analytics {\n  private readonly _analyticsRules: AnalyticsRules;\n  private readonly individualAnalyticsRules: Record<string, AnalyticsRule> = {};\n  private readonly _analyticsEvents: AnalyticsEvents;\n\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n    this._analyticsRules = new AnalyticsRules(this.apiCall);\n    this._analyticsEvents = new AnalyticsEvents(this.apiCall);\n  }\n\n  rules(): AnalyticsRules;\n  rules(id: string): AnalyticsRule;\n  rules(id?: string): AnalyticsRules | AnalyticsRule {\n    if (id === undefined) {\n      return this._analyticsRules;\n    } else {\n      if (this.individualAnalyticsRules[id] === undefined) {\n        this.individualAnalyticsRules[id] = new AnalyticsRule(id, this.apiCall);\n      }\n      return this.individualAnalyticsRules[id];\n    }\n  }\n\n  events(): AnalyticsEvents {\n    return this._analyticsEvents;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport { StopwordSchema } from \"./Stopword\";\n\nconst RESOURCEPATH = \"/stopwords\";\n\nexport interface StopwordCreateSchema {\n  stopwords: string[];\n  locale?: string;\n}\n\nexport interface StopwordsRetrieveSchema {\n  stopwords: StopwordSchema[];\n}\n\nexport default class Stopwords {\n  constructor(private apiCall: ApiCall) {}\n\n  async upsert(\n    stopwordId: string,\n    params: StopwordCreateSchema,\n  ): Promise<StopwordSchema> {\n    return this.apiCall.put<StopwordSchema>(\n      this.endpointPath(stopwordId),\n      params,\n    );\n  }\n\n  async retrieve(): Promise<StopwordsRetrieveSchema> {\n    return this.apiCall.get<StopwordsRetrieveSchema>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${Stopwords.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Stopwords, { StopwordCreateSchema } from \"./Stopwords\";\n\nexport interface StopwordSchema extends StopwordCreateSchema {\n  id: string;\n  stopwords: string[];\n  locale?: string;\n}\n\nexport interface StopwordDeleteSchema {\n  id: string;\n}\n\nexport default class Stopword {\n  constructor(\n    private stopwordId: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<StopwordSchema> {\n    return this.apiCall.get<StopwordSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<StopwordDeleteSchema> {\n    return this.apiCall.delete<StopwordDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Stopwords.RESOURCEPATH}/${encodeURIComponent(this.stopwordId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport {\n  ConversationModelCreateSchema,\n  ConversationModelSchema,\n} from \"./ConversationModel\";\n\nconst RESOURCEPATH = \"/conversations/models\";\n\nexport default class ConversationModels {\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async create(\n    params: ConversationModelCreateSchema,\n  ): Promise<ConversationModelCreateSchema> {\n    return this.apiCall.post<ConversationModelCreateSchema>(\n      this.endpointPath(),\n      params,\n    );\n  }\n\n  async retrieve(): Promise<ConversationModelSchema[]> {\n    return this.apiCall.get<ConversationModelSchema[]>(\n      this.endpointPath(),\n    );\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${ConversationModels.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport ConversationModels from \"./ConversationModels\";\n\nexport interface ConversationModelCreateSchema {\n  id?: string;\n  model_name: string;\n  api_key?: string;\n  system_prompt?: string;\n  max_bytes: number;\n  history_collection?: string;\n}\n\nexport interface ConversationModelDeleteSchema {\n  id: string;\n}\n\nexport interface ConversationModelSchema extends ConversationModelCreateSchema {\n  id: string;\n}\n\nexport default class ConversationModel {\n  constructor(\n    private id: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async update(\n    params: ConversationModelCreateSchema,\n  ): Promise<ConversationModelCreateSchema> {\n    return this.apiCall.put<ConversationModelCreateSchema>(\n      this.endpointPath(),\n      params,\n    );\n  }\n\n  async retrieve(): Promise<ConversationModelSchema> {\n    return this.apiCall.get<ConversationModelSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<ConversationModelDeleteSchema> {\n    return this.apiCall.delete<ConversationModelDeleteSchema>(\n      this.endpointPath(),\n    );\n  }\n\n  private endpointPath(): string {\n    return `${ConversationModels.RESOURCEPATH}/${encodeURIComponent(this.id)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport ConversationModels from \"./ConversationModels\";\nimport ConversationModel from \"./ConversationModel\";\nimport { ConversationSchema } from \"./Conversation\";\n\nconst RESOURCEPATH = \"/conversations\";\n\nexport interface ConversationsRetrieveSchema {\n  conversations: ConversationSchema[];\n}\n\nexport default class Conversations {\n  private readonly _conversationsModels: ConversationModels;\n  private readonly individualConversationModels: Record<\n    string,\n    ConversationModel\n  > = {};\n\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n    this._conversationsModels = new ConversationModels(this.apiCall);\n  }\n\n  async retrieve(): Promise<ConversationsRetrieveSchema> {\n    return this.apiCall.get<ConversationsRetrieveSchema>(RESOURCEPATH);\n  }\n\n  models(): ConversationModels;\n  models(id: string): ConversationModel;\n  models(id?: string): ConversationModels | ConversationModel {\n    if (id === undefined) {\n      return this._conversationsModels;\n    } else {\n      if (this.individualConversationModels[id] === undefined) {\n        this.individualConversationModels[id] = new ConversationModel(\n          id,\n          this.apiCall,\n        );\n      }\n      return this.individualConversationModels[id];\n    }\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Conversations from \"./Conversations\";\n\nexport interface ConversationDeleteSchema {\n  id: number;\n}\n\nexport interface ConversationUpdateSchema {\n  ttl: number;\n}\n\nexport interface ConversationSchema {\n  id: number;\n  conversation: object[];\n  last_updated: number;\n  ttl: number;\n}\n\nexport default class Conversation {\n  constructor(\n    private id: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<ConversationSchema[]> {\n    return this.apiCall.get<ConversationSchema[]>(this.endpointPath());\n  }\n\n  async update(\n    params: ConversationUpdateSchema,\n  ): Promise<ConversationUpdateSchema> {\n    return this.apiCall.put<ConversationUpdateSchema>(\n      this.endpointPath(),\n      params,\n    );\n  }\n\n  async delete(): Promise<ConversationDeleteSchema> {\n    return this.apiCall.delete<ConversationDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Conversations.RESOURCEPATH}/${encodeURIComponent(this.id)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport type { StemmingDictionaryCreateSchema } from \"./StemmingDictionary\";\n\nconst RESOURCEPATH = \"/stemming/dictionaries\";\n\nexport interface StemmingDictionariesRetrieveSchema {\n  dictionaries: string[];\n}\n\nexport default class StemmingDictionaries {\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async upsert(\n    id: string,\n    wordRootCombinations: StemmingDictionaryCreateSchema[] | string,\n  ): Promise<StemmingDictionaryCreateSchema[] | string> {\n    const wordRootCombinationsInJSONLFormat = Array.isArray(\n      wordRootCombinations,\n    )\n      ? wordRootCombinations.map((combo) => JSON.stringify(combo)).join(\"\\n\")\n      : wordRootCombinations;\n\n    const resultsInJSONLFormat = await this.apiCall.performRequest<string>(\n\n      \"post\",\n      this.endpointPath(\"import\"),\n      {\n        queryParameters: {id},\n        bodyParameters: wordRootCombinationsInJSONLFormat,\n        additionalHeaders: {\"Content-Type\": \"text/plain\"},\n        skipConnectionTimeout: true,\n      }\n    );\n\n    return Array.isArray(wordRootCombinations)\n      ? resultsInJSONLFormat\n          .split(\"\\n\")\n          .map((line) => JSON.parse(line) as StemmingDictionaryCreateSchema)\n      : resultsInJSONLFormat;\n  }\n\n  async retrieve(): Promise<StemmingDictionariesRetrieveSchema> {\n    return this.apiCall.get<StemmingDictionariesRetrieveSchema>(\n      this.endpointPath(),\n    );\n  }\n\n  private endpointPath(operation?: string): string {\n    return operation === undefined\n      ? `${StemmingDictionaries.RESOURCEPATH}`\n      : `${StemmingDictionaries.RESOURCEPATH}/${encodeURIComponent(operation)}`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport StemmingDictionaries from \"./StemmingDictionaries\";\n\nexport interface StemmingDictionaryCreateSchema {\n  root: string;\n  word: string;\n}\n\nexport interface StemmingDictionarySchema {\n  id: string;\n  words: StemmingDictionaryCreateSchema[];\n}\n\nexport default class StemmingDictionary {\n  constructor(\n    private id: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<StemmingDictionarySchema> {\n    return this.apiCall.get<StemmingDictionarySchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${StemmingDictionaries.RESOURCEPATH}/${encodeURIComponent(this.id)}`;\n  }\n}\n","import type ApiCall from \"./ApiCall\";\nimport StemmingDictionaries from \"./StemmingDictionaries\";\nimport StemmingDictionary from \"./StemmingDictionary\";\n\nconst RESOURCEPATH = \"/stemming\";\n\nexport default class Stemming {\n  private readonly _stemmingDictionaries: StemmingDictionaries;\n  private readonly individualStemmingDictionaries: Record<\n    string,\n    StemmingDictionary\n  > = {};\n\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n    this._stemmingDictionaries = new StemmingDictionaries(this.apiCall);\n  }\n\n  dictionaries(): StemmingDictionaries;\n  dictionaries(id: string): StemmingDictionary;\n  dictionaries(id?: string): StemmingDictionaries | StemmingDictionary {\n    if (id === undefined) {\n      return this._stemmingDictionaries;\n    } else {\n      if (this.individualStemmingDictionaries[id] === undefined) {\n        this.individualStemmingDictionaries[id] = new StemmingDictionary(\n          id,\n          this.apiCall,\n        );\n      }\n      return this.individualStemmingDictionaries[id];\n    }\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","/* eslint-disable no-dupe-class-members */\n\nimport Configuration, { ConfigurationOptions } from \"./Configuration\";\nimport ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport Collection from \"./Collection\";\nimport Aliases from \"./Aliases\";\nimport Alias from \"./Alias\";\nimport Keys from \"./Keys\";\nimport Key from \"./Key\";\nimport Debug from \"./Debug\";\nimport Metrics from \"./Metrics\";\nimport Stats from \"./Stats\";\nimport Health from \"./Health\";\nimport Operations from \"./Operations\";\nimport MultiSearch from \"./MultiSearch\";\nimport Presets from \"./Presets\";\nimport Preset from \"./Preset\";\nimport Analytics from \"./Analytics\";\nimport Stopwords from \"./Stopwords\";\nimport Stopword from \"./Stopword\";\nimport Conversations from \"./Conversations\";\nimport Conversation from \"./Conversation\";\nimport Stemming from \"./Stemming\";\n\nexport default class Client {\n  configuration: Configuration;\n  apiCall: ApiCall;\n  debug: Debug;\n  metrics: Metrics;\n  stats: Stats;\n  health: Health;\n  operations: Operations;\n  multiSearch: MultiSearch;\n  analytics: Analytics;\n  stemming: Stemming;\n  private readonly _collections: Collections;\n  private readonly individualCollections: Record<string, Collection>;\n  private readonly _aliases: Aliases;\n  private readonly individualAliases: Record<string, Alias>;\n  private readonly _keys: Keys;\n  private readonly individualKeys: Record<number, Key>;\n  private readonly _presets: Presets;\n  private readonly individualPresets: Record<string, Preset>;\n  private readonly _stopwords: Stopwords;\n  private readonly individualStopwords: Record<string, Stopword>;\n  private readonly _conversations: Conversations;\n  private readonly individualConversations: Record<string, Conversation>;\n\n  constructor(options: ConfigurationOptions) {\n    options.sendApiKeyAsQueryParam = options.sendApiKeyAsQueryParam ?? false;\n\n    this.configuration = new Configuration(options);\n    this.apiCall = new ApiCall(this.configuration);\n    this.debug = new Debug(this.apiCall);\n    this.metrics = new Metrics(this.apiCall);\n    this.stats = new Stats(this.apiCall);\n    this.health = new Health(this.apiCall);\n    this.operations = new Operations(this.apiCall);\n    this.multiSearch = new MultiSearch(this.apiCall, this.configuration);\n    this._collections = new Collections(this.apiCall);\n    this.individualCollections = {};\n    this._aliases = new Aliases(this.apiCall);\n    this.individualAliases = {};\n    this._keys = new Keys(this.apiCall);\n    this.individualKeys = {};\n    this._presets = new Presets(this.apiCall);\n    this.individualPresets = {};\n    this._stopwords = new Stopwords(this.apiCall);\n    this.individualStopwords = {};\n    this.analytics = new Analytics(this.apiCall);\n    this.stemming = new Stemming(this.apiCall);\n    this._conversations = new Conversations(this.apiCall);\n    this.individualConversations = {};\n  }\n\n  collections(): Collections;\n  collections<T extends Record<string, any> = object>(\n    collectionName: string,\n  ): Collection<T>;\n  collections(collectionName?: string): Collections | Collection {\n    if (collectionName === undefined) {\n      return this._collections;\n    } else {\n      if (this.individualCollections[collectionName] === undefined) {\n        this.individualCollections[collectionName] = new Collection(\n          collectionName,\n          this.apiCall,\n          this.configuration,\n        );\n      }\n      return this.individualCollections[collectionName];\n    }\n  }\n\n  aliases(): Aliases;\n  aliases(aliasName: string): Alias;\n  aliases(aliasName?: string): Aliases | Alias {\n    if (aliasName === undefined) {\n      return this._aliases;\n    } else {\n      if (this.individualAliases[aliasName] === undefined) {\n        this.individualAliases[aliasName] = new Alias(aliasName, this.apiCall);\n      }\n      return this.individualAliases[aliasName];\n    }\n  }\n\n  keys(): Keys;\n  keys(id: number): Key;\n  keys(id?: number): Keys | Key {\n    if (id === undefined) {\n      return this._keys;\n    } else {\n      if (this.individualKeys[id] === undefined) {\n        this.individualKeys[id] = new Key(id, this.apiCall);\n      }\n      return this.individualKeys[id];\n    }\n  }\n\n  presets(): Presets;\n  presets(id: string): Preset;\n  presets(id?: string): Presets | Preset {\n    if (id === undefined) {\n      return this._presets;\n    } else {\n      if (this.individualPresets[id] === undefined) {\n        this.individualPresets[id] = new Preset(id, this.apiCall);\n      }\n      return this.individualPresets[id];\n    }\n  }\n\n  stopwords(): Stopwords;\n  stopwords(id: string): Stopword;\n  stopwords(id?: string): Stopwords | Stopword {\n    if (id === undefined) {\n      return this._stopwords;\n    } else {\n      if (this.individualStopwords[id] === undefined) {\n        this.individualStopwords[id] = new Stopword(id, this.apiCall);\n      }\n      return this.individualStopwords[id];\n    }\n  }\n\n  conversations(): Conversations;\n  conversations(id: string): Conversation;\n  conversations(id?: string): Conversations | Conversation {\n    if (id === undefined) {\n      return this._conversations;\n    } else {\n      if (this.individualConversations[id] === undefined) {\n        this.individualConversations[id] = new Conversation(id, this.apiCall);\n      }\n      return this.individualConversations[id];\n    }\n  }\n}\n"]}