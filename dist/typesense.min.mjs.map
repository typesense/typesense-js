{"version":3,"sources":["node-modules-polyfills-empty:http","node-modules-polyfills-empty:https","node-modules-polyfills-empty:crypto","../src/Typesense/Errors/index.ts","../src/Typesense/Errors/TypesenseError.ts","../src/Typesense/Errors/HTTPError.ts","../src/Typesense/Errors/MissingConfigurationError.ts","../src/Typesense/Errors/ObjectAlreadyExists.ts","../src/Typesense/Errors/ObjectNotFound.ts","../src/Typesense/Errors/ObjectUnprocessable.ts","../src/Typesense/Errors/RequestMalformed.ts","../src/Typesense/Errors/RequestUnauthorized.ts","../src/Typesense/Errors/ServerError.ts","../src/Typesense/Errors/ImportError.ts","../src/Typesense/Configuration.ts","../src/Typesense/ApiCall.ts","../src/Typesense/RequestWithCache.ts","../src/Typesense/Collections.ts","../src/Typesense/SearchOnlyDocuments.ts","../src/Typesense/Documents.ts","../src/Typesense/Utils.ts","../src/Typesense/MultiSearch.ts","../src/Typesense/SearchOnlyCollection.ts","../src/Typesense/SearchClient.ts","../src/Typesense/Overrides.ts","../src/Typesense/Override.ts","../src/Typesense/Synonyms.ts","../src/Typesense/Synonym.ts","../src/Typesense/Document.ts","../src/Typesense/Collection.ts","../src/Typesense/Aliases.ts","../src/Typesense/Alias.ts","../src/Typesense/Keys.ts","../src/Typesense/Key.ts","../src/Typesense/Debug.ts","../src/Typesense/Metrics.ts","../src/Typesense/Stats.ts","../src/Typesense/Health.ts","../src/Typesense/Operations.ts","../src/Typesense/Presets.ts","../src/Typesense/Preset.ts","../src/Typesense/AnalyticsRules.ts","../src/Typesense/AnalyticsRule.ts","../src/Typesense/AnalyticsEvents.ts","../src/Typesense/Analytics.ts","../src/Typesense/Stopwords.ts","../src/Typesense/Stopword.ts","../src/Typesense/ConversationModels.ts","../src/Typesense/ConversationModel.ts","../src/Typesense/Conversations.ts","../src/Typesense/Conversation.ts","../src/Typesense/StemmingDictionaries.ts","../src/Typesense/StemmingDictionary.ts","../src/Typesense/Stemming.ts","../src/Typesense/Client.ts"],"names":["HTTPAgent","HTTPSAgent","RESOURCEPATH","isNodeJSEnvironment","Metrics","normalizedParams"],"mappings":"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","file":"typesense.min.mjs","sourcesContent":["module.exports = {}","module.exports = {}","module.exports = {}","import HTTPError from \"./HTTPError\";\nimport MissingConfigurationError from \"./MissingConfigurationError\";\nimport ObjectAlreadyExists from \"./ObjectAlreadyExists\";\nimport ObjectNotFound from \"./ObjectNotFound\";\nimport ObjectUnprocessable from \"./ObjectUnprocessable\";\nimport RequestMalformed from \"./RequestMalformed\";\nimport RequestUnauthorized from \"./RequestUnauthorized\";\nimport ServerError from \"./ServerError\";\nimport ImportError from \"./ImportError\";\nimport TypesenseError from \"./TypesenseError\";\n\nexport {\n  HTTPError,\n  MissingConfigurationError,\n  ObjectAlreadyExists,\n  ObjectNotFound,\n  ObjectUnprocessable,\n  RequestMalformed,\n  RequestUnauthorized,\n  ServerError,\n  TypesenseError,\n  ImportError,\n};\n","export default class TypesenseError extends Error {\n  httpStatus?: number;\n  httpBody?: string;\n\n  // Source: https://stackoverflow.com/a/58417721/123545\n  constructor(message?: string, httpBody?: string, httpStatus?: number) {\n    super(message);\n    this.name = new.target.name;\n    this.httpBody = httpBody;\n    this.httpStatus = httpStatus;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class HTTPError extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class MissingConfigurationError extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class ObjectAlreadyExists extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class ObjectNotFound extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class ObjectUnprocessable extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class RequestMalformed extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class RequestUnauthorized extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\n\nexport default class ServerError extends TypesenseError {}\n","import TypesenseError from \"./TypesenseError\";\nimport type { DocumentImportParameters, ImportResponse } from \"../Documents\";\nimport { ReadStream } from \"node:fs\";\n\ninterface ImportErrorPayload {\n  documentsInJSONLFormat: string | ReadStream;\n  options: DocumentImportParameters;\n  failedItems: ImportResponse[];\n  successCount: number;\n}\n\nexport default class ImportError extends TypesenseError {\n  payload: ImportErrorPayload;\n  importResults: ImportResponse[];\n  constructor(\n    message: string,\n    importResults: ImportResponse[],\n    payload: ImportErrorPayload,\n  ) {\n    super(message);\n    this.importResults = importResults;\n    this.payload = payload;\n  }\n}\n","import logger from \"loglevel\";\nimport { MissingConfigurationError } from \"./Errors\";\nimport type { Agent as HTTPAgent } from \"http\";\nimport type { Agent as HTTPSAgent } from \"https\";\nimport type { AxiosRequestConfig } from \"axios\";\n\nexport interface NodeConfiguration {\n  host: string;\n  port: number;\n  protocol: string;\n  path?: string;\n  url?: string;\n}\n\nexport interface NodeConfigurationWithHostname {\n  host: string;\n  port: number;\n  protocol: string;\n  path?: string;\n}\n\nexport interface NodeConfigurationWithUrl {\n  url: string;\n}\n\nexport interface ConfigurationOptions {\n  apiKey: string;\n  nodes:\n    | NodeConfiguration[]\n    | NodeConfigurationWithHostname[]\n    | NodeConfigurationWithUrl[];\n  randomizeNodes?: boolean;\n  /**\n   * @deprecated\n   * masterNode is now consolidated to nodes, starting with Typesense Server v0.12'\n   */\n  masterNode?:\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl;\n  /**\n   * @deprecated\n   * readReplicaNodes is now consolidated to nodes, starting with Typesense Server v0.12'\n   */\n  readReplicaNodes?:\n    | NodeConfiguration[]\n    | NodeConfigurationWithHostname[]\n    | NodeConfigurationWithUrl[];\n  nearestNode?:\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl;\n  connectionTimeoutSeconds?: number;\n  timeoutSeconds?: number;\n  healthcheckIntervalSeconds?: number;\n  numRetries?: number;\n  retryIntervalSeconds?: number;\n  sendApiKeyAsQueryParam?: boolean | undefined;\n  useServerSideSearchCache?: boolean;\n  cacheSearchResultsForSeconds?: number;\n  additionalHeaders?: Record<string, string>;\n\n  logLevel?: logger.LogLevelDesc;\n  logger?: logger.Logger;\n\n  /**\n   * Set a custom HTTP Agent\n   *\n   * This is helpful for eg, to enable keepAlive which helps prevents ECONNRESET socket hang up errors\n   *    Usage:\n   *      const { Agent: HTTPAgent } = require(\"http\");\n   *      ...\n   *      httpAgent: new HTTPAgent({ keepAlive: true }),\n   * @type {HTTPAgent}\n   */\n  httpAgent?: HTTPAgent;\n\n  /**\n   * Set a custom HTTPS Agent\n   *\n   * This is helpful for eg, to enable keepAlive which helps prevents ECONNRESET socket hang up errors\n   *    Usage:\n   *      const { Agent: HTTPSAgent } = require(\"https\");\n   *      ...\n   *      httpsAgent: new HTTPSAgent({ keepAlive: true }),\n   * @type {HTTPSAgent}\n   */\n  httpsAgent?: HTTPSAgent;\n\n  /**\n   * Set a custom paramsSerializer\n   *\n   * See axios documentation for more information on how to use this parameter: https://axios-http.com/docs/req_config\n   *  This is helpful for handling React Native issues like this: https://github.com/axios/axios/issues/6102#issuecomment-2085301397\n   * @type {any}\n   */\n  paramsSerializer?: any;\n\n  /**\n   * Set a custom axios adapter\n   *\n   * Useful for customizing the underlying HTTP client library used by Typesense.\n   *\n   * For example, you can use this to use a custom HTTP client library like `fetch`, in order for the library to work on the edge.\n   * Related GiHub issue: https://github.com/typesense/typesense-js/issues/161\n   *\n   * See axios documentation for more information on how to use this parameter: https://axios-http.com/docs/req_config\n   */\n  axiosAdapter?: AxiosRequestConfig[\"adapter\"];\n}\n\nexport default class Configuration {\n  readonly nodes:\n    | NodeConfiguration[]\n    | NodeConfigurationWithHostname[]\n    | NodeConfigurationWithUrl[];\n  readonly nearestNode?:\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl;\n  readonly connectionTimeoutSeconds: number;\n  readonly healthcheckIntervalSeconds: number;\n  readonly numRetries: number;\n  readonly retryIntervalSeconds: number;\n  readonly apiKey: string;\n  readonly sendApiKeyAsQueryParam?: boolean;\n  readonly cacheSearchResultsForSeconds: number;\n  readonly useServerSideSearchCache: boolean;\n  readonly logger: logger.Logger;\n  readonly logLevel: logger.LogLevelDesc;\n  readonly additionalHeaders?: Record<string, string>;\n  readonly httpAgent?: HTTPAgent;\n  readonly httpsAgent?: HTTPSAgent;\n  readonly paramsSerializer?: any;\n  readonly axiosAdapter?: AxiosRequestConfig[\"adapter\"];\n\n  constructor(options: ConfigurationOptions) {\n    this.nodes = options.nodes || [];\n    this.nodes = this.nodes\n      .map((node) => this.setDefaultPathInNode(node))\n      .map((node) => this.setDefaultPortInNode(node))\n      .map((node) => ({ ...node })) as NodeConfiguration[]; // Make a deep copy\n\n    if (options.randomizeNodes == null) {\n      options.randomizeNodes = true;\n    }\n\n    if (options.randomizeNodes === true) {\n      this.shuffleArray(this.nodes);\n    }\n\n    this.nearestNode = options.nearestNode;\n    this.nearestNode = this.setDefaultPathInNode(this.nearestNode);\n    this.nearestNode = this.setDefaultPortInNode(this.nearestNode);\n\n    this.connectionTimeoutSeconds =\n      options.connectionTimeoutSeconds || options.timeoutSeconds || 5;\n    this.healthcheckIntervalSeconds = options.healthcheckIntervalSeconds || 60;\n    this.numRetries =\n      (options.numRetries !== undefined && options.numRetries >= 0\n        ? options.numRetries\n        : this.nodes.length + (this.nearestNode == null ? 0 : 1)) || 3;\n    this.retryIntervalSeconds = options.retryIntervalSeconds || 0.1;\n\n    this.apiKey = options.apiKey;\n    this.sendApiKeyAsQueryParam = options.sendApiKeyAsQueryParam; // We will set a default for this in Client and SearchClient\n\n    this.cacheSearchResultsForSeconds =\n      options.cacheSearchResultsForSeconds || 0; // Disable client-side cache by default\n    this.useServerSideSearchCache = options.useServerSideSearchCache || false;\n\n    this.axiosAdapter = options.axiosAdapter;\n    this.logger = options.logger || logger;\n    this.logLevel = options.logLevel || \"warn\";\n    this.logger.setLevel(this.logLevel);\n\n    this.additionalHeaders = options.additionalHeaders;\n\n    this.httpAgent = options.httpAgent;\n    this.httpsAgent = options.httpsAgent;\n\n    this.paramsSerializer = options.paramsSerializer;\n\n    this.showDeprecationWarnings(options);\n    this.validate();\n  }\n\n  validate(): boolean {\n    if (this.nodes == null || this.nodes.length === 0 || this.validateNodes()) {\n      throw new MissingConfigurationError(\n        \"Ensure that nodes[].protocol, nodes[].host and nodes[].port are set\",\n      );\n    }\n\n    if (\n      this.nearestNode != null &&\n      this.isNodeMissingAnyParameters(this.nearestNode)\n    ) {\n      throw new MissingConfigurationError(\n        \"Ensure that nearestNodes.protocol, nearestNodes.host and nearestNodes.port are set\",\n      );\n    }\n\n    if (this.apiKey == null) {\n      throw new MissingConfigurationError(\"Ensure that apiKey is set\");\n    }\n\n    return true;\n  }\n\n  private validateNodes(): boolean {\n    return this.nodes.some((node) => {\n      return this.isNodeMissingAnyParameters(node);\n    });\n  }\n\n  private isNodeMissingAnyParameters(\n    node:\n      | NodeConfiguration\n      | NodeConfigurationWithHostname\n      | NodeConfigurationWithUrl,\n  ): boolean {\n    return (\n      ![\"protocol\", \"host\", \"port\", \"path\"].every((key) => {\n        return node.hasOwnProperty(key);\n      }) && node[\"url\"] == null\n    );\n  }\n\n  private setDefaultPathInNode(\n    node:\n      | NodeConfiguration\n      | NodeConfigurationWithHostname\n      | NodeConfigurationWithUrl\n      | undefined,\n  ):\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl\n    | undefined {\n    if (node != null && !node.hasOwnProperty(\"path\")) {\n      node[\"path\"] = \"\";\n    }\n    return node;\n  }\n\n  private setDefaultPortInNode(\n    node:\n      | NodeConfiguration\n      | NodeConfigurationWithHostname\n      | NodeConfigurationWithUrl\n      | undefined,\n  ):\n    | NodeConfiguration\n    | NodeConfigurationWithHostname\n    | NodeConfigurationWithUrl\n    | undefined {\n    if (\n      node != null &&\n      !node.hasOwnProperty(\"port\") &&\n      node.hasOwnProperty(\"protocol\")\n    ) {\n      switch (node[\"protocol\"]) {\n        case \"https\":\n          node[\"port\"] = 443;\n          break;\n        case \"http\":\n          node[\"port\"] = 80;\n          break;\n      }\n    }\n    return node;\n  }\n\n  private showDeprecationWarnings(options: ConfigurationOptions): void {\n    if (options.timeoutSeconds) {\n      this.logger.warn(\n        \"Deprecation warning: timeoutSeconds is now renamed to connectionTimeoutSeconds\",\n      );\n    }\n    if (options.masterNode) {\n      this.logger.warn(\n        \"Deprecation warning: masterNode is now consolidated to nodes, starting with Typesense Server v0.12\",\n      );\n    }\n    if (options.readReplicaNodes) {\n      this.logger.warn(\n        \"Deprecation warning: readReplicaNodes is now consolidated to nodes, starting with Typesense Server v0.12\",\n      );\n    }\n  }\n\n  private shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n}\n","import type {\n  AxiosAdapter,\n  AxiosRequestConfig,\n  AxiosResponse,\n  Method,\n} from \"axios\";\nimport axios from \"axios\";\nimport { Agent as HTTPAgent } from \"http\";\nimport { Agent as HTTPSAgent } from \"https\";\nimport { Logger } from \"loglevel\";\nimport Configuration, { NodeConfiguration } from \"./Configuration\";\nimport {\n  HTTPError,\n  ObjectAlreadyExists,\n  ObjectNotFound,\n  ObjectUnprocessable,\n  RequestMalformed,\n  RequestUnauthorized,\n  ServerError,\n} from \"./Errors\";\nimport TypesenseError from \"./Errors/TypesenseError\";\n\nconst APIKEYHEADERNAME = \"X-TYPESENSE-API-KEY\";\nconst HEALTHY = true;\nconst UNHEALTHY = false;\n\ninterface Node extends NodeConfiguration {\n  isHealthy: boolean;\n  index: string | number;\n}\n\nconst isNodeJSEnvironment =\n  typeof process !== \"undefined\" &&\n  process.versions != null &&\n  process.versions.node != null;\n\nexport default class ApiCall {\n  private readonly apiKey: string;\n  private readonly nodes: Node[];\n  private readonly nearestNode: Node;\n  private readonly connectionTimeoutSeconds: number;\n  private readonly healthcheckIntervalSeconds: number;\n  private readonly retryIntervalSeconds: number;\n  private readonly sendApiKeyAsQueryParam?: boolean;\n  private readonly numRetriesPerRequest: number;\n  private readonly additionalUserHeaders?: Record<string, string>;\n\n  private readonly logger: Logger;\n  private currentNodeIndex: number;\n\n  constructor(private configuration: Configuration) {\n    this.apiKey = this.configuration.apiKey;\n    this.nodes =\n      this.configuration.nodes == null\n        ? this.configuration.nodes\n        : JSON.parse(JSON.stringify(this.configuration.nodes)); // Make a copy, since we'll be adding additional metadata to the nodes\n    this.nearestNode =\n      this.configuration.nearestNode == null\n        ? this.configuration.nearestNode\n        : JSON.parse(JSON.stringify(this.configuration.nearestNode));\n    this.connectionTimeoutSeconds = this.configuration.connectionTimeoutSeconds;\n    this.healthcheckIntervalSeconds =\n      this.configuration.healthcheckIntervalSeconds;\n    this.numRetriesPerRequest = this.configuration.numRetries;\n    this.retryIntervalSeconds = this.configuration.retryIntervalSeconds;\n    this.sendApiKeyAsQueryParam = this.configuration.sendApiKeyAsQueryParam;\n    this.additionalUserHeaders = this.configuration.additionalHeaders;\n\n    this.logger = this.configuration.logger;\n\n    this.initializeMetadataForNodes();\n    this.currentNodeIndex = -1;\n  }\n\n  async get<T>(\n    endpoint: string,\n    queryParameters: any = {},\n    {\n      abortSignal = null,\n      responseType = undefined,\n    }: {\n      abortSignal?: any;\n      responseType?: AxiosRequestConfig[\"responseType\"] | undefined;\n    } = {},\n  ): Promise<T> {\n    return this.performRequest<T>(\"get\", endpoint, {\n      queryParameters,\n      abortSignal,\n      responseType,\n    });\n  }\n\n  async delete<T>(endpoint: string, queryParameters: any = {}): Promise<T> {\n    return this.performRequest<T>(\"delete\", endpoint, { queryParameters });\n  }\n\n  async post<T>(\n    endpoint: string,\n    bodyParameters: any = {},\n    queryParameters: any = {},\n    additionalHeaders: any = {},\n  ): Promise<T> {\n    return this.performRequest<T>(\"post\", endpoint, {\n      queryParameters,\n      bodyParameters,\n      additionalHeaders,\n    });\n  }\n\n  async put<T>(\n    endpoint: string,\n    bodyParameters: any = {},\n    queryParameters: any = {},\n  ): Promise<T> {\n    return this.performRequest<T>(\"put\", endpoint, {\n      queryParameters,\n      bodyParameters,\n    });\n  }\n\n  async patch<T>(\n    endpoint: string,\n    bodyParameters: any = {},\n    queryParameters: any = {},\n  ): Promise<T> {\n    return this.performRequest<T>(\"patch\", endpoint, {\n      queryParameters,\n      bodyParameters,\n    });\n  }\n\n  private getAdapter(): AxiosAdapter | undefined {\n    if (!this.configuration.axiosAdapter) return undefined;\n\n    if (typeof this.configuration.axiosAdapter === \"function\")\n      return this.configuration.axiosAdapter;\n\n    const isCloudflareWorkers =\n      typeof navigator !== \"undefined\" &&\n      navigator.userAgent === \"Cloudflare-Workers\";\n\n    return isCloudflareWorkers\n      ? axios.getAdapter(this.configuration.axiosAdapter).bind(globalThis)\n      : axios.getAdapter(this.configuration.axiosAdapter);\n  }\n\n  async performRequest<T>(\n    requestType: Method,\n    endpoint: string,\n    {\n      queryParameters = null,\n      bodyParameters = null,\n      additionalHeaders = {},\n      abortSignal = null,\n      responseType = undefined,\n      skipConnectionTimeout = false,\n      enableKeepAlive = undefined,\n    }: {\n      queryParameters?: any;\n      bodyParameters?: any;\n      additionalHeaders?: any;\n      abortSignal?: any;\n      responseType?: AxiosRequestConfig[\"responseType\"] | undefined;\n      skipConnectionTimeout?: boolean;\n      enableKeepAlive?: boolean | undefined;\n    },\n  ): Promise<T> {\n    this.configuration.validate();\n\n    const requestNumber = Date.now();\n    let lastException;\n    let wasAborted = false;\n    this.logger.debug(\n      `Request #${requestNumber}: Performing ${requestType.toUpperCase()} request: ${endpoint}`,\n    );\n    for (\n      let numTries = 1;\n      numTries <= this.numRetriesPerRequest + 1;\n      numTries++\n    ) {\n      const node = this.getNextNode(requestNumber);\n      this.logger.debug(\n        `Request #${requestNumber}: Attempting ${requestType.toUpperCase()} request Try #${numTries} to Node ${\n          node.index\n        }`,\n      );\n\n      if (abortSignal && abortSignal.aborted) {\n        return Promise.reject(new Error(\"Request aborted by caller.\"));\n      }\n\n      let abortListener: ((event: Event) => void) | undefined;\n\n      try {\n        const requestOptions: AxiosRequestConfig<string> = {\n          adapter: this.getAdapter(),\n          method: requestType,\n          url: this.uriFor(endpoint, node),\n          headers: Object.assign(\n            {},\n            this.defaultHeaders(),\n            additionalHeaders,\n            this.additionalUserHeaders,\n          ),\n          maxContentLength: Infinity,\n          maxBodyLength: Infinity,\n          responseType,\n          validateStatus: (status) => {\n            /* Override default validateStatus, which only considers 2xx a success.\n                In our case, if the server returns any HTTP code, we will handle it below.\n                We do this to be able to raise custom errors based on response code.\n             */\n            return status > 0;\n          },\n          transformResponse: [\n            (data, headers) => {\n              let transformedData = data;\n              if (\n                headers !== undefined &&\n                typeof data === \"string\" &&\n                headers[\"content-type\"] &&\n                headers[\"content-type\"].startsWith(\"application/json\")\n              ) {\n                transformedData = JSON.parse(data);\n              }\n              return transformedData;\n            },\n          ],\n        };\n\n        if (skipConnectionTimeout !== true) {\n          requestOptions.timeout = this.connectionTimeoutSeconds * 1000;\n        }\n\n        if (queryParameters && Object.keys(queryParameters).length !== 0) {\n          requestOptions.params = queryParameters;\n        }\n\n        if (this.sendApiKeyAsQueryParam) {\n          requestOptions.params = requestOptions.params || {};\n          requestOptions.params[\"x-typesense-api-key\"] = this.apiKey;\n        }\n\n        if (this.configuration.httpAgent) {\n          this.logger.debug(\n            `Request #${requestNumber}: Using custom httpAgent`,\n          );\n          requestOptions.httpAgent = this.configuration.httpAgent;\n        } else if (enableKeepAlive === true) {\n          if (!isNodeJSEnvironment) {\n            this.logger.warn(\n              `Request #${requestNumber}: Cannot use custom httpAgent in a browser environment to enable keepAlive`,\n            );\n          } else {\n            this.logger.debug(`Request #${requestNumber}: Enabling KeepAlive`);\n            requestOptions.httpAgent = new HTTPAgent({ keepAlive: true });\n          }\n        }\n\n        if (this.configuration.httpsAgent) {\n          this.logger.debug(\n            `Request #${requestNumber}: Using custom httpsAgent`,\n          );\n          requestOptions.httpsAgent = this.configuration.httpsAgent;\n        } else if (enableKeepAlive === true) {\n          if (!isNodeJSEnvironment) {\n            this.logger.warn(\n              `Request #${requestNumber}: Cannot use custom httpAgent in a browser environment to enable keepAlive`,\n            );\n          } else {\n            this.logger.debug(`Request #${requestNumber}: Enabling keepAlive`);\n            requestOptions.httpsAgent = new HTTPSAgent({ keepAlive: true });\n          }\n        }\n\n        if (this.configuration.paramsSerializer) {\n          this.logger.debug(\n            `Request #${requestNumber}: Using custom paramsSerializer`,\n          );\n          requestOptions.paramsSerializer = this.configuration.paramsSerializer;\n        }\n\n        if (\n          bodyParameters &&\n          ((typeof bodyParameters === \"string\" &&\n            bodyParameters.length !== 0) ||\n            (typeof bodyParameters === \"object\" &&\n              Object.keys(bodyParameters).length !== 0))\n        ) {\n          requestOptions.data = bodyParameters;\n        }\n\n        // Translate from user-provided AbortController to the Axios request cancel mechanism.\n        if (abortSignal) {\n          const cancelToken = axios.CancelToken;\n          const source = cancelToken.source();\n          abortListener = () => {\n            wasAborted = true;\n            source.cancel();\n          };\n          abortSignal.addEventListener(\"abort\", abortListener);\n          requestOptions.cancelToken = source.token;\n        }\n\n        const response = await axios(requestOptions);\n        if (response.status >= 1 && response.status <= 499) {\n          // Treat any status code > 0 and < 500 to be an indication that node is healthy\n          // We exclude 0 since some clients return 0 when request fails\n          this.setNodeHealthcheck(node, HEALTHY);\n        }\n        this.logger.debug(\n          `Request #${requestNumber}: Request to Node ${node.index} was made. Response Code was ${response.status}.`,\n        );\n\n        if (response.status >= 200 && response.status < 300) {\n          // If response is 2xx return a resolved promise\n          return Promise.resolve(response.data);\n        } else if (response.status < 500) {\n          // Next, if response is anything but 5xx, don't retry, return a custom error\n          return Promise.reject(\n            this.customErrorForResponse(\n              response,\n              response.data?.message,\n              requestOptions.data,\n            ),\n          );\n        } else {\n          // Retry all other HTTP errors (HTTPStatus > 500)\n          // This will get caught by the catch block below\n          throw this.customErrorForResponse(\n            response,\n            response.data?.message,\n            requestOptions.data,\n          );\n        }\n      } catch (error: any) {\n        // This block handles retries for HTTPStatus > 500 and network layer issues like connection timeouts\n        if (!wasAborted) {\n          this.setNodeHealthcheck(node, UNHEALTHY);\n        }\n        lastException = error;\n        this.logger.warn(\n          `Request #${requestNumber}: Request to Node ${\n            node.index\n          } failed due to \"${error?.code ?? \"\"} ${error.message}${\n            error.response == null\n              ? \"\"\n              : \" - \" + JSON.stringify(error.response?.data)\n          }\"`,\n        );\n        // this.logger.debug(error.stack)\n        if (wasAborted) {\n          return Promise.reject(new Error(\"Request aborted by caller.\"));\n        }\n        if (numTries < this.numRetriesPerRequest + 1) {\n          this.logger.warn(\n            `Request #${requestNumber}: Sleeping for ${this.retryIntervalSeconds}s and then retrying request...`,\n          );\n        }\n        await this.timer(this.retryIntervalSeconds);\n      } finally {\n        if (abortSignal && abortListener) {\n          abortSignal.removeEventListener(\"abort\", abortListener);\n        }\n      }\n    }\n    this.logger.debug(\n      `Request #${requestNumber}: No retries left. Raising last error`,\n    );\n    return Promise.reject(lastException);\n  }\n\n  // Attempts to find the next healthy node, looping through the list of nodes once.\n  //   But if no healthy nodes are found, it will just return the next node, even if it's unhealthy\n  //     so we can try the request for good measure, in case that node has become healthy since\n  getNextNode(requestNumber = 0): Node {\n    // Check if nearestNode is set and is healthy, if so return it\n    if (this.nearestNode != null) {\n      this.logger.debug(\n        `Request #${requestNumber}: Nodes Health: Node ${\n          this.nearestNode.index\n        } is ${this.nearestNode.isHealthy === true ? \"Healthy\" : \"Unhealthy\"}`,\n      );\n      if (\n        this.nearestNode.isHealthy === true ||\n        this.nodeDueForHealthcheck(this.nearestNode, requestNumber)\n      ) {\n        this.logger.debug(\n          `Request #${requestNumber}: Updated current node to Node ${this.nearestNode.index}`,\n        );\n        return this.nearestNode;\n      }\n      this.logger.debug(\n        `Request #${requestNumber}: Falling back to individual nodes`,\n      );\n    }\n\n    // Fallback to nodes as usual\n    this.logger.debug(\n      `Request #${requestNumber}: Nodes Health: ${this.nodes\n        .map(\n          (node) =>\n            `Node ${node.index} is ${\n              node.isHealthy === true ? \"Healthy\" : \"Unhealthy\"\n            }`,\n        )\n        .join(\" || \")}`,\n    );\n    let candidateNode: Node = this.nodes[0];\n    for (let i = 0; i <= this.nodes.length; i++) {\n      this.currentNodeIndex = (this.currentNodeIndex + 1) % this.nodes.length;\n      candidateNode = this.nodes[this.currentNodeIndex];\n      if (\n        candidateNode.isHealthy === true ||\n        this.nodeDueForHealthcheck(candidateNode, requestNumber)\n      ) {\n        this.logger.debug(\n          `Request #${requestNumber}: Updated current node to Node ${candidateNode.index}`,\n        );\n        return candidateNode;\n      }\n    }\n\n    // None of the nodes are marked healthy, but some of them could have become healthy since last health check.\n    //  So we will just return the next node.\n    this.logger.debug(\n      `Request #${requestNumber}: No healthy nodes were found. Returning the next node, Node ${candidateNode.index}`,\n    );\n    return candidateNode;\n  }\n\n  nodeDueForHealthcheck(node, requestNumber = 0): boolean {\n    const isDueForHealthcheck =\n      Date.now() - node.lastAccessTimestamp >\n      this.healthcheckIntervalSeconds * 1000;\n    if (isDueForHealthcheck) {\n      this.logger.debug(\n        `Request #${requestNumber}: Node ${node.index} has exceeded healtcheckIntervalSeconds of ${this.healthcheckIntervalSeconds}. Adding it back into rotation.`,\n      );\n    }\n    return isDueForHealthcheck;\n  }\n\n  initializeMetadataForNodes(): void {\n    if (this.nearestNode != null) {\n      this.nearestNode.index = \"nearestNode\";\n      this.setNodeHealthcheck(this.nearestNode, HEALTHY);\n    }\n\n    this.nodes.forEach((node, i) => {\n      node.index = i;\n      this.setNodeHealthcheck(node, HEALTHY);\n    });\n  }\n\n  setNodeHealthcheck(node, isHealthy): void {\n    node.isHealthy = isHealthy;\n    node.lastAccessTimestamp = Date.now();\n  }\n\n  uriFor(endpoint: string, node): string {\n    if (node.url != null) {\n      return `${node.url}${endpoint}`;\n    }\n    return `${node.protocol}://${node.host}:${node.port}${node.path}${endpoint}`;\n  }\n\n  defaultHeaders(): any {\n    const defaultHeaders = {};\n    if (!this.sendApiKeyAsQueryParam) {\n      defaultHeaders[APIKEYHEADERNAME] = this.apiKey;\n    }\n    defaultHeaders[\"Content-Type\"] = \"application/json\";\n    return defaultHeaders;\n  }\n\n  async timer(seconds): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n  }\n\n  customErrorForResponse(\n    response: AxiosResponse,\n    messageFromServer: string,\n    httpBody?: string,\n  ): TypesenseError {\n    let errorMessage = `Request failed with HTTP code ${response.status}`;\n    if (\n      typeof messageFromServer === \"string\" &&\n      messageFromServer.trim() !== \"\"\n    ) {\n      errorMessage += ` | Server said: ${messageFromServer}`;\n    }\n\n    let error = new TypesenseError(errorMessage, httpBody, response.status);\n\n    if (response.status === 400) {\n      error = new RequestMalformed(errorMessage);\n    } else if (response.status === 401) {\n      error = new RequestUnauthorized(errorMessage);\n    } else if (response.status === 404) {\n      error = new ObjectNotFound(errorMessage);\n    } else if (response.status === 409) {\n      error = new ObjectAlreadyExists(errorMessage);\n    } else if (response.status === 422) {\n      error = new ObjectUnprocessable(errorMessage);\n    } else if (response.status >= 500 && response.status <= 599) {\n      error = new ServerError(errorMessage);\n    } else {\n      error = new HTTPError(errorMessage);\n    }\n\n    return error;\n  }\n}\n","const defaultCacheResponseForSeconds = 2 * 60;\nconst defaultMaxSize = 100;\n\nexport default class RequestWithCache {\n  private responseCache: Map<string, any> = new Map<string, any>();\n  private responsePromiseCache: Map<string, any> = new Map<string, any>();\n\n  clearCache() {\n    this.responseCache = new Map<string, any>();\n    this.responsePromiseCache = new Map<string, any>();\n  }\n\n  // Todo: should probably be passed a callback instead, or an apiCall instance. Types are messy this way\n  async perform<T>(\n    requestContext: any,\n    requestFunction: (...params: any) => unknown,\n    requestFunctionArguments: any[],\n    cacheOptions: CacheOptions\n  ): Promise<T | unknown> {\n    const {\n      cacheResponseForSeconds = defaultCacheResponseForSeconds,\n      maxSize = defaultMaxSize,\n    } = cacheOptions;\n    const isCacheDisabled = cacheResponseForSeconds <= 0 || maxSize <= 0;\n\n    if (isCacheDisabled) {\n      return requestFunction.call(requestContext, ...requestFunctionArguments);\n    }\n\n    const requestFunctionArgumentsJSON = JSON.stringify(\n      requestFunctionArguments\n    );\n    const cacheEntry = this.responseCache.get(requestFunctionArgumentsJSON);\n    const now = Date.now();\n\n    if (cacheEntry) {\n      const isEntryValid =\n        now - cacheEntry.requestTimestamp < cacheResponseForSeconds * 1000;\n      if (isEntryValid) {\n        this.responseCache.delete(requestFunctionArgumentsJSON);\n        this.responseCache.set(requestFunctionArgumentsJSON, cacheEntry);\n        return Promise.resolve(cacheEntry.response);\n      } else {\n        this.responseCache.delete(requestFunctionArgumentsJSON);\n      }\n    }\n\n    const cachePromiseEntry = this.responsePromiseCache.get(\n      requestFunctionArgumentsJSON\n    );\n\n    if (cachePromiseEntry) {\n      const isEntryValid =\n        now - cachePromiseEntry.requestTimestamp <\n        cacheResponseForSeconds * 1000;\n      if (isEntryValid) {\n        this.responsePromiseCache.delete(requestFunctionArgumentsJSON);\n        this.responsePromiseCache.set(\n          requestFunctionArgumentsJSON,\n          cachePromiseEntry\n        );\n        return cachePromiseEntry.responsePromise;\n      } else {\n        this.responsePromiseCache.delete(requestFunctionArgumentsJSON);\n      }\n    }\n\n    const responsePromise = requestFunction.call(\n      requestContext,\n      ...requestFunctionArguments\n    );\n    this.responsePromiseCache.set(requestFunctionArgumentsJSON, {\n      requestTimestamp: now,\n      responsePromise,\n    });\n\n    const response = await responsePromise;\n    this.responseCache.set(requestFunctionArgumentsJSON, {\n      requestTimestamp: now,\n      response,\n    });\n\n    const isCacheOverMaxSize = this.responseCache.size > maxSize;\n    if (isCacheOverMaxSize) {\n      const oldestEntry = this.responseCache.keys().next().value;\n      if (oldestEntry) {\n        this.responseCache.delete(oldestEntry);\n      }\n    }\n    const isResponsePromiseCacheOverMaxSize =\n      this.responsePromiseCache.size > maxSize;\n    if (isResponsePromiseCacheOverMaxSize) {\n      const oldestEntry = this.responsePromiseCache.keys().next().value;\n      if (oldestEntry) {\n        this.responsePromiseCache.delete(oldestEntry);\n      }\n    }\n    return response as T;\n  }\n}\n\ninterface CacheOptions {\n  cacheResponseForSeconds?: number;\n  maxSize?: number;\n}\n","import ApiCall from \"./ApiCall\";\nimport { CollectionFieldSchema, CollectionSchema } from \"./Collection\";\n\nexport interface CollectionCreateSchema {\n  name: string;\n  default_sorting_field?: string;\n  fields?: CollectionFieldSchema[];\n  symbols_to_index?: string[];\n  token_separators?: string[];\n  enable_nested_fields?: boolean;\n  metadata?: object;\n  voice_query_model?: {\n    model_name?: string;\n  };\n}\n\nexport interface CollectionCreateOptions {\n  src_name?: string;\n}\n\nexport interface CollectionsRetrieveOptions {\n  exclude_fields?: string;\n}\n\nconst RESOURCEPATH = \"/collections\";\n\nexport default class Collections {\n  constructor(private apiCall: ApiCall) {}\n\n  async create(\n    schema: CollectionCreateSchema,\n    options: CollectionCreateOptions = {},\n  ): Promise<CollectionSchema> {\n    return this.apiCall.post<CollectionSchema>(RESOURCEPATH, schema, options);\n  }\n\n  async retrieve(\n    options: CollectionsRetrieveOptions = {},\n  ): Promise<CollectionSchema[]> {\n    return this.apiCall.get<CollectionSchema[]>(RESOURCEPATH, options);\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import RequestWithCache from \"./RequestWithCache\";\nimport ApiCall from \"./ApiCall\";\nimport Configuration from \"./Configuration\";\nimport Collections from \"./Collections\";\nimport type {\n  DocumentSchema,\n  SearchableDocuments,\n  SearchOptions,\n  SearchParams,\n  SearchParamsWithPreset,\n  SearchResponse,\n} from \"./Documents\";\nimport { normalizeArrayableParams } from \"./Utils\";\n\nconst RESOURCEPATH = \"/documents\";\n\nexport class SearchOnlyDocuments<T extends DocumentSchema>\n  implements SearchableDocuments<T>\n{\n  protected requestWithCache: RequestWithCache = new RequestWithCache();\n\n  constructor(\n    protected collectionName: string,\n    protected apiCall: ApiCall,\n    protected configuration: Configuration\n  ) {}\n\n  clearCache() {\n    this.requestWithCache.clearCache();\n  }\n\n  async search(\n    searchParameters: SearchParams | SearchParamsWithPreset,\n    {\n      cacheSearchResultsForSeconds = this.configuration\n        .cacheSearchResultsForSeconds,\n      abortSignal = null,\n    }: SearchOptions = {}\n  ): Promise<SearchResponse<T>> {\n    const additionalQueryParams = {};\n    if (this.configuration.useServerSideSearchCache === true) {\n      additionalQueryParams[\"use_cache\"] = true;\n    }\n    const normalizedParams = normalizeArrayableParams(searchParameters);\n    const queryParams = Object.assign(\n      {},\n      additionalQueryParams,\n      normalizedParams,\n    );\n\n    return this.requestWithCache.perform(\n      this.apiCall,\n      this.apiCall.get,\n      [this.endpointPath(\"search\"), queryParams, { abortSignal }],\n      {\n        cacheResponseForSeconds: cacheSearchResultsForSeconds,\n      }\n    ) as Promise<SearchResponse<T>>;\n  }\n\n  protected endpointPath(operation?: string) {\n    return `${Collections.RESOURCEPATH}/${this.collectionName}${RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + operation\n    }`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import type { ReadStream } from \"fs\";\nimport ApiCall from \"./ApiCall\";\nimport Configuration from \"./Configuration\";\nimport { ImportError } from \"./Errors\";\nimport { SearchOnlyDocuments } from \"./SearchOnlyDocuments\";\n\n// Todo: use generic to extract filter_by values\nexport type DeleteQuery =\n  | {\n      truncate?: true;\n    }\n  | {\n      truncate?: never;\n      filter_by?: string;\n      batch_size?: number;\n      ignore_not_found?: boolean;\n    };\n\nexport interface DeleteResponse {\n  num_deleted: number;\n}\n\ninterface ImportResponseSuccess {\n  success: true;\n}\n\nexport interface ImportResponseFail {\n  success: false;\n  error: string;\n  document: DocumentSchema;\n  code: number;\n}\n\nexport type ImportResponse = ImportResponseSuccess | ImportResponseFail;\n\nexport type DocumentSchema = Record<string, any>;\n\nexport interface SearchParamsWithPreset extends Partial<SearchParams> {\n  preset: string;\n}\n\nexport type DropTokensMode = \"right_to_left\" | \"left_to_right\" | \"both_sides:3\";\n\nexport type OperationMode = \"off\" | \"always\" | \"fallback\";\n\nexport type UnionArrayKeys<T> = {\n  [K in keyof T]: T[K] extends undefined\n    ? never\n    : NonNullable<T[K]> extends infer R\n      ? R extends R[]\n        ? never\n        : R extends (infer U)[] | infer U\n          ? U[] extends R\n            ? K\n            : never\n          : never\n      : never;\n}[keyof T] &\n  keyof T;\n\nexport type UnionArraySearchParams = UnionArrayKeys<SearchParams>;\n\nexport type ArraybleParams = {\n  readonly [K in UnionArraySearchParams]: string;\n};\n\nexport type ExtractBaseTypes<T> = {\n  [K in keyof T]: K extends UnionArrayKeys<T>\n    ? T[K] extends (infer U)[] | infer U\n      ? U\n      : T[K]\n    : T[K];\n};\n\nexport const arrayableParams: ArraybleParams = {\n  query_by: \"query_by\",\n  query_by_weights: \"query_by_weights\",\n  facet_by: \"facet_by\",\n  group_by: \"group_by\",\n  include_fields: \"include_fields\",\n  exclude_fields: \"exclude_fields\",\n  highlight_fields: \"highlight_fields\",\n  highlight_full_fields: \"highlight_full_fields\",\n  pinned_hits: \"pinned_hits\",\n  hidden_hits: \"hidden_hits\",\n  infix: \"infix\",\n  override_tags: \"override_tags\",\n  num_typos: \"num_typos\",\n  prefix: \"prefix\",\n  sort_by: \"sort_by\",\n};\n\nexport interface SearchParams {\n  // From https://typesense.org/docs/latest/api/documents.html#arguments\n  // eslint-disable-next-line @typescript-eslint/ban-types -- Can't use `object` here, it needs to intersect with `{}`\n  q?: \"*\" | (string & {});\n  query_by?: string | string[];\n  query_by_weights?: string | number[];\n  prefix?: string | boolean | boolean[]; // default: true\n  filter_by?: string;\n  max_filter_by_candidates?: number; // default: 4\n  enable_synonyms?: boolean; // default: true\n  enable_analytics?: boolean; // default: true\n  filter_curated_hits?: boolean; // default: false\n  enable_lazy_filter?: boolean; // default: false\n  sort_by?: string | string[]; // default: text match desc\n  facet_by?: string | string[];\n  max_facet_values?: number;\n  facet_sample_threshold?: number;\n  facet_sample_percent?: number;\n  facet_query?: string;\n  facet_query_num_typos?: number;\n  facet_return_parent?: string;\n  facet_strategy?: \"exhaustive\" | \"top_values\" | \"automatic\";\n  page?: number; // default: 1\n  per_page?: number; // default: 10, max 250\n  group_by?: string | string[];\n  group_limit?: number; // default:\n  group_missing_values?: boolean;\n  include_fields?: string | string[];\n  exclude_fields?: string | string[];\n  highlight_fields?: string | string[]; // default: all queried fields\n  highlight_full_fields?: string | string[]; // default: all fields\n  highlight_affix_num_tokens?: number; // default: 4\n  highlight_start_tag?: string; // default: <mark>\n  highlight_end_tag?: string; // default: </mark>\n  enable_highlight_v1?: boolean;\n  snippet_threshold?: number; // default: 30\n  num_typos?: string | number | number[]; // default: 2\n  min_len_1typo?: number;\n  min_len_2typo?: number;\n  split_join_tokens?: OperationMode;\n  exhaustive_search?: boolean;\n  drop_tokens_threshold?: number; // default: 10\n  drop_tokens_mode?: DropTokensMode;\n  typo_tokens_threshold?: number; // default: 100\n  pinned_hits?: string | string[];\n  hidden_hits?: string | string[];\n  limit_hits?: number; // default: no limit\n  pre_segmented_query?: boolean;\n  enable_overrides?: boolean;\n  override_tags?: string | string[];\n  prioritize_exact_match?: boolean; // default: true\n  prioritize_token_position?: boolean;\n  prioritize_num_matching_fields?: boolean;\n  search_cutoff_ms?: number;\n  use_cache?: boolean;\n  max_candidates?: number;\n  infix?: OperationMode | OperationMode[];\n  preset?: string;\n  text_match_type?: \"max_score\" | \"max_weight\";\n  vector_query?: string;\n  \"x-typesense-api-key\"?: string;\n  \"x-typesense-user-id\"?: string;\n  offset?: number;\n  limit?: number;\n  stopwords?: string;\n  conversation?: boolean;\n  conversation_model_id?: string;\n  conversation_id?: string;\n  voice_query?: string;\n}\n\ntype SearchResponseHighlightObject = {\n  matched_tokens?: string[];\n  snippet?: string;\n  value?: string;\n};\n\nexport type SearchResponseHighlight<T> = T extends string | number\n  ? SearchResponseHighlightObject\n  : {\n      [TAttribute in keyof T]?: SearchResponseHighlight<T[TAttribute]>;\n    };\n\nexport interface SearchResponseHit<T extends DocumentSchema> {\n  curated?: true;\n  highlights?: [\n    {\n      field: keyof T;\n      snippet?: string;\n      value?: string;\n      snippets?: string[];\n      indices?: number[];\n      matched_tokens: string[][] | string[];\n    },\n  ];\n  highlight: SearchResponseHighlight<T>;\n  document: T;\n  text_match: number;\n  text_match_info?: {\n    best_field_score: `${number}`; // To prevent scores from being truncated by JSON spec\n    best_field_weight: number;\n    fields_matched: number;\n    score: `${number}`; // To prevent scores from being truncated by JSON spec\n    tokens_matched: number;\n  };\n}\n\nexport interface SearchResponseFacetCountSchema<T extends DocumentSchema> {\n  counts: {\n    count: number;\n    highlighted: string;\n    value: string;\n  }[];\n  field_name: keyof T;\n  stats: {\n    avg?: number;\n    max?: number;\n    min?: number;\n    sum?: number;\n  };\n}\n\nexport interface SearchResponseRequestParams {\n  collection_name?: string;\n  q?: string;\n  page?: number;\n  per_page?: number;\n  first_q?: string;\n  voice_query?: {\n    transcribed_query?: string;\n  };\n}\n\n// Todo: we could infer whether this is a grouped response by adding the search params as a generic\nexport interface SearchResponse<T extends DocumentSchema> {\n  facet_counts?: SearchResponseFacetCountSchema<T>[];\n  found: number;\n  found_docs?: number;\n  out_of: number;\n  page: number;\n  request_params: SearchResponseRequestParams;\n  search_time_ms: number;\n  search_cutoff?: boolean;\n  hits?: SearchResponseHit<T>[];\n  grouped_hits?: {\n    group_key: string[];\n    hits: SearchResponseHit<T>[];\n    found?: number;\n  }[];\n  conversation?: {\n    answer: string;\n    conversation_history: {\n      conversation: object[];\n      id: string;\n      last_updated: number;\n      ttl: number;\n    };\n    conversation_id: string;\n    query: string;\n  };\n  error?: string;\n  code?: number;\n}\n\nexport interface DocumentWriteParameters {\n  dirty_values?: \"coerce_or_reject\" | \"coerce_or_drop\" | \"drop\" | \"reject\";\n  action?: \"create\" | \"update\" | \"upsert\" | \"emplace\";\n}\n\nexport interface UpdateByFilterParameters {\n  filter_by?: string;\n}\n\nexport interface UpdateByFilterResponse {\n  num_updated: number;\n}\n\nexport interface DocumentImportParameters extends DocumentWriteParameters {\n  batch_size?: number;\n  return_doc?: boolean;\n  return_id?: boolean;\n}\n\nexport interface DocumentsExportParameters {\n  filter_by?: string;\n  include_fields?: string;\n  exclude_fields?: string;\n}\n\nexport interface SearchableDocuments<T extends DocumentSchema> {\n  search(\n    searchParameters: SearchParams | SearchParamsWithPreset,\n    options: SearchOptions,\n  ): Promise<SearchResponse<T>>;\n  clearCache(): void;\n}\n\nexport interface WriteableDocuments<T> {\n  create(document: T, options: DocumentWriteParameters): Promise<T>;\n  upsert(document: T, options: DocumentWriteParameters): Promise<T>;\n  update(document: T, options: DocumentWriteParameters): Promise<T>;\n  delete(query: DeleteQuery): Promise<DeleteResponse>;\n  import(\n    documents: T[] | string,\n    options: DocumentWriteParameters,\n  ): Promise<string | ImportResponse[]>;\n  export(options: DocumentsExportParameters): Promise<string>;\n}\n\nexport interface SearchOptions {\n  cacheSearchResultsForSeconds?: number;\n  abortSignal?: AbortSignal | null;\n}\n\nconst isNodeJSEnvironment =\n  typeof process !== \"undefined\" &&\n  process.versions != null &&\n  process.versions.node != null;\n\nexport default class Documents<T extends DocumentSchema = object>\n  extends SearchOnlyDocuments<T>\n  implements WriteableDocuments<T>\n{\n  constructor(\n    collectionName: string,\n    apiCall: ApiCall,\n    configuration: Configuration,\n  ) {\n    super(collectionName, apiCall, configuration);\n  }\n\n  async create(document: T, options: DocumentWriteParameters = {}): Promise<T> {\n    if (!document) throw new Error(\"No document provided\");\n    return this.apiCall.post<T>(this.endpointPath(), document, options);\n  }\n\n  async upsert(document: T, options: DocumentWriteParameters = {}): Promise<T> {\n    if (!document) throw new Error(\"No document provided\");\n    return this.apiCall.post<T>(\n      this.endpointPath(),\n      document,\n      Object.assign({}, options, { action: \"upsert\" }),\n    );\n  }\n\n  async update(\n    document: T,\n    options: UpdateByFilterParameters,\n  ): Promise<UpdateByFilterResponse>;\n  async update(document: T, options: DocumentWriteParameters): Promise<T>;\n  async update(\n    document: T,\n    options: DocumentWriteParameters | UpdateByFilterParameters = {},\n  ): Promise<UpdateByFilterResponse | T> {\n    if (!document) throw new Error(\"No document provided\");\n\n    if (options[\"filter_by\"] != null) {\n      return this.apiCall.patch<T>(\n        this.endpointPath(),\n        document,\n        Object.assign({}, options),\n      );\n    } else {\n      return this.apiCall.post<T>(\n        this.endpointPath(),\n        document,\n        Object.assign({}, options, { action: \"update\" }),\n      );\n    }\n  }\n\n  async delete(\n    query: DeleteQuery = {} as DeleteQuery,\n  ): Promise<DeleteResponse> {\n    return this.apiCall.delete<DeleteResponse>(this.endpointPath(), query);\n  }\n\n  async createMany(documents: T[], options: DocumentImportParameters = {}) {\n    this.configuration.logger.warn(\n      \"createMany is deprecated and will be removed in a future version. Use import instead, which now takes both an array of documents or a JSONL string of documents\",\n    );\n    return this.import(documents, options);\n  }\n\n  /**\n   * Import a set of documents in a batch.\n   * @param {string|Array} documents - Can be a JSONL string of documents or an array of document objects.\n   * @param options\n   * @return {string|Array} Returns a JSONL string if the input was a JSONL string, otherwise it returns an array of results.\n   */\n  async import(\n    documents: string,\n    options?: DocumentImportParameters,\n  ): Promise<string>;\n  async import(\n    documents: T[],\n    options?: DocumentImportParameters,\n  ): Promise<ImportResponse[]>;\n  async import(\n    documents: T[] | string,\n    options: DocumentImportParameters = {},\n  ): Promise<string | ImportResponse[]> {\n    let documentsInJSONLFormat;\n    if (Array.isArray(documents)) {\n      try {\n        documentsInJSONLFormat = documents\n          .map((document) => JSON.stringify(document))\n          .join(\"\\n\");\n      } catch (error: any) {\n        // if rangeerror, throw custom error message\n        if (\n          error instanceof RangeError &&\n          error.message.includes(\"Too many properties to enumerate\")\n        ) {\n          throw new Error(`${error}\n          It looks like you have reached a Node.js limit that restricts the number of keys in an Object: https://stackoverflow.com/questions/9282869/are-there-limits-to-the-number-of-properties-in-a-javascript-object\n\n         Please try reducing the number of keys in your document, or using CURL to import your data.\n          `);\n        }\n\n        // else, throw the non-range error anyways\n        throw new Error(error);\n      }\n    } else {\n      documentsInJSONLFormat = documents;\n    }\n\n    const resultsInJSONLFormat = await this.apiCall.performRequest<string>(\n      \"post\",\n      this.endpointPath(\"import\"),\n      {\n        queryParameters: options,\n        bodyParameters: documentsInJSONLFormat,\n        additionalHeaders: { \"Content-Type\": \"text/plain\" },\n        skipConnectionTimeout: true, // We never want to client-side-timeout on an import and retry, since imports are syncronous and we want to let them take as long as it takes to complete fully\n        enableKeepAlive: isNodeJSEnvironment ? true : false, // This is to prevent ECONNRESET socket hang up errors. Reference: https://github.com/axios/axios/issues/2936#issuecomment-779439991\n      },\n    );\n\n    if (Array.isArray(documents)) {\n      const resultsInJSONFormat = resultsInJSONLFormat\n        .split(\"\\n\")\n        .map((r) => JSON.parse(r)) as ImportResponse[];\n      const failedItems = resultsInJSONFormat.filter(\n        (r) => r.success === false,\n      );\n      if (failedItems.length > 0) {\n        throw new ImportError(\n          `${\n            resultsInJSONFormat.length - failedItems.length\n          } documents imported successfully, ${\n            failedItems.length\n          } documents failed during import. Use \\`error.importResults\\` from the raised exception to get a detailed error reason for each document.`,\n          resultsInJSONFormat,\n          {\n            documentsInJSONLFormat,\n            options,\n            failedItems,\n            successCount: resultsInJSONFormat.length - failedItems.length,\n          },\n        );\n      } else {\n        return resultsInJSONFormat;\n      }\n    } else {\n      return resultsInJSONLFormat as string;\n    }\n  }\n  /**\n   * Imports documents from a NodeJS readable stream of JSONL.\n   */\n  async importStream(\n    readableStream: ReadStream,\n    options: DocumentImportParameters = {},\n  ): Promise<ImportResponse[]> {\n    const resultsInJSONLFormat = await this.apiCall.performRequest<string>(\n      \"post\",\n      this.endpointPath(\"import\"),\n      {\n        queryParameters: options,\n        bodyParameters: readableStream,\n        additionalHeaders: { \"Content-Type\": \"text/plain\" },\n        skipConnectionTimeout: true, // We never want to client-side-timeout on an import and retry, since imports are syncronous and we want to let them take as long as it takes to complete fully\n        enableKeepAlive: isNodeJSEnvironment ? true : false, // This is to prevent ECONNRESET socket hang up errors. Reference: https://github.com/axios/axios/issues/2936#issuecomment-779439991\n      },\n    );\n\n    const resultsInJSONFormat = resultsInJSONLFormat\n      .split(\"\\n\")\n      .map((r) => JSON.parse(r)) as ImportResponse[];\n    const failedItems = resultsInJSONFormat.filter((r) => r.success === false);\n    if (failedItems.length > 0) {\n      throw new ImportError(\n        `${\n          resultsInJSONFormat.length - failedItems.length\n        } documents imported successfully, ${\n          failedItems.length\n        } documents failed during import. Use \\`error.importResults\\` from the raised exception to get a detailed error reason for each document.`,\n        resultsInJSONFormat,\n        {\n          documentsInJSONLFormat: readableStream,\n          options,\n          failedItems,\n          successCount: resultsInJSONFormat.length - failedItems.length,\n        },\n      );\n    } else {\n      return resultsInJSONFormat;\n    }\n  }\n\n  /**\n   * Returns a JSONL string for all the documents in this collection\n   */\n  async export(options: DocumentsExportParameters = {}): Promise<string> {\n    return this.apiCall.get<string>(this.endpointPath(\"export\"), options);\n  }\n\n  /**\n   * Returns a NodeJS readable stream of JSONL for all the documents in this collection.\n   */\n  async exportStream(\n    options: DocumentsExportParameters = {},\n  ): Promise<ReadStream> {\n    return this.apiCall.get<ReadStream>(this.endpointPath(\"export\"), options, {\n      responseType: \"stream\",\n    });\n  }\n}\n","import { arrayableParams } from \"./Documents\";\nimport type {\n  UnionArrayKeys,\n  ExtractBaseTypes,\n  SearchParams,\n} from \"./Documents\";\n\nfunction hasNoArrayValues<T extends SearchParams>(\n  params: T | ExtractBaseTypes<T>,\n): params is ExtractBaseTypes<T> {\n  return Object.keys(arrayableParams)\n    .filter((key) => params[key] !== undefined)\n    .every((key) => isNonArrayValue(params[key]));\n}\n\nexport function normalizeArrayableParams<T extends SearchParams>(\n  params: T,\n): Prettify<ExtractBaseTypes<T>> {\n  const result = { ...params };\n\n  const transformedValues = Object.keys(arrayableParams)\n    .filter((key) => Array.isArray(result[key]))\n    .map((key) => {\n      result[key] = result[key].join(\",\");\n      return key;\n    });\n\n  if (!transformedValues.length && hasNoArrayValues(result)) {\n    return result;\n  }\n\n  if (!hasNoArrayValues(result)) {\n    throw new Error(\n      `Failed to normalize arrayable params: ${JSON.stringify(result)}`,\n    );\n  }\n\n  return result;\n}\n\nfunction isNonArrayValue<T extends SearchParams, K extends UnionArrayKeys<T>>(\n  value: T[K] | ExtractBaseTypes<T>[K],\n): value is ExtractBaseTypes<T>[K] {\n  return !Array.isArray(value);\n}\n\ntype Prettify<T> = {\n  [K in keyof T]: T[K];\n  // eslint-disable-next-line @typescript-eslint/ban-types\n} & {};\n","import ApiCall from \"./ApiCall\";\nimport Configuration from \"./Configuration\";\nimport RequestWithCache from \"./RequestWithCache\";\nimport {\n  DocumentSchema,\n  SearchParams,\n  SearchParamsWithPreset,\n  SearchResponse,\n} from \"./Documents\";\nimport { normalizeArrayableParams } from \"./Utils\";\n\nconst RESOURCEPATH = \"/multi_search\";\n\nexport interface MultiSearchRequestSchema extends SearchParams {\n  collection?: string;\n  rerank_hybrid_matches?: boolean;\n  \"x-typesense-api-key\"?: string;\n}\n\nexport interface MultiSearchRequestWithPresetSchema\n  extends SearchParamsWithPreset {\n  collection?: string;\n  \"x-typesense-api-key\"?: string;\n}\n\nexport interface MultiSearchRequestsSchema {\n  union?: true;\n  searches: (MultiSearchRequestSchema | MultiSearchRequestWithPresetSchema)[];\n}\n\nexport interface MultiSearchResponse<T extends DocumentSchema[] = []> {\n  results: { [Index in keyof T]: SearchResponse<T[Index]> } & {\n    length: T[\"length\"];\n  };\n}\n\nexport default class MultiSearch {\n  private requestWithCache: RequestWithCache;\n\n  constructor(\n    private apiCall: ApiCall,\n    private configuration: Configuration,\n    private useTextContentType: boolean = false\n  ) {\n    this.requestWithCache = new RequestWithCache();\n  }\n\n  clearCache() {\n    this.requestWithCache.clearCache();\n  }\n\n  async perform<T extends DocumentSchema[] = []>(\n    searchRequests: MultiSearchRequestsSchema,\n    commonParams: Partial<MultiSearchRequestSchema> = {},\n    {\n      cacheSearchResultsForSeconds = this.configuration\n        .cacheSearchResultsForSeconds,\n    }: { cacheSearchResultsForSeconds?: number } = {}\n  ): Promise<MultiSearchResponse<T>> {\n    const additionalHeaders = {};\n    if (this.useTextContentType) {\n      additionalHeaders[\"content-type\"] = \"text/plain\";\n    }\n\n    const additionalQueryParams = {};\n    if (this.configuration.useServerSideSearchCache === true) {\n      additionalQueryParams[\"use_cache\"] = true;\n    }\n\n    const queryParams = { ...commonParams, ...additionalQueryParams };\n\n    const normalizedSearchRequests = {\n      searches: searchRequests.searches.map(normalizeArrayableParams),\n    };\n\n    const normalizedQueryParams = normalizeArrayableParams(queryParams);\n\n    return this.requestWithCache.perform(\n      this.apiCall,\n      this.apiCall.post,\n      [\n        RESOURCEPATH,\n        normalizedSearchRequests,\n        normalizedQueryParams,\n        additionalHeaders,\n      ],\n      { cacheResponseForSeconds: cacheSearchResultsForSeconds },\n    ) as Promise<MultiSearchResponse<T>>;\n  }\n}\n","import { DocumentSchema, SearchableDocuments } from \"./Documents\";\nimport ApiCall from \"./ApiCall\";\nimport { SearchOnlyDocuments } from \"./SearchOnlyDocuments\";\n\nexport class SearchOnlyCollection<T extends DocumentSchema = object> {\n  private readonly _documents: SearchableDocuments<T>;\n\n  constructor(\n    private readonly name: string,\n    private readonly apiCall: ApiCall,\n    private readonly configuration: any\n  ) {\n    this._documents = new SearchOnlyDocuments(\n      this.name,\n      this.apiCall,\n      this.configuration\n    );\n  }\n\n  documents(): SearchableDocuments<T> {\n    return this._documents;\n  }\n}\n","import Configuration, { ConfigurationOptions } from \"./Configuration\";\nimport ApiCall from \"./ApiCall\";\nimport MultiSearch from \"./MultiSearch\";\nimport { DocumentSchema } from \"./Documents\";\nimport { SearchOnlyCollection } from \"./SearchOnlyCollection\";\n\nexport default class SearchClient {\n  public readonly multiSearch: MultiSearch;\n  private readonly configuration: Configuration;\n  private readonly apiCall: ApiCall;\n  private readonly individualCollections: Record<string, SearchOnlyCollection>;\n\n  constructor(options: ConfigurationOptions) {\n    options.sendApiKeyAsQueryParam = options.sendApiKeyAsQueryParam ?? true;\n    if (\n      options.sendApiKeyAsQueryParam === true &&\n      (options.apiKey || \"\").length > 2000\n    ) {\n      console.warn(\n        \"[typesense] API Key is longer than 2000 characters which is over the allowed limit, so disabling sending it as a query parameter.\"\n      );\n      options.sendApiKeyAsQueryParam = false;\n    }\n\n    this.configuration = new Configuration(options);\n    this.apiCall = new ApiCall(this.configuration);\n    this.multiSearch = new MultiSearch(this.apiCall, this.configuration, true);\n    this.individualCollections = {};\n  }\n\n  clearCache() {\n    this.multiSearch.clearCache();\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Object.entries(this.individualCollections).forEach(([_, collection]) => {\n      collection.documents().clearCache();\n    });\n  }\n\n  collections<TDocumentSchema extends DocumentSchema = object>(\n    collectionName: string\n  ): SearchOnlyCollection<TDocumentSchema> | SearchOnlyCollection {\n    if (!collectionName) {\n      throw new Error(\n        \"Typesense.SearchClient only supports search operations, so the collectionName that needs to \" +\n          \"be searched must be specified. Use Typesense.Client if you need to access the collection object.\"\n      );\n    } else {\n      if (this.individualCollections[collectionName] === undefined) {\n        this.individualCollections[collectionName] = new SearchOnlyCollection(\n          collectionName,\n          this.apiCall,\n          this.configuration\n        );\n      }\n      return this.individualCollections[collectionName];\n    }\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport { OverrideSchema } from \"./Override\";\n\nconst RESOURCEPATH = \"/overrides\";\n\nexport interface OverrideRuleQuerySchema {\n  query?: string;\n  match?: \"exact\" | \"contains\";\n}\n\nexport interface OverrideRuleFilterSchema {\n  filter_by?: string;\n}\n\nexport interface OverrideRuleTagsSchema {\n  tags?: string[];\n}\n\nexport interface OverrideCreateSchema {\n  rule: OverrideRuleQuerySchema &\n    OverrideRuleFilterSchema &\n    OverrideRuleTagsSchema;\n  filter_by?: string;\n  sort_by?: string;\n  remove_matched_tokens?: boolean;\n  replace_query?: string;\n  includes?: Array<{\n    id: string;\n    position: number;\n  }>;\n  excludes?: Array<{ id: string }>;\n  filter_curated_hits?: boolean;\n  effective_from_ts?: number;\n  effective_to_ts?: number;\n  stop_processing?: boolean;\n  metadata?: object;\n}\n\nexport interface OverridesRetrieveSchema {\n  overrides: OverrideSchema[];\n}\n\nexport default class Overrides {\n  constructor(\n    private collectionName: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async upsert(\n    overrideId: string,\n    params: OverrideCreateSchema,\n  ): Promise<OverrideSchema> {\n    return this.apiCall.put<OverrideSchema>(\n      this.endpointPath(overrideId),\n      params,\n    );\n  }\n\n  async retrieve(): Promise<OverridesRetrieveSchema> {\n    return this.apiCall.get<OverridesRetrieveSchema>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${Collections.RESOURCEPATH}/${this.collectionName}${\n      Overrides.RESOURCEPATH\n    }${operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)}`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport Overrides, { OverrideCreateSchema } from \"./Overrides\";\n\nexport interface OverrideSchema extends OverrideCreateSchema {\n  id: string;\n}\n\nexport interface OverrideDeleteSchema {\n  id: string;\n}\n\nexport default class Override {\n  constructor(\n    private collectionName: string,\n    private overrideId: string,\n    private apiCall: ApiCall\n  ) {}\n\n  async retrieve(): Promise<OverrideSchema> {\n    return this.apiCall.get<OverrideSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<OverrideDeleteSchema> {\n    return this.apiCall.delete<OverrideDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.collectionName)}${Overrides.RESOURCEPATH}/${encodeURIComponent(this.overrideId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport { SynonymSchema } from \"./Synonym\";\n\nconst RESOURCEPATH = \"/synonyms\";\n\nexport interface SynonymCreateSchema {\n  synonyms: string[];\n  root?: string;\n  locale?: string;\n  symbols_to_index?: string[];\n}\n\nexport interface SynonymsRetrieveSchema {\n  synonyms: SynonymSchema[];\n}\n\nexport default class Synonyms {\n  constructor(private collectionName: string, private apiCall: ApiCall) {}\n\n  async upsert(\n    synonymId: string,\n    params: SynonymCreateSchema\n  ): Promise<SynonymSchema> {\n    return this.apiCall.put<SynonymSchema>(\n      this.endpointPath(synonymId),\n      params\n    );\n  }\n\n  async retrieve(): Promise<SynonymsRetrieveSchema> {\n    return this.apiCall.get<SynonymsRetrieveSchema>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string) {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.collectionName)}${\n      Synonyms.RESOURCEPATH\n    }${operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)}`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport Synonyms, { SynonymCreateSchema } from \"./Synonyms\";\n\nexport interface SynonymSchema extends SynonymCreateSchema {\n  id: string;\n}\n\nexport interface SynonymDeleteSchema {\n  id: string;\n}\n\nexport default class Synonym {\n  constructor(\n    private collectionName: string,\n    private synonymId: string,\n    private apiCall: ApiCall\n  ) {}\n\n  async retrieve(): Promise<SynonymSchema> {\n    return this.apiCall.get<SynonymSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<SynonymDeleteSchema> {\n    return this.apiCall.delete<SynonymDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.collectionName)}${Synonyms.RESOURCEPATH}/${encodeURIComponent(this.synonymId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport Documents, {\n  DeleteQuery,\n  DocumentSchema,\n  DocumentWriteParameters,\n} from \"./Documents\";\n\nexport class Document<T extends DocumentSchema = object> {\n  constructor(\n    private collectionName: string,\n    private documentId: string,\n    private apiCall: ApiCall\n  ) {}\n\n  async retrieve(): Promise<T> {\n    return this.apiCall.get<T>(this.endpointPath());\n  }\n\n  async delete(options?: DeleteQuery): Promise<T> {\n    return this.apiCall.delete<T>(this.endpointPath(), options);\n  }\n\n  async update(\n    partialDocument: Partial<T>,\n    options: DocumentWriteParameters = {}\n  ): Promise<T> {\n    return this.apiCall.patch<T>(this.endpointPath(), partialDocument, options);\n  }\n\n  private endpointPath(): string {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.collectionName)}${Documents.RESOURCEPATH}/${encodeURIComponent(this.documentId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Collections, { CollectionCreateSchema } from \"./Collections\";\nimport Documents, { DocumentSchema } from \"./Documents\";\nimport { ObjectNotFound } from \"./Errors\";\nimport Overrides from \"./Overrides\";\nimport Override from \"./Override\";\nimport Synonyms from \"./Synonyms\";\nimport Synonym from \"./Synonym\";\nimport { Document } from \"./Document\";\n\nexport type FieldType =\n  | \"string\"\n  | \"int32\"\n  | \"int64\"\n  | \"float\"\n  | \"bool\"\n  | \"geopoint\"\n  | \"geopolygon\"\n  | \"geopoint[]\"\n  | \"string[]\"\n  | \"int32[]\"\n  | \"int64[]\"\n  | \"float[]\"\n  | \"bool[]\"\n  | \"object\"\n  | \"object[]\"\n  | \"auto\"\n  | \"string*\"\n  | \"image\";\n\nexport interface CollectionFieldSchema\n  extends Pick<\n    CollectionCreateSchema,\n    \"token_separators\" | \"symbols_to_index\"\n  > {\n  name: string;\n  type: FieldType;\n  optional?: boolean;\n  facet?: boolean;\n  index?: boolean;\n  sort?: boolean;\n  locale?: string;\n  infix?: boolean;\n  stem?: boolean;\n  num_dim?: number;\n  store?: boolean;\n  range_index?: boolean;\n  [t: string]: unknown;\n}\n\nexport interface CollectionSchema extends CollectionCreateSchema {\n  created_at: number;\n  num_documents: number;\n  num_memory_shards: number;\n}\n\nexport interface CollectionDropFieldSchema {\n  name: string;\n  drop: true;\n}\n\nexport interface CollectionUpdateSchema\n  extends Partial<Omit<CollectionCreateSchema, \"name\" | \"fields\">> {\n  fields?: (CollectionFieldSchema | CollectionDropFieldSchema)[];\n}\n\nexport interface CollectionDeleteOptions {\n  compact_store?: boolean;\n}\n\nexport default class Collection<T extends DocumentSchema = object> {\n  private readonly _documents: Documents<T>;\n  private individualDocuments: Record<string, Document<T>> = {};\n  private readonly _overrides: Overrides;\n  private individualOverrides: Record<string, Override> = {};\n  private readonly _synonyms: Synonyms;\n  private individualSynonyms: Record<string, Synonym> = {};\n\n  constructor(\n    private readonly name: string,\n    private readonly apiCall: ApiCall,\n    private readonly configuration: any,\n  ) {\n    this.name = name;\n    this.apiCall = apiCall;\n    this.configuration = configuration;\n\n    this._documents = new Documents(\n      this.name,\n      this.apiCall,\n      this.configuration,\n    );\n    this._overrides = new Overrides(this.name, this.apiCall);\n    this._synonyms = new Synonyms(this.name, this.apiCall);\n  }\n\n  async retrieve(): Promise<CollectionSchema> {\n    return this.apiCall.get<CollectionSchema>(this.endpointPath());\n  }\n\n  async update(schema: CollectionUpdateSchema): Promise<CollectionSchema> {\n    return this.apiCall.patch<CollectionSchema>(this.endpointPath(), schema);\n  }\n\n  async delete(\n    options: CollectionDeleteOptions = {},\n  ): Promise<CollectionSchema> {\n    return this.apiCall.delete<CollectionSchema>(this.endpointPath(), options);\n  }\n\n  async exists(): Promise<boolean> {\n    try {\n      await this.retrieve();\n      return true;\n    } catch (e) {\n      if (e instanceof ObjectNotFound) return false;\n      throw e;\n    }\n  }\n\n  documents(): Documents<T>;\n  documents(documentId: string): Document<T>;\n  documents(documentId?: string): Document<T> | Documents<T> {\n    if (!documentId) {\n      return this._documents;\n    } else {\n      if (this.individualDocuments[documentId] === undefined) {\n        this.individualDocuments[documentId] = new Document(\n          this.name,\n          documentId,\n          this.apiCall,\n        );\n      }\n      return this.individualDocuments[documentId];\n    }\n  }\n\n  overrides(): Overrides;\n  overrides(overrideId: string): Override;\n  overrides(overrideId?: string): Overrides | Override {\n    if (overrideId === undefined) {\n      return this._overrides;\n    } else {\n      if (this.individualOverrides[overrideId] === undefined) {\n        this.individualOverrides[overrideId] = new Override(\n          this.name,\n          overrideId,\n          this.apiCall,\n        );\n      }\n      return this.individualOverrides[overrideId];\n    }\n  }\n\n  synonyms(): Synonyms;\n  synonyms(synonymId: string): Synonym;\n  synonyms(synonymId?: string): Synonyms | Synonym {\n    if (synonymId === undefined) {\n      return this._synonyms;\n    } else {\n      if (this.individualSynonyms[synonymId] === undefined) {\n        this.individualSynonyms[synonymId] = new Synonym(\n          this.name,\n          synonymId,\n          this.apiCall,\n        );\n      }\n      return this.individualSynonyms[synonymId];\n    }\n  }\n\n  private endpointPath(): string {\n    return `${Collections.RESOURCEPATH}/${encodeURIComponent(this.name)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/aliases\";\n\nexport interface CollectionAliasCreateSchema {\n  collection_name: string;\n}\n\nexport interface CollectionAliasSchema extends CollectionAliasCreateSchema {\n  name: string;\n}\n\nexport interface CollectionAliasesResponseSchema {\n  aliases: CollectionAliasSchema[];\n}\n\nexport default class Aliases {\n  constructor(private apiCall: ApiCall) {}\n\n  async upsert(\n    name: string,\n    mapping: CollectionAliasCreateSchema\n  ): Promise<CollectionAliasSchema> {\n    return this.apiCall.put<CollectionAliasSchema>(\n      this.endpointPath(name),\n      mapping\n    );\n  }\n\n  async retrieve(): Promise<CollectionAliasesResponseSchema> {\n    return this.apiCall.get<CollectionAliasesResponseSchema>(RESOURCEPATH);\n  }\n\n  private endpointPath(aliasName): string {\n    return `${Aliases.RESOURCEPATH}/${encodeURIComponent(aliasName)}`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import Aliases, { CollectionAliasSchema } from \"./Aliases\";\nimport ApiCall from \"./ApiCall\";\n\nexport default class Alias {\n  constructor(private name: string, private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<CollectionAliasSchema> {\n    return this.apiCall.get<CollectionAliasSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<CollectionAliasSchema> {\n    return this.apiCall.delete<CollectionAliasSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Aliases.RESOURCEPATH}/${encodeURIComponent(this.name)}`;\n  }\n}\n","import { createHmac } from \"crypto\";\nimport ApiCall from \"./ApiCall\";\nimport { KeyCreateSchema, KeySchema } from \"./Key\";\nimport { SearchParams } from \"./Documents\";\nimport { normalizeArrayableParams } from \"./Utils\";\n\nconst RESOURCEPATH = \"/keys\";\n\nexport interface KeysRetrieveSchema {\n  keys: KeySchema[];\n}\n\nexport interface GenerateScopedSearchKeyParams extends Partial<SearchParams> {\n  expires_at?: number;\n  cache_ttl?: number;\n  limit_multi_searches?: number;\n}\n\nexport default class Keys {\n  constructor(private apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async create(params: KeyCreateSchema): Promise<KeySchema> {\n    return this.apiCall.post<KeySchema>(Keys.RESOURCEPATH, params);\n  }\n\n  async retrieve(): Promise<KeysRetrieveSchema> {\n    return this.apiCall.get<KeysRetrieveSchema>(RESOURCEPATH);\n  }\n\n  generateScopedSearchKey(\n    searchKey: string,\n    parameters: GenerateScopedSearchKeyParams\n  ): string {\n    // Note: only a key generated with the `documents:search` action will be\n    // accepted by the server, when usined with the search endpoint.\n    const normalizedParams = normalizeArrayableParams(parameters);\n    const paramsJSON = JSON.stringify(normalizedParams);\n    const digest = Buffer.from(\n      createHmac(\"sha256\", searchKey).update(paramsJSON).digest(\"base64\")\n    );\n    const keyPrefix = searchKey.substr(0, 4);\n    const rawScopedKey = `${digest}${keyPrefix}${paramsJSON}`;\n\n    return Buffer.from(rawScopedKey).toString(\"base64\");\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Keys from \"./Keys\";\n\nexport interface KeyCreateSchema {\n  actions: string[];\n  collections: string[];\n  description?: string;\n  value?: string;\n  value_prefix?: string;\n  expires_at?: number;\n  autodelete?: boolean;\n}\n\nexport interface KeyDeleteSchema {\n  id: number;\n}\n\nexport interface KeySchema extends KeyCreateSchema {\n  id: number;\n}\n\nexport default class Key {\n  constructor(\n    private id: number,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<KeySchema> {\n    return this.apiCall.get<KeySchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<KeyDeleteSchema> {\n    return this.apiCall.delete<KeyDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Keys.RESOURCEPATH}/${encodeURIComponent(this.id)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/debug\";\n\nexport interface DebugResponseSchema {\n  state: number;\n  version: string;\n}\n\nexport default class Debug {\n  constructor(private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<DebugResponseSchema> {\n    return this.apiCall.get<DebugResponseSchema>(RESOURCEPATH);\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/metrics.json\";\n\nexport interface MetricsResponse {\n  [key: `system_cpu${number}_active_percentage`]: string;\n  system_cpu_active_percentage: string;\n  system_disk_total_bytes: string;\n  system_disk_used_bytes: string;\n  system_memory_total_bytes: string;\n  system_memory_total_swap_bytes?: string;\n  system_memory_used_bytes: string;\n  system_memory_used_swap_bytes?: string;\n  system_network_received_bytes: string;\n  system_network_sent_bytes: string;\n  typesense_memory_active_bytes: string;\n  typesense_memory_allocated_bytes: string;\n  typesense_memory_fragmentation_ratio: string;\n  typesense_memory_mapped_bytes: string;\n  typesense_memory_metadata_bytes: string;\n  typesense_memory_resident_bytes: string;\n  typesense_memory_retained_bytes: string;\n}\n\nexport default class Metrics {\n  constructor(private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<MetricsResponse> {\n    return this.apiCall.get(RESOURCEPATH);\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/stats.json\";\n\nexport interface EndpointStats {\n  [endpoint: string]: number;\n}\n\nexport interface StatsResponse {\n  delete_latency_ms?: number;\n  delete_requests_per_second?: number;\n  import_latency_ms?: number;\n  import_requests_per_second?: number;\n  latency_ms?: EndpointStats;\n  overloaded_requests_per_second?: number;\n  pending_write_batches?: number;\n  requests_per_second?: EndpointStats;\n  search_latency_ms?: number;\n  search_requests_per_second?: number;\n  total_requests_per_second?: number;\n  write_latency_ms?: number;\n  write_requests_per_second?: number;\n}\n\nexport default class Metrics {\n  constructor(private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<StatsResponse> {\n    return this.apiCall.get(RESOURCEPATH);\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/health\";\n\nexport interface HealthResponse {\n  ok: boolean;\n}\n\nexport default class Health {\n  constructor(private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<HealthResponse> {\n    return this.apiCall.get<HealthResponse>(RESOURCEPATH);\n  }\n}\n","import ApiCall from \"./ApiCall\";\n\nconst RESOURCEPATH = \"/operations\";\n\nexport default class Operations {\n  constructor(private apiCall: ApiCall) {}\n\n  async perform(\n    operationName:\n      | \"vote\"\n      | \"snapshot\"\n      | \"cache/clear\"\n      | \"schema_changes\"\n      // eslint-disable-next-line @typescript-eslint/ban-types -- Can't use `object` here, it needs to intersect with `{}`\n      | (string & {}),\n    queryParameters: Record<string, any> = {},\n  ): Promise<any> {\n    return this.apiCall.post(\n      `${RESOURCEPATH}/${operationName}`,\n      {},\n      queryParameters,\n    );\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport { PresetSchema } from \"./Preset\";\nimport { SearchParams } from \"./Documents\";\nimport { MultiSearchRequestsSchema } from \"./MultiSearch\";\nimport { normalizeArrayableParams } from \"./Utils\";\n\nconst RESOURCEPATH = \"/presets\";\n\nexport interface PresetCreateSchema {\n  value: SearchParams | MultiSearchRequestsSchema;\n}\n\nexport interface PresetsRetrieveSchema {\n  presets: PresetSchema[];\n}\n\nexport default class Presets {\n  constructor(private apiCall: ApiCall) {}\n\n  async upsert(\n    presetId: string,\n    params: PresetCreateSchema,\n  ): Promise<PresetSchema> {\n    if (typeof params.value === \"object\" && \"searches\" in params.value) {\n      const normalizedParams = params.value.searches.map((search) =>\n        normalizeArrayableParams(search),\n      );\n\n      return this.apiCall.put<PresetSchema>(this.endpointPath(presetId), {\n        value: { searches: normalizedParams },\n      });\n    }\n    const normalizedParams = normalizeArrayableParams(params.value);\n\n    return this.apiCall.put<PresetSchema>(this.endpointPath(presetId), {\n      value: normalizedParams,\n    });\n  }\n\n  async retrieve(): Promise<PresetsRetrieveSchema> {\n    return this.apiCall.get<PresetsRetrieveSchema>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${Presets.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Presets, { PresetCreateSchema } from \"./Presets\";\n\nexport interface PresetSchema extends PresetCreateSchema {\n  name: string;\n}\n\nexport interface PresetDeleteSchema {\n  name: string;\n}\n\nexport default class Preset {\n  constructor(private presetId: string, private apiCall: ApiCall) {}\n\n  async retrieve(): Promise<PresetSchema> {\n    return this.apiCall.get<PresetSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<PresetDeleteSchema> {\n    return this.apiCall.delete<PresetDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Presets.RESOURCEPATH}/${encodeURIComponent(this.presetId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport {\n  AnalyticsRuleCreateSchema,\n  AnalyticsRuleSchema,\n} from \"./AnalyticsRule\";\n\nexport interface AnalyticsRulesRetrieveSchema {\n  rules: AnalyticsRuleSchema[];\n}\n\nconst RESOURCEPATH = \"/analytics/rules\";\n\nexport default class AnalyticsRules {\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async upsert(\n    name: string,\n    params: AnalyticsRuleCreateSchema\n  ): Promise<AnalyticsRuleCreateSchema> {\n    return this.apiCall.put<AnalyticsRuleCreateSchema>(\n      this.endpointPath(name),\n      params\n    );\n  }\n\n  async retrieve(): Promise<AnalyticsRulesRetrieveSchema> {\n    return this.apiCall.get<AnalyticsRulesRetrieveSchema>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${AnalyticsRules.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport AnalyticsRules from \"./AnalyticsRules\";\n\nexport interface AnalyticsRuleCreateSchema {\n  type: \"popular_queries\" | \"nohits_queries\" | \"counter\";\n  params: {\n    enable_auto_aggregation?: boolean;\n    source: {\n      collections: string[];\n      events?: Array<{\n        type: string;\n        weight: number;\n        name: string;\n      }>;\n    };\n    expand_query?: boolean;\n    destination: {\n      collection: string;\n      counter_field?: string;\n    };\n    limit?: number;\n  };\n}\n\nexport interface AnalyticsRuleDeleteSchema {\n  name: string;\n}\n\nexport interface AnalyticsRuleSchema extends AnalyticsRuleCreateSchema {\n  name: string;\n}\n\nexport default class AnalyticsRule {\n  constructor(\n    private name: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<AnalyticsRuleSchema> {\n    return this.apiCall.get<AnalyticsRuleSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<AnalyticsRuleDeleteSchema> {\n    return this.apiCall.delete<AnalyticsRuleDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${AnalyticsRules.RESOURCEPATH}/${encodeURIComponent(this.name)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport { AnalyticsEventCreateSchema } from \"./AnalyticsEvent\";\n\nconst RESOURCEPATH = \"/analytics/events\";\n\nexport default class AnalyticsEvents {\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async create(\n    params: AnalyticsEventCreateSchema,\n  ): Promise<AnalyticsEventCreateSchema> {\n    return this.apiCall.post<AnalyticsEventCreateSchema>(\n      this.endpointPath(),\n      params,\n    );\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${AnalyticsEvents.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport AnalyticsRules from \"./AnalyticsRules\";\nimport AnalyticsRule from \"./AnalyticsRule\";\nimport AnalyticsEvents from \"./AnalyticsEvents\";\n\nconst RESOURCEPATH = \"/analytics\";\n\nexport default class Analytics {\n  private readonly _analyticsRules: AnalyticsRules;\n  private readonly individualAnalyticsRules: Record<string, AnalyticsRule> = {};\n  private readonly _analyticsEvents: AnalyticsEvents;\n\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n    this._analyticsRules = new AnalyticsRules(this.apiCall);\n    this._analyticsEvents = new AnalyticsEvents(this.apiCall);\n  }\n\n  rules(): AnalyticsRules;\n  rules(id: string): AnalyticsRule;\n  rules(id?: string): AnalyticsRules | AnalyticsRule {\n    if (id === undefined) {\n      return this._analyticsRules;\n    } else {\n      if (this.individualAnalyticsRules[id] === undefined) {\n        this.individualAnalyticsRules[id] = new AnalyticsRule(id, this.apiCall);\n      }\n      return this.individualAnalyticsRules[id];\n    }\n  }\n\n  events(): AnalyticsEvents {\n    return this._analyticsEvents;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport { StopwordSchema } from \"./Stopword\";\n\nconst RESOURCEPATH = \"/stopwords\";\n\nexport interface StopwordCreateSchema {\n  stopwords: string[];\n  locale?: string;\n}\n\nexport interface StopwordsRetrieveSchema {\n  stopwords: StopwordSchema[];\n}\n\nexport default class Stopwords {\n  constructor(private apiCall: ApiCall) {}\n\n  async upsert(\n    stopwordId: string,\n    params: StopwordCreateSchema,\n  ): Promise<StopwordSchema> {\n    return this.apiCall.put<StopwordSchema>(\n      this.endpointPath(stopwordId),\n      params,\n    );\n  }\n\n  async retrieve(): Promise<StopwordsRetrieveSchema> {\n    return this.apiCall.get<StopwordsRetrieveSchema>(this.endpointPath());\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${Stopwords.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH(): string {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Stopwords, { StopwordCreateSchema } from \"./Stopwords\";\n\nexport interface StopwordSchema extends StopwordCreateSchema {\n  id: string;\n  stopwords: string[];\n  locale?: string;\n}\n\nexport interface StopwordDeleteSchema {\n  id: string;\n}\n\nexport default class Stopword {\n  constructor(\n    private stopwordId: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<StopwordSchema> {\n    return this.apiCall.get<StopwordSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<StopwordDeleteSchema> {\n    return this.apiCall.delete<StopwordDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Stopwords.RESOURCEPATH}/${encodeURIComponent(this.stopwordId)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport {\n  ConversationModelCreateSchema,\n  ConversationModelSchema,\n} from \"./ConversationModel\";\n\nconst RESOURCEPATH = \"/conversations/models\";\n\nexport default class ConversationModels {\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async create(\n    params: ConversationModelCreateSchema,\n  ): Promise<ConversationModelCreateSchema> {\n    return this.apiCall.post<ConversationModelCreateSchema>(\n      this.endpointPath(),\n      params,\n    );\n  }\n\n  async retrieve(): Promise<ConversationModelSchema[]> {\n    return this.apiCall.get<ConversationModelSchema[]>(\n      this.endpointPath(),\n    );\n  }\n\n  private endpointPath(operation?: string): string {\n    return `${ConversationModels.RESOURCEPATH}${\n      operation === undefined ? \"\" : \"/\" + encodeURIComponent(operation)\n    }`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport ConversationModels from \"./ConversationModels\";\n\nexport interface ConversationModelCreateSchema {\n  id?: string;\n  model_name: string;\n  api_key?: string;\n  system_prompt?: string;\n  max_bytes: number;\n  history_collection?: string;\n}\n\nexport interface ConversationModelDeleteSchema {\n  id: string;\n}\n\nexport interface ConversationModelSchema extends ConversationModelCreateSchema {\n  id: string;\n}\n\nexport default class ConversationModel {\n  constructor(\n    private id: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async update(\n    params: ConversationModelCreateSchema,\n  ): Promise<ConversationModelCreateSchema> {\n    return this.apiCall.put<ConversationModelCreateSchema>(\n      this.endpointPath(),\n      params,\n    );\n  }\n\n  async retrieve(): Promise<ConversationModelSchema> {\n    return this.apiCall.get<ConversationModelSchema>(this.endpointPath());\n  }\n\n  async delete(): Promise<ConversationModelDeleteSchema> {\n    return this.apiCall.delete<ConversationModelDeleteSchema>(\n      this.endpointPath(),\n    );\n  }\n\n  private endpointPath(): string {\n    return `${ConversationModels.RESOURCEPATH}/${encodeURIComponent(this.id)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport ConversationModels from \"./ConversationModels\";\nimport ConversationModel from \"./ConversationModel\";\nimport { ConversationSchema } from \"./Conversation\";\n\nconst RESOURCEPATH = \"/conversations\";\n\nexport interface ConversationsRetrieveSchema {\n  conversations: ConversationSchema[];\n}\n\nexport default class Conversations {\n  private readonly _conversationsModels: ConversationModels;\n  private readonly individualConversationModels: Record<\n    string,\n    ConversationModel\n  > = {};\n\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n    this._conversationsModels = new ConversationModels(this.apiCall);\n  }\n\n  async retrieve(): Promise<ConversationsRetrieveSchema> {\n    return this.apiCall.get<ConversationsRetrieveSchema>(RESOURCEPATH);\n  }\n\n  models(): ConversationModels;\n  models(id: string): ConversationModel;\n  models(id?: string): ConversationModels | ConversationModel {\n    if (id === undefined) {\n      return this._conversationsModels;\n    } else {\n      if (this.individualConversationModels[id] === undefined) {\n        this.individualConversationModels[id] = new ConversationModel(\n          id,\n          this.apiCall,\n        );\n      }\n      return this.individualConversationModels[id];\n    }\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport Conversations from \"./Conversations\";\n\nexport interface ConversationDeleteSchema {\n  id: number;\n}\n\nexport interface ConversationUpdateSchema {\n  ttl: number;\n}\n\nexport interface ConversationSchema {\n  id: number;\n  conversation: object[];\n  last_updated: number;\n  ttl: number;\n}\n\nexport default class Conversation {\n  constructor(\n    private id: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<ConversationSchema[]> {\n    return this.apiCall.get<ConversationSchema[]>(this.endpointPath());\n  }\n\n  async update(\n    params: ConversationUpdateSchema,\n  ): Promise<ConversationUpdateSchema> {\n    return this.apiCall.put<ConversationUpdateSchema>(\n      this.endpointPath(),\n      params,\n    );\n  }\n\n  async delete(): Promise<ConversationDeleteSchema> {\n    return this.apiCall.delete<ConversationDeleteSchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${Conversations.RESOURCEPATH}/${encodeURIComponent(this.id)}`;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport type { StemmingDictionaryCreateSchema } from \"./StemmingDictionary\";\n\nconst RESOURCEPATH = \"/stemming/dictionaries\";\n\nexport interface StemmingDictionariesRetrieveSchema {\n  dictionaries: string[];\n}\n\nexport default class StemmingDictionaries {\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n  }\n\n  async upsert(\n    id: string,\n    wordRootCombinations: StemmingDictionaryCreateSchema[] | string,\n  ): Promise<StemmingDictionaryCreateSchema[] | string> {\n    const wordRootCombinationsInJSONLFormat = Array.isArray(\n      wordRootCombinations,\n    )\n      ? wordRootCombinations.map((combo) => JSON.stringify(combo)).join(\"\\n\")\n      : wordRootCombinations;\n\n    const resultsInJSONLFormat = await this.apiCall.performRequest<string>(\n\n      \"post\",\n      this.endpointPath(\"import\"),\n      {\n        queryParameters: {id},\n        bodyParameters: wordRootCombinationsInJSONLFormat,\n        additionalHeaders: {\"Content-Type\": \"text/plain\"},\n        skipConnectionTimeout: true,\n      }\n    );\n\n    return Array.isArray(wordRootCombinations)\n      ? resultsInJSONLFormat\n          .split(\"\\n\")\n          .map((line) => JSON.parse(line) as StemmingDictionaryCreateSchema)\n      : resultsInJSONLFormat;\n  }\n\n  async retrieve(): Promise<StemmingDictionariesRetrieveSchema> {\n    return this.apiCall.get<StemmingDictionariesRetrieveSchema>(\n      this.endpointPath(),\n    );\n  }\n\n  private endpointPath(operation?: string): string {\n    return operation === undefined\n      ? `${StemmingDictionaries.RESOURCEPATH}`\n      : `${StemmingDictionaries.RESOURCEPATH}/${encodeURIComponent(operation)}`;\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","import ApiCall from \"./ApiCall\";\nimport StemmingDictionaries from \"./StemmingDictionaries\";\n\nexport interface StemmingDictionaryCreateSchema {\n  root: string;\n  word: string;\n}\n\nexport interface StemmingDictionarySchema {\n  id: string;\n  words: StemmingDictionaryCreateSchema[];\n}\n\nexport default class StemmingDictionary {\n  constructor(\n    private id: string,\n    private apiCall: ApiCall,\n  ) {}\n\n  async retrieve(): Promise<StemmingDictionarySchema> {\n    return this.apiCall.get<StemmingDictionarySchema>(this.endpointPath());\n  }\n\n  private endpointPath(): string {\n    return `${StemmingDictionaries.RESOURCEPATH}/${encodeURIComponent(this.id)}`;\n  }\n}\n","import type ApiCall from \"./ApiCall\";\nimport StemmingDictionaries from \"./StemmingDictionaries\";\nimport StemmingDictionary from \"./StemmingDictionary\";\n\nconst RESOURCEPATH = \"/stemming\";\n\nexport default class Stemming {\n  private readonly _stemmingDictionaries: StemmingDictionaries;\n  private readonly individualStemmingDictionaries: Record<\n    string,\n    StemmingDictionary\n  > = {};\n\n  constructor(private readonly apiCall: ApiCall) {\n    this.apiCall = apiCall;\n    this._stemmingDictionaries = new StemmingDictionaries(this.apiCall);\n  }\n\n  dictionaries(): StemmingDictionaries;\n  dictionaries(id: string): StemmingDictionary;\n  dictionaries(id?: string): StemmingDictionaries | StemmingDictionary {\n    if (id === undefined) {\n      return this._stemmingDictionaries;\n    } else {\n      if (this.individualStemmingDictionaries[id] === undefined) {\n        this.individualStemmingDictionaries[id] = new StemmingDictionary(\n          id,\n          this.apiCall,\n        );\n      }\n      return this.individualStemmingDictionaries[id];\n    }\n  }\n\n  static get RESOURCEPATH() {\n    return RESOURCEPATH;\n  }\n}\n","/* eslint-disable no-dupe-class-members */\n\nimport Configuration, { ConfigurationOptions } from \"./Configuration\";\nimport ApiCall from \"./ApiCall\";\nimport Collections from \"./Collections\";\nimport Collection from \"./Collection\";\nimport Aliases from \"./Aliases\";\nimport Alias from \"./Alias\";\nimport Keys from \"./Keys\";\nimport Key from \"./Key\";\nimport Debug from \"./Debug\";\nimport Metrics from \"./Metrics\";\nimport Stats from \"./Stats\";\nimport Health from \"./Health\";\nimport Operations from \"./Operations\";\nimport MultiSearch from \"./MultiSearch\";\nimport Presets from \"./Presets\";\nimport Preset from \"./Preset\";\nimport Analytics from \"./Analytics\";\nimport Stopwords from \"./Stopwords\";\nimport Stopword from \"./Stopword\";\nimport Conversations from \"./Conversations\";\nimport Conversation from \"./Conversation\";\nimport Stemming from \"./Stemming\";\n\nexport default class Client {\n  configuration: Configuration;\n  apiCall: ApiCall;\n  debug: Debug;\n  metrics: Metrics;\n  stats: Stats;\n  health: Health;\n  operations: Operations;\n  multiSearch: MultiSearch;\n  analytics: Analytics;\n  stemming: Stemming;\n  private readonly _collections: Collections;\n  private readonly individualCollections: Record<string, Collection>;\n  private readonly _aliases: Aliases;\n  private readonly individualAliases: Record<string, Alias>;\n  private readonly _keys: Keys;\n  private readonly individualKeys: Record<number, Key>;\n  private readonly _presets: Presets;\n  private readonly individualPresets: Record<string, Preset>;\n  private readonly _stopwords: Stopwords;\n  private readonly individualStopwords: Record<string, Stopword>;\n  private readonly _conversations: Conversations;\n  private readonly individualConversations: Record<string, Conversation>;\n\n  constructor(options: ConfigurationOptions) {\n    options.sendApiKeyAsQueryParam = options.sendApiKeyAsQueryParam ?? false;\n\n    this.configuration = new Configuration(options);\n    this.apiCall = new ApiCall(this.configuration);\n    this.debug = new Debug(this.apiCall);\n    this.metrics = new Metrics(this.apiCall);\n    this.stats = new Stats(this.apiCall);\n    this.health = new Health(this.apiCall);\n    this.operations = new Operations(this.apiCall);\n    this.multiSearch = new MultiSearch(this.apiCall, this.configuration);\n    this._collections = new Collections(this.apiCall);\n    this.individualCollections = {};\n    this._aliases = new Aliases(this.apiCall);\n    this.individualAliases = {};\n    this._keys = new Keys(this.apiCall);\n    this.individualKeys = {};\n    this._presets = new Presets(this.apiCall);\n    this.individualPresets = {};\n    this._stopwords = new Stopwords(this.apiCall);\n    this.individualStopwords = {};\n    this.analytics = new Analytics(this.apiCall);\n    this.stemming = new Stemming(this.apiCall);\n    this._conversations = new Conversations(this.apiCall);\n    this.individualConversations = {};\n  }\n\n  collections(): Collections;\n  collections<T extends Record<string, any> = object>(\n    collectionName: string,\n  ): Collection<T>;\n  collections(collectionName?: string): Collections | Collection {\n    if (collectionName === undefined) {\n      return this._collections;\n    } else {\n      if (this.individualCollections[collectionName] === undefined) {\n        this.individualCollections[collectionName] = new Collection(\n          collectionName,\n          this.apiCall,\n          this.configuration,\n        );\n      }\n      return this.individualCollections[collectionName];\n    }\n  }\n\n  aliases(): Aliases;\n  aliases(aliasName: string): Alias;\n  aliases(aliasName?: string): Aliases | Alias {\n    if (aliasName === undefined) {\n      return this._aliases;\n    } else {\n      if (this.individualAliases[aliasName] === undefined) {\n        this.individualAliases[aliasName] = new Alias(aliasName, this.apiCall);\n      }\n      return this.individualAliases[aliasName];\n    }\n  }\n\n  keys(): Keys;\n  keys(id: number): Key;\n  keys(id?: number): Keys | Key {\n    if (id === undefined) {\n      return this._keys;\n    } else {\n      if (this.individualKeys[id] === undefined) {\n        this.individualKeys[id] = new Key(id, this.apiCall);\n      }\n      return this.individualKeys[id];\n    }\n  }\n\n  presets(): Presets;\n  presets(id: string): Preset;\n  presets(id?: string): Presets | Preset {\n    if (id === undefined) {\n      return this._presets;\n    } else {\n      if (this.individualPresets[id] === undefined) {\n        this.individualPresets[id] = new Preset(id, this.apiCall);\n      }\n      return this.individualPresets[id];\n    }\n  }\n\n  stopwords(): Stopwords;\n  stopwords(id: string): Stopword;\n  stopwords(id?: string): Stopwords | Stopword {\n    if (id === undefined) {\n      return this._stopwords;\n    } else {\n      if (this.individualStopwords[id] === undefined) {\n        this.individualStopwords[id] = new Stopword(id, this.apiCall);\n      }\n      return this.individualStopwords[id];\n    }\n  }\n\n  conversations(): Conversations;\n  conversations(id: string): Conversation;\n  conversations(id?: string): Conversations | Conversation {\n    if (id === undefined) {\n      return this._conversations;\n    } else {\n      if (this.individualConversations[id] === undefined) {\n        this.individualConversations[id] = new Conversation(id, this.apiCall);\n      }\n      return this.individualConversations[id];\n    }\n  }\n}\n"]}